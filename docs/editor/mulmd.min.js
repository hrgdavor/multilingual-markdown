var mulmd = (() => {
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[Object.keys(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };

  // src/md5.js
  var require_md5 = __commonJS({
    "src/md5.js"(exports, module) {
      function md5(inputString) {
        const hc = "0123456789abcdef";
        function rh(n) {
          let j;
          let s = "";
          for (j = 0; j <= 3; j++)
            s += hc.charAt(n >> j * 8 + 4 & 15) + hc.charAt(n >> j * 8 & 15);
          return s;
        }
        function ad(x2, y) {
          const l = (x2 & 65535) + (y & 65535);
          const m = (x2 >> 16) + (y >> 16) + (l >> 16);
          return m << 16 | l & 65535;
        }
        function rl(n, c2) {
          return n << c2 | n >>> 32 - c2;
        }
        function cm(q, a2, b2, x2, s, t) {
          return ad(rl(ad(ad(a2, q), ad(x2, t)), s), b2);
        }
        function ff(a2, b2, c2, d2, x2, s, t) {
          return cm(b2 & c2 | ~b2 & d2, a2, b2, x2, s, t);
        }
        function gg(a2, b2, c2, d2, x2, s, t) {
          return cm(b2 & d2 | c2 & ~d2, a2, b2, x2, s, t);
        }
        function hh(a2, b2, c2, d2, x2, s, t) {
          return cm(b2 ^ c2 ^ d2, a2, b2, x2, s, t);
        }
        function ii(a2, b2, c2, d2, x2, s, t) {
          return cm(c2 ^ (b2 | ~d2), a2, b2, x2, s, t);
        }
        function sb(x2) {
          let i2;
          const nblk = (x2.length + 8 >> 6) + 1;
          const blks = new Array(nblk * 16);
          for (i2 = 0; i2 < nblk * 16; i2++)
            blks[i2] = 0;
          for (i2 = 0; i2 < x2.length; i2++)
            blks[i2 >> 2] |= x2.charCodeAt(i2) << i2 % 4 * 8;
          blks[i2 >> 2] |= 128 << i2 % 4 * 8;
          blks[nblk * 16 - 2] = x2.length * 8;
          return blks;
        }
        let i;
        const x = sb(inputString);
        let a = 1732584193;
        let b = -271733879;
        let c = -1732584194;
        let d = 271733878;
        let olda;
        let oldb;
        let oldc;
        let oldd;
        for (i = 0; i < x.length; i += 16) {
          olda = a;
          oldb = b;
          oldc = c;
          oldd = d;
          a = ff(a, b, c, d, x[i + 0], 7, -680876936);
          d = ff(d, a, b, c, x[i + 1], 12, -389564586);
          c = ff(c, d, a, b, x[i + 2], 17, 606105819);
          b = ff(b, c, d, a, x[i + 3], 22, -1044525330);
          a = ff(a, b, c, d, x[i + 4], 7, -176418897);
          d = ff(d, a, b, c, x[i + 5], 12, 1200080426);
          c = ff(c, d, a, b, x[i + 6], 17, -1473231341);
          b = ff(b, c, d, a, x[i + 7], 22, -45705983);
          a = ff(a, b, c, d, x[i + 8], 7, 1770035416);
          d = ff(d, a, b, c, x[i + 9], 12, -1958414417);
          c = ff(c, d, a, b, x[i + 10], 17, -42063);
          b = ff(b, c, d, a, x[i + 11], 22, -1990404162);
          a = ff(a, b, c, d, x[i + 12], 7, 1804603682);
          d = ff(d, a, b, c, x[i + 13], 12, -40341101);
          c = ff(c, d, a, b, x[i + 14], 17, -1502002290);
          b = ff(b, c, d, a, x[i + 15], 22, 1236535329);
          a = gg(a, b, c, d, x[i + 1], 5, -165796510);
          d = gg(d, a, b, c, x[i + 6], 9, -1069501632);
          c = gg(c, d, a, b, x[i + 11], 14, 643717713);
          b = gg(b, c, d, a, x[i + 0], 20, -373897302);
          a = gg(a, b, c, d, x[i + 5], 5, -701558691);
          d = gg(d, a, b, c, x[i + 10], 9, 38016083);
          c = gg(c, d, a, b, x[i + 15], 14, -660478335);
          b = gg(b, c, d, a, x[i + 4], 20, -405537848);
          a = gg(a, b, c, d, x[i + 9], 5, 568446438);
          d = gg(d, a, b, c, x[i + 14], 9, -1019803690);
          c = gg(c, d, a, b, x[i + 3], 14, -187363961);
          b = gg(b, c, d, a, x[i + 8], 20, 1163531501);
          a = gg(a, b, c, d, x[i + 13], 5, -1444681467);
          d = gg(d, a, b, c, x[i + 2], 9, -51403784);
          c = gg(c, d, a, b, x[i + 7], 14, 1735328473);
          b = gg(b, c, d, a, x[i + 12], 20, -1926607734);
          a = hh(a, b, c, d, x[i + 5], 4, -378558);
          d = hh(d, a, b, c, x[i + 8], 11, -2022574463);
          c = hh(c, d, a, b, x[i + 11], 16, 1839030562);
          b = hh(b, c, d, a, x[i + 14], 23, -35309556);
          a = hh(a, b, c, d, x[i + 1], 4, -1530992060);
          d = hh(d, a, b, c, x[i + 4], 11, 1272893353);
          c = hh(c, d, a, b, x[i + 7], 16, -155497632);
          b = hh(b, c, d, a, x[i + 10], 23, -1094730640);
          a = hh(a, b, c, d, x[i + 13], 4, 681279174);
          d = hh(d, a, b, c, x[i + 0], 11, -358537222);
          c = hh(c, d, a, b, x[i + 3], 16, -722521979);
          b = hh(b, c, d, a, x[i + 6], 23, 76029189);
          a = hh(a, b, c, d, x[i + 9], 4, -640364487);
          d = hh(d, a, b, c, x[i + 12], 11, -421815835);
          c = hh(c, d, a, b, x[i + 15], 16, 530742520);
          b = hh(b, c, d, a, x[i + 2], 23, -995338651);
          a = ii(a, b, c, d, x[i + 0], 6, -198630844);
          d = ii(d, a, b, c, x[i + 7], 10, 1126891415);
          c = ii(c, d, a, b, x[i + 14], 15, -1416354905);
          b = ii(b, c, d, a, x[i + 5], 21, -57434055);
          a = ii(a, b, c, d, x[i + 12], 6, 1700485571);
          d = ii(d, a, b, c, x[i + 3], 10, -1894986606);
          c = ii(c, d, a, b, x[i + 10], 15, -1051523);
          b = ii(b, c, d, a, x[i + 1], 21, -2054922799);
          a = ii(a, b, c, d, x[i + 8], 6, 1873313359);
          d = ii(d, a, b, c, x[i + 15], 10, -30611744);
          c = ii(c, d, a, b, x[i + 6], 15, -1560198380);
          b = ii(b, c, d, a, x[i + 13], 21, 1309151649);
          a = ii(a, b, c, d, x[i + 4], 6, -145523070);
          d = ii(d, a, b, c, x[i + 11], 10, -1120210379);
          c = ii(c, d, a, b, x[i + 2], 15, 718787259);
          b = ii(b, c, d, a, x[i + 9], 21, -343485551);
          a = ad(a, olda);
          b = ad(b, oldb);
          c = ad(c, oldc);
          d = ad(d, oldd);
        }
        return rh(a) + rh(b) + rh(c) + rh(d);
      }
      module.exports = md5;
    }
  });

  // src/UUID.js
  var require_UUID = __commonJS({
    "src/UUID.js"(exports, module) {
      var nodejsVariant = () => {
        const [a, b] = process.hrtime();
        return Math.round(a * 1e3 + b / 1e6);
      };
      var UUID = () => {
        let d = Date.now();
        let d2 = typeof performance !== "undefined" && performance.now && performance.now() * 1e3 || nodejsVariant();
        return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, (c) => {
          let r = Math.random() * 16;
          if (d > 0) {
            r = (d + r) % 16 | 0;
            d = Math.floor(d / 16);
          } else {
            r = (d2 + r) % 16 | 0;
            d2 = Math.floor(d2 / 16);
          }
          return (c === "x" ? r : r & 7 | 8).toString(16);
        });
      };
      module.exports = UUID;
    }
  });

  // src/parse.js
  var require_parse = __commonJS({
    "src/parse.js"(exports, module) {
      function parse(md, fileName = "md") {
        const lines = md.split("\n").map((l) => l.trimEnd());
        const out = { sections: [] };
        let section, codeBlock, title2, json, level;
        lines.forEach((line, i) => {
          let lineNum = i + 1;
          if (line[0] === "#") {
            level = 1;
            while (line[level] === "#")
              level++;
            title2 = line;
            json = null;
            const idx = line.indexOf("{{");
            if (idx != -1) {
              json = line.substring(idx + 1, line.length - 1);
              title2 = line.substring(0, idx).trim();
            }
            section = { title: title2, lines: [], level };
            try {
              if (json)
                section.info = JSON.parse(json);
            } catch (e) {
              throw new Error(`Error parsing section info at ${fileName}:${lineNum}. ${e.message}. ${line}`);
            }
            out.sections.push(section);
          } else if (section) {
            if (line.substring(0, 3) === "```") {
              if (codeBlock) {
                if (line.substring(0, 3) === "```")
                  codeBlock = null;
                else
                  codeBlock.lines.push(line);
              } else {
                title2 = line.substring(3).trim();
                const idx = title2.indexOf("{{");
                if (idx != -1) {
                  json = title2.substring(idx + 1, title2.length - 1);
                  title2 = title2.substring(0, idx).trim();
                }
                codeBlock = { code: title2, lines: [] };
                try {
                  if (json)
                    codeBlock.info = JSON.parse(json);
                } catch (e) {
                  throw new Error(`Error parsing code-block info at ${fileName}:${lineNum}. ${e.message}. ${line}`);
                }
                section.lines.push(codeBlock);
              }
            } else {
              (codeBlock || section).lines.push(line);
            }
          } else {
          }
        });
        return out;
      }
      module.exports = parse;
    }
  });

  // src/stringify.js
  var require_stringify = __commonJS({
    "src/stringify.js"(exports, module) {
      function stringify(mdObj, fileName = "md") {
        return toLines(mdObj, []).join("\n");
      }
      function toLines(obj, out = []) {
        if (obj instanceof Array) {
          obj.forEach((line) => {
            if (typeof line == "string")
              out.push(line);
            else
              toLines(line, out);
          });
        } else if (obj.sections) {
          obj.sections.forEach((section) => toLines(section, out));
        } else if (obj.title) {
          let title2 = obj.title;
          if (obj.info)
            title2 += " {" + JSON.stringify(obj.info) + "}";
          out.push(title2);
          toLines(obj.lines, out);
        } else {
          let code = "```";
          if (obj.code)
            code += obj.code;
          if (obj.info)
            title += " {" + JSON.stringify(obj.info) + "}";
          out.push(code);
          toLines(obj.lines, out);
          out.push("```");
        }
        return out;
      }
      stringify.toLines = toLines;
      module.exports = stringify;
    }
  });

  // src/sectionMd5.js
  var require_sectionMd5 = __commonJS({
    "src/sectionMd5.js"(exports, module) {
      var md5 = require_md5();
      function sectionMd5(section) {
        let lines = [section.title || section.code || ""];
        section.lines.forEach((line) => {
          if (typeof line === "string")
            lines.push(line);
        });
        return md5(lines.join("\n"));
      }
      module.exports = sectionMd5;
    }
  });

  // src/init.js
  var require_init = __commonJS({
    "src/init.js"(exports, module) {
      var UUID = require_UUID();
      var sectionMd5 = require_sectionMd5();
      function init(mdObj) {
        doInit(UUID, () => Date.now(), mdObj);
      }
      function doInit(UUID2, nowFunc, mdObj) {
        if (mdObj && mdObj.sections)
          mdObj.sections.forEach((section) => initSection(UUID2, nowFunc, section));
        return mdObj;
      }
      function initSection(UUID2, nowFunc, section) {
        if (section && section.lines) {
          console.log("section", section);
          section.lines.forEach((line) => {
            if (typeof line !== "string")
              initSection(UUID2, nowFunc, line);
          });
          let info = section.info = section.info || {};
          if (!info.ts)
            info.ts = nowFunc();
          if (!info.id)
            info.id = UUID2();
          if (!info.h)
            info.h = sectionMd5(section);
        }
        return section;
      }
      init.doInit = doInit;
      module.exports = init;
    }
  });

  // index.js
  var require_multilingual_markdown = __commonJS({
    "index.js"(exports, module) {
      module.exports = {
        md5: require_md5(),
        UUID: require_UUID(),
        parse: require_parse(),
        stringify: require_stringify(),
        sectionMd5: require_sectionMd5(),
        init: require_init()
      };
    }
  });
  return require_multilingual_markdown();
})();
//# sourceMappingURL=data:application/json;base64,
