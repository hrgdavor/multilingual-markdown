(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.jscadModeling = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
const cssColors=require("./cssColors"),colorNameToRgb=o=>cssColors[o.toLowerCase()];module.exports=colorNameToRgb;

},{"./cssColors":3}],2:[function(require,module,exports){
const flatten=require("../utils/flatten"),geom2=require("../geometries/geom2"),geom3=require("../geometries/geom3"),path2=require("../geometries/path2"),poly3=require("../geometries/poly3"),colorGeom2=(o,e)=>{const r=geom2.create(geom2.toSides(e));return r.color=o,r},colorGeom3=(o,e)=>{const r=geom3.create(geom3.toPolygons(e));return r.color=o,r},colorPath2=(o,e)=>{const r=path2.clone(e);return r.color=o,r},colorPoly3=(o,e)=>{const r=poly3.clone(e);return r.color=o,r},colorize=(o,...e)=>{if(!Array.isArray(o))throw new Error("color must be an array");if(o.length<3)throw new Error("color must contain R, G and B values");if(3===o.length&&(o=[o[0],o[1],o[2],1]),0===(e=flatten(e)).length)throw new Error("wrong number of arguments");const r=e.map(e=>geom2.isA(e)?colorGeom2(o,e):geom3.isA(e)?colorGeom3(o,e):path2.isA(e)?colorPath2(o,e):poly3.isA(e)?colorPoly3(o,e):(e.color=o,e));return 1===r.length?r[0]:r};module.exports=colorize;

},{"../geometries/geom2":22,"../geometries/geom3":36,"../geometries/path2":57,"../geometries/poly3":73,"../utils/flatten":374}],3:[function(require,module,exports){
const cssColors={black:[0,0,0],silver:[192/255,192/255,192/255],gray:[128/255,128/255,128/255],white:[1,1,1],maroon:[128/255,0,0],red:[1,0,0],purple:[128/255,0,128/255],fuchsia:[1,0,1],green:[0,128/255,0],lime:[0,1,0],olive:[128/255,128/255,0],yellow:[1,1,0],navy:[0,0,128/255],blue:[0,0,1],teal:[0,128/255,128/255],aqua:[0,1,1],aliceblue:[240/255,248/255,1],antiquewhite:[250/255,235/255,215/255],aquamarine:[127/255,1,212/255],azure:[240/255,1,1],beige:[245/255,245/255,220/255],bisque:[1,228/255,196/255],blanchedalmond:[1,235/255,205/255],blueviolet:[138/255,43/255,226/255],brown:[165/255,42/255,42/255],burlywood:[222/255,184/255,135/255],cadetblue:[95/255,158/255,160/255],chartreuse:[127/255,1,0],chocolate:[210/255,105/255,30/255],coral:[1,127/255,80/255],cornflowerblue:[100/255,149/255,237/255],cornsilk:[1,248/255,220/255],crimson:[220/255,20/255,60/255],cyan:[0,1,1],darkblue:[0,0,139/255],darkcyan:[0,139/255,139/255],darkgoldenrod:[184/255,134/255,11/255],darkgray:[169/255,169/255,169/255],darkgreen:[0,100/255,0],darkgrey:[169/255,169/255,169/255],darkkhaki:[189/255,183/255,107/255],darkmagenta:[139/255,0,139/255],darkolivegreen:[85/255,107/255,47/255],darkorange:[1,140/255,0],darkorchid:[.6,50/255,.8],darkred:[139/255,0,0],darksalmon:[233/255,150/255,122/255],darkseagreen:[143/255,188/255,143/255],darkslateblue:[72/255,61/255,139/255],darkslategray:[47/255,79/255,79/255],darkslategrey:[47/255,79/255,79/255],darkturquoise:[0,206/255,209/255],darkviolet:[148/255,0,211/255],deeppink:[1,20/255,147/255],deepskyblue:[0,191/255,1],dimgray:[105/255,105/255,105/255],dimgrey:[105/255,105/255,105/255],dodgerblue:[30/255,144/255,1],firebrick:[178/255,34/255,34/255],floralwhite:[1,250/255,240/255],forestgreen:[34/255,139/255,34/255],gainsboro:[220/255,220/255,220/255],ghostwhite:[248/255,248/255,1],gold:[1,215/255,0],goldenrod:[218/255,165/255,32/255],greenyellow:[173/255,1,47/255],grey:[128/255,128/255,128/255],honeydew:[240/255,1,240/255],hotpink:[1,105/255,180/255],indianred:[205/255,92/255,92/255],indigo:[75/255,0,130/255],ivory:[1,1,240/255],khaki:[240/255,230/255,140/255],lavender:[230/255,230/255,250/255],lavenderblush:[1,240/255,245/255],lawngreen:[124/255,252/255,0],lemonchiffon:[1,250/255,205/255],lightblue:[173/255,216/255,230/255],lightcoral:[240/255,128/255,128/255],lightcyan:[224/255,1,1],lightgoldenrodyellow:[250/255,250/255,210/255],lightgray:[211/255,211/255,211/255],lightgreen:[144/255,238/255,144/255],lightgrey:[211/255,211/255,211/255],lightpink:[1,182/255,193/255],lightsalmon:[1,160/255,122/255],lightseagreen:[32/255,178/255,170/255],lightskyblue:[135/255,206/255,250/255],lightslategray:[119/255,136/255,.6],lightslategrey:[119/255,136/255,.6],lightsteelblue:[176/255,196/255,222/255],lightyellow:[1,1,224/255],limegreen:[50/255,205/255,50/255],linen:[250/255,240/255,230/255],magenta:[1,0,1],mediumaquamarine:[.4,205/255,170/255],mediumblue:[0,0,205/255],mediumorchid:[186/255,85/255,211/255],mediumpurple:[147/255,112/255,219/255],mediumseagreen:[60/255,179/255,113/255],mediumslateblue:[123/255,104/255,238/255],mediumspringgreen:[0,250/255,154/255],mediumturquoise:[72/255,209/255,.8],mediumvioletred:[199/255,21/255,133/255],midnightblue:[25/255,25/255,112/255],mintcream:[245/255,1,250/255],mistyrose:[1,228/255,225/255],moccasin:[1,228/255,181/255],navajowhite:[1,222/255,173/255],oldlace:[253/255,245/255,230/255],olivedrab:[107/255,142/255,35/255],orange:[1,165/255,0],orangered:[1,69/255,0],orchid:[218/255,112/255,214/255],palegoldenrod:[238/255,232/255,170/255],palegreen:[152/255,251/255,152/255],paleturquoise:[175/255,238/255,238/255],palevioletred:[219/255,112/255,147/255],papayawhip:[1,239/255,213/255],peachpuff:[1,218/255,185/255],peru:[205/255,133/255,63/255],pink:[1,192/255,203/255],plum:[221/255,160/255,221/255],powderblue:[176/255,224/255,230/255],rosybrown:[188/255,143/255,143/255],royalblue:[65/255,105/255,225/255],saddlebrown:[139/255,69/255,19/255],salmon:[250/255,128/255,114/255],sandybrown:[244/255,164/255,96/255],seagreen:[46/255,139/255,87/255],seashell:[1,245/255,238/255],sienna:[160/255,82/255,45/255],skyblue:[135/255,206/255,235/255],slateblue:[106/255,90/255,205/255],slategray:[112/255,128/255,144/255],slategrey:[112/255,128/255,144/255],snow:[1,250/255,250/255],springgreen:[0,1,127/255],steelblue:[70/255,130/255,180/255],tan:[210/255,180/255,140/255],thistle:[216/255,191/255,216/255],tomato:[1,99/255,71/255],turquoise:[64/255,224/255,208/255],violet:[238/255,130/255,238/255],wheat:[245/255,222/255,179/255],whitesmoke:[245/255,245/255,245/255],yellowgreen:[154/255,205/255,50/255]};module.exports=cssColors;

},{}],4:[function(require,module,exports){
const hexToRgb=t=>{if((t=t.replace("#","")).length<6)throw new Error("the given notation must contain 3 or more hex values");const e=parseInt(t.substring(0,2),16)/255,n=parseInt(t.substring(2,4),16)/255,r=parseInt(t.substring(4,6),16)/255;if(t.length>=8){return[e,n,r,parseInt(t.substring(6,8),16)/255]}return[e,n,r]};module.exports=hexToRgb;

},{}],5:[function(require,module,exports){
const flatten=require("../utils/flatten"),hueToColorComponent=require("./hueToColorComponent"),hslToRgb=(...o)=>{if((o=flatten(o)).length<3)throw new Error("values must contain H, S and L values");const e=o[0],n=o[1],t=o[2];let r=t,l=t,u=t;if(0!==n){const o=t<.5?t*(1+n):t+n-t*n,h=2*t-o;r=hueToColorComponent(h,o,e+1/3),l=hueToColorComponent(h,o,e),u=hueToColorComponent(h,o,e-1/3)}if(o.length>3){return[r,l,u,o[3]]}return[r,l,u]};module.exports=hslToRgb;

},{"../utils/flatten":374,"./hueToColorComponent":7}],6:[function(require,module,exports){
const flatten=require("../utils/flatten"),hsvToRgb=(...e)=>{if((e=flatten(e)).length<3)throw new Error("values must contain H, S and V values");const t=e[0],a=e[1],r=e[2];let s=0,n=0,o=0;const c=Math.floor(6*t),l=6*t-c,u=r*(1-a),b=r*(1-l*a),h=r*(1-(1-l)*a);switch(c%6){case 0:s=r,n=h,o=u;break;case 1:s=b,n=r,o=u;break;case 2:s=u,n=r,o=h;break;case 3:s=u,n=b,o=r;break;case 4:s=h,n=u,o=r;break;case 5:s=r,n=u,o=b}if(e.length>3){return[s,n,o,e[3]]}return[s,n,o]};module.exports=hsvToRgb;

},{"../utils/flatten":374}],7:[function(require,module,exports){
const hueToColorComponent=(o,e,n)=>(n<0&&(n+=1),n>1&&(n-=1),n<1/6?o+6*(e-o)*n:n<.5?e:n<2/3?o+(e-o)*(2/3-n)*6:o);module.exports=hueToColorComponent;

},{}],8:[function(require,module,exports){
module.exports={colorize:require("./colorize"),colorNameToRgb:require("./colorNameToRgb"),cssColors:require("./cssColors"),hexToRgb:require("./hexToRgb"),hslToRgb:require("./hslToRgb"),hsvToRgb:require("./hsvToRgb"),hueToColorComponent:require("./hueToColorComponent"),rgbToHex:require("./rgbToHex"),rgbToHsl:require("./rgbToHsl"),rgbToHsv:require("./rgbToHsv")};

},{"./colorNameToRgb":1,"./colorize":2,"./cssColors":3,"./hexToRgb":4,"./hslToRgb":5,"./hsvToRgb":6,"./hueToColorComponent":7,"./rgbToHex":9,"./rgbToHsl":10,"./rgbToHsv":11}],9:[function(require,module,exports){
const flatten=require("../utils/flatten"),rgbToHex=(...t)=>{if((t=flatten(t)).length<3)throw new Error("values must contain R, G and B values");const e=255*t[0],r=255*t[1],n=255*t[2];let o=`#${Number(16777216+65536*e+256*r+n).toString(16).substring(1,7)}`;return t.length>3&&(o+=Number(255*t[3]).toString(16)),o};module.exports=rgbToHex;

},{"../utils/flatten":374}],10:[function(require,module,exports){
const flatten=require("../utils/flatten"),rgbToHsl=(...t)=>{if((t=flatten(t)).length<3)throw new Error("values must contain R, G and B values");const e=t[0],n=t[1],s=t[2],a=Math.max(e,n,s),r=Math.min(e,n,s);let l,o;const c=(a+r)/2;if(a===r)l=o=0;else{const t=a-r;switch(o=c>.5?t/(2-a-r):t/(a+r),a){case e:l=(n-s)/t+(n<s?6:0);break;case n:l=(s-e)/t+2;break;case s:l=(e-n)/t+4}l/=6}if(t.length>3){return[l,o,c,t[3]]}return[l,o,c]};module.exports=rgbToHsl;

},{"../utils/flatten":374}],11:[function(require,module,exports){
const flatten=require("../utils/flatten"),rgbToHsv=(...e)=>{if((e=flatten(e)).length<3)throw new Error("values must contain R, G and B values");const t=e[0],a=e[1],n=e[2],r=Math.max(t,a,n),s=Math.min(t,a,n);let l;const o=r,c=r-s,i=0===r?0:c/r;if(r===s)l=0;else{switch(r){case t:l=(a-n)/c+(a<n?6:0);break;case a:l=(n-t)/c+2;break;case n:l=(t-a)/c+4}l/=6}if(e.length>3){return[l,i,o,e[3]]}return[l,i,o]};module.exports=rgbToHsv;

},{"../utils/flatten":374}],12:[function(require,module,exports){
const create=e=>{if(!Array.isArray(e))throw new Error("Bezier points must be a valid array/");if(e.length<2)throw new Error("Bezier points must contain at least 2 values.");const r=getPointType(e);return{points:e,pointType:r,dimensions:"float_single"===r?0:e[0].length,permutations:getPermutations(e.length-1),tangentPermutations:getPermutations(e.length-2)}},getPointType=function(e){let r=null;return e.forEach(e=>{let t="";if(Number.isFinite(e))t="float_single";else{if(!Array.isArray(e))throw new Error("Bezier points must all be numbers or arrays of number.");e.forEach(e=>{if(!Number.isFinite(e))throw new Error("Bezier point values must all be numbers.")}),t="float_"+e.length}if(null==r)r=t;else if(r!==t)throw new Error("Bezier points must be either all numbers or all arrays of numbers of the same size.")}),r},getPermutations=function(e){const r=[];for(let t=0;t<=e;t++)r.push(factorial(e)/(factorial(t)*factorial(e-t)));return r},factorial=function(e){let r=1;for(let t=2;t<=e;t++)r*=t;return r};module.exports=create;

},{}],13:[function(require,module,exports){
module.exports={create:require("./create"),valueAt:require("./valueAt"),tangentAt:require("./tangentAt")};

},{"./create":12,"./tangentAt":14,"./valueAt":15}],14:[function(require,module,exports){
const tangentAt=(t,n)=>{if(t<0||t>1)throw new Error("Bezier tangentAt() input must be between 0 and 1");if("float_single"===n.pointType)return bezierTangent(n,n.points,t);{const e=[];for(let o=0;o<n.dimensions;o++){const r=[];for(let t=0;t<n.points.length;t++)r.push(n.points[t][o]);e.push(bezierTangent(n,r,t))}return e}},bezierTangent=function(t,n,e){const o=n.length-1;let r=0;for(let i=0;i<o;i++){const s=o*(n[i+1]-n[i]);r+=t.tangentPermutations[i]*Math.pow(1-e,o-1-i)*Math.pow(e,i)*s}return r};module.exports=tangentAt;

},{}],15:[function(require,module,exports){
const valueAt=(t,e)=>{if(t<0||t>1)throw new Error("Bezier valueAt() input must be between 0 and 1");if("float_single"===e.pointType)return bezierFunction(e,e.points,t);{const n=[];for(let o=0;o<e.dimensions;o++){const i=[];for(let t=0;t<e.points.length;t++)i.push(e.points[t][o]);n.push(bezierFunction(e,i,t))}return n}},bezierFunction=function(t,e,n){const o=e.length-1;let i=0;for(let r=0;r<=o;r++)i+=t.permutations[r]*Math.pow(1-n,o-r)*Math.pow(n,r)*e[r];return i};module.exports=valueAt;

},{}],16:[function(require,module,exports){
module.exports={bezier:require("./bezier")};

},{"./bezier":13}],17:[function(require,module,exports){
const mat4=require("../../maths/mat4"),vec2=require("../../maths/vec2"),applyTransforms=r=>mat4.isIdentity(r.transforms)?r:(r.sides=r.sides.map(s=>{return[vec2.transform(vec2.create(),s[0],r.transforms),vec2.transform(vec2.create(),s[1],r.transforms)]}),mat4.identity(r.transforms),r);module.exports=applyTransforms;

},{"../../maths/mat4":137,"../../maths/vec2":183}],18:[function(require,module,exports){
const mat4=require("../../maths/mat4"),vec2=require("../../maths/vec2"),create=require("./create"),clone=e=>{const r=create();return r.sides=e.sides.map(e=>[vec2.clone(e[0]),vec2.clone(e[1])]),r.transforms=mat4.clone(e.transforms),r};module.exports=clone;

},{"../../maths/mat4":137,"../../maths/vec2":183,"./create":19}],19:[function(require,module,exports){
const mat4=require("../../maths/mat4"),create=e=>(void 0===e&&(e=[]),{sides:e,transforms:mat4.create()});module.exports=create;

},{"../../maths/mat4":137}],20:[function(require,module,exports){
const mat4=require("../../maths/mat4"),vec2=require("../../maths/vec2"),create=require("./create"),fromCompactBinary=e=>{if(0!==e[0])throw new Error("invalid compact binary data");const r=create();r.transforms=mat4.clone(e.slice(1,17));for(let t=21;t<e.length;t+=4){const a=vec2.fromValues(e[t+0],e[t+1]),o=vec2.fromValues(e[t+2],e[t+3]);r.sides.push([a,o])}return e[17]>=0&&(r.color=[e[17],e[18],e[19],e[20]]),r};module.exports=fromCompactBinary;

},{"../../maths/mat4":137,"../../maths/vec2":183,"./create":19}],21:[function(require,module,exports){
const vec2=require("../../maths/vec2"),create=require("./create"),fromPoints=e=>{if(!Array.isArray(e))throw new Error("the given points must be an array");let r=e.length;if(r<3)throw new Error("the given points must define a closed geometry with three or more points");vec2.equals(e[0],e[r-1])&&--r;const t=[];let o=e[r-1];for(let n=0;n<r;n++){const r=e[n];t.push([vec2.clone(o),vec2.clone(r)]),o=r}return create(t)};module.exports=fromPoints;

},{"../../maths/vec2":183,"./create":19}],22:[function(require,module,exports){
module.exports={clone:require("./clone"),create:require("./create"),fromPoints:require("./fromPoints"),fromCompactBinary:require("./fromCompactBinary"),isA:require("./isA"),reverse:require("./reverse"),toOutlines:require("./toOutlines"),toPoints:require("./toPoints"),toSides:require("./toSides"),toString:require("./toString"),toCompactBinary:require("./toCompactBinary"),transform:require("./transform")};

},{"./clone":18,"./create":19,"./fromCompactBinary":20,"./fromPoints":21,"./isA":23,"./reverse":24,"./toCompactBinary":25,"./toOutlines":26,"./toPoints":27,"./toSides":28,"./toString":29,"./transform":30}],23:[function(require,module,exports){
const isA=s=>!!(s&&"object"==typeof s&&"sides"in s&&"transforms"in s&&Array.isArray(s.sides)&&"length"in s.transforms);module.exports=isA;

},{}],24:[function(require,module,exports){
const create=require("./create"),toSides=require("./toSides"),reverse=e=>{const r=toSides(e).map(e=>[e[1],e[0]]);return r.reverse(),create(r)};module.exports=reverse;

},{"./create":19,"./toSides":28}],25:[function(require,module,exports){
const toCompactBinary=o=>{const t=o.sides,r=o.transforms;let n=[-1,-1,-1,-1];o.color&&(n=o.color);const e=new Float32Array(21+4*t.length);e[0]=0,e[1]=r[0],e[2]=r[1],e[3]=r[2],e[4]=r[3],e[5]=r[4],e[6]=r[5],e[7]=r[6],e[8]=r[7],e[9]=r[8],e[10]=r[9],e[11]=r[10],e[12]=r[11],e[13]=r[12],e[14]=r[13],e[15]=r[14],e[16]=r[15],e[17]=n[0],e[18]=n[1],e[19]=n[2],e[20]=n[3];for(let o=0;o<t.length;o++){const r=4*o+21,n=t[o][0],s=t[o][1];e[r+0]=n[0],e[r+1]=n[1],e[r+2]=s[0],e[r+3]=s[1]}return e};module.exports=toCompactBinary;

},{}],26:[function(require,module,exports){
const vec2=require("../../maths/vec2"),toSides=require("./toSides"),toEdges=e=>{const t=[],s=e=>{const s=t.findIndex(t=>vec2.equals(t,e));return s<0?(t.push(e),e):t[s]},o=[];return e.forEach(e=>{o.push([s(e[0]),s(e[1])])}),o},toOutlines=e=>{const t=new Map;toEdges(toSides(e)).forEach(e=>{t.has(e[0])||t.set(e[0],[]),t.get(e[0]).push(e)});const s=[];for(;;){let e;for(const[s,o]of t){if(e=o.shift())break;t.delete(s)}if(void 0===e)break;const o=[],r=e[0],n=vec2.create();for(;;){o.push(e[0]);const s=e[1];if(s===r)break;const c=t.get(s);if(!c)throw new Error("the given geometry is not closed. verify proper construction");let i=-1;if(1===c.length)i=0;else{let t;const s=vec2.angleDegrees(vec2.subtract(n,e[1],e[0]));for(let e=0;e<c.length;e++){const o=c[e];let r=vec2.angleDegrees(vec2.subtract(n,o[1],o[0]))-s;r<-180&&(r+=360),r>=180&&(r-=360),(i<0||r>t)&&(i=e,t=r)}}const l=c[i];c.splice(i,1),0===c.length&&t.delete(s),e=l}o.length>0&&o.push(o.shift()),s.push(o)}return t.clear(),s};module.exports=toOutlines;

},{"../../maths/vec2":183,"./toSides":28}],27:[function(require,module,exports){
const toSides=require("./toSides"),toPoints=t=>{const o=toSides(t).map(t=>t[0]);return o.length>0&&o.push(o.shift()),o};module.exports=toPoints;

},{"./toSides":28}],28:[function(require,module,exports){
const applyTransforms=require("./applyTransforms"),toSides=s=>applyTransforms(s).sides;module.exports=toSides;

},{"./applyTransforms":17}],29:[function(require,module,exports){
const vec2=require("../../maths/vec2"),toSides=require("./toSides"),toString=e=>{const t=toSides(e);let o="geom2 ("+t.length+" sides):\n[\n";return t.forEach(e=>{o+="  ["+vec2.toString(e[0])+", "+vec2.toString(e[1])+"]\n"}),o+="]\n"};module.exports=toString;

},{"../../maths/vec2":183,"./toSides":28}],30:[function(require,module,exports){
const mat4=require("../../maths/mat4"),create=require("./create"),transform=(r,t)=>{const e=create(t.sides);return mat4.multiply(e.transforms,r,t.transforms),e};module.exports=transform;

},{"../../maths/mat4":137,"./create":19}],31:[function(require,module,exports){
const mat4=require("../../maths/mat4"),poly3=require("../poly3"),applyTransforms=r=>mat4.isIdentity(r.transforms)?r:(r.polygons=r.polygons.map(s=>poly3.transform(r.transforms,s)),mat4.identity(r.transforms),r);module.exports=applyTransforms;

},{"../../maths/mat4":137,"../poly3":73}],32:[function(require,module,exports){
const mat4=require("../../maths/mat4"),poly3=require("../poly3"),create=require("./create"),clone=e=>{const o=create();return o.polygons=e.polygons.map(e=>poly3.clone(e)),o.isRetesselated=e.isRetesselated,o.transforms=mat4.clone(e.transforms),o};module.exports=clone;

},{"../../maths/mat4":137,"../poly3":73,"./create":33}],33:[function(require,module,exports){
const mat4=require("../../maths/mat4"),create=e=>(void 0===e&&(e=[]),{polygons:e,isRetesselated:!1,transforms:mat4.create()});module.exports=create;

},{"../../maths/mat4":137}],34:[function(require,module,exports){
const vec3=require("../../maths/vec3"),mat4=require("../../maths/mat4"),poly3=require("../poly3"),create=require("./create"),fromCompactBinary=e=>{if(1!==e[0])throw new Error("invalid compact binary data");const r=create();r.transforms=mat4.clone(e.slice(1,17)),r.isRetesselated=!!e[17];const t=e[22];let o=23,a=e.length-3*t;for(;a<e.length;){const t=e[o];o++;const c=[];for(let r=0;r<t;r++)c.push(vec3.fromValues(e[a],e[a+1],e[a+2])),a+=3;r.polygons.push(poly3.create(c))}return e[18]>=0&&(r.color=[e[18],e[19],e[20],e[21]]),r};module.exports=fromCompactBinary;

},{"../../maths/mat4":137,"../../maths/vec3":214,"../poly3":73,"./create":33}],35:[function(require,module,exports){
const poly3=require("../poly3"),create=require("./create"),fromPoints=r=>{if(!Array.isArray(r))throw new Error("the given points must be an array");const e=r.map((r,e)=>{return poly3.fromPoints(r)});return create(e)};module.exports=fromPoints;

},{"../poly3":73,"./create":33}],36:[function(require,module,exports){
module.exports={clone:require("./clone"),create:require("./create"),fromPoints:require("./fromPoints"),fromCompactBinary:require("./fromCompactBinary"),invert:require("./invert"),isA:require("./isA"),toPoints:require("./toPoints"),toPolygons:require("./toPolygons"),toString:require("./toString"),toCompactBinary:require("./toCompactBinary"),transform:require("./transform")};

},{"./clone":32,"./create":33,"./fromCompactBinary":34,"./fromPoints":35,"./invert":37,"./isA":38,"./toCompactBinary":39,"./toPoints":40,"./toPolygons":41,"./toString":42,"./transform":43}],37:[function(require,module,exports){
const poly3=require("../poly3"),create=require("./create"),toPolygons=require("./toPolygons"),invert=e=>{const o=toPolygons(e).map(e=>poly3.invert(e));return create(o)};module.exports=invert;

},{"../poly3":73,"./create":33,"./toPolygons":41}],38:[function(require,module,exports){
const isA=o=>!!(o&&"object"==typeof o&&"polygons"in o&&"transforms"in o&&Array.isArray(o.polygons)&&"length"in o.transforms);module.exports=isA;

},{}],39:[function(require,module,exports){
const poly3=require("../poly3"),toCompactBinary=o=>{const t=o.polygons,e=o.transforms,r=t.length,l=t.reduce((o,t)=>o+t.vertices.length,0);let n=[-1,-1,-1,-1];o.color&&(n=o.color);const s=new Float32Array(23+r+3*l);s[0]=1,s[1]=e[0],s[2]=e[1],s[3]=e[2],s[4]=e[3],s[5]=e[4],s[6]=e[5],s[7]=e[6],s[8]=e[7],s[9]=e[8],s[10]=e[9],s[11]=e[10],s[12]=e[11],s[13]=e[12],s[14]=e[13],s[15]=e[14],s[16]=e[15],s[17]=o.isRetesselated?1:0,s[18]=n[0],s[19]=n[1],s[20]=n[2],s[21]=n[3],s[22]=l;let c=23,a=c+r;return t.forEach(o=>{const t=poly3.toPoints(o);s[c]=t.length,c++;for(let o=0;o<t.length;o++){const e=t[o];s[a+0]=e[0],s[a+1]=e[1],s[a+2]=e[2],a+=3}}),s};module.exports=toCompactBinary;

},{"../poly3":73}],40:[function(require,module,exports){
const poly3=require("../poly3"),toPolygons=require("./toPolygons"),toPoints=o=>{return toPolygons(o).map(o=>poly3.toPoints(o))};module.exports=toPoints;

},{"../poly3":73,"./toPolygons":41}],41:[function(require,module,exports){
const applyTransforms=require("./applyTransforms"),toPolygons=o=>applyTransforms(o).polygons;module.exports=toPolygons;

},{"./applyTransforms":31}],42:[function(require,module,exports){
const poly3=require("../poly3"),toPolygons=require("./toPolygons"),toString=o=>{const t=toPolygons(o);let n="geom3 ("+t.length+" polygons):\n";return t.forEach(o=>{n+="  "+poly3.toString(o)+"\n"}),n};module.exports=toString;

},{"../poly3":73,"./toPolygons":41}],43:[function(require,module,exports){
const mat4=require("../../maths/mat4"),create=require("./create"),transform=(e,t)=>{const r=create(t.polygons);return r.isRetesselated=t.isRetesselated,mat4.multiply(r.transforms,e,t.transforms),r};module.exports=transform;

},{"../../maths/mat4":137,"./create":33}],44:[function(require,module,exports){
module.exports={geom2:require("./geom2"),geom3:require("./geom3"),path2:require("./path2"),poly2:require("./poly2"),poly3:require("./poly3")};

},{"./geom2":22,"./geom3":36,"./path2":57,"./poly2":67,"./poly3":73}],45:[function(require,module,exports){
const vec2=require("../../maths/vec2"),fromPoints=require("./fromPoints"),toPoints=require("./toPoints"),appendArc=(e,t)=>{let{endpoint:r,radius:a,xaxisrotation:o,clockwise:n,large:s,segments:c}=Object.assign({},{radius:[0,0],xaxisrotation:0,clockwise:!1,large:!1,segments:16},e);if(!Array.isArray(r))throw new Error("endpoint must be an array of X and Y values");if(r.length<2)throw new Error("endpoint must contain X and Y values");if(r=vec2.clone(r),!Array.isArray(a))throw new Error("radius must be an array of X and Y values");if(a.length<2)throw new Error("radius must contain X and Y values");if(c<4)throw new Error("segments must be four or more");if(t.isClosed)throw new Error("the given path cannot be closed");const i=toPoints(t);if(i.length<1)throw new Error("the given path must contain one or more points (as the starting point for the arc)");let h=a[0],l=a[1];const u=i[i.length-1];h=Math.round(1e5*h)/1e5,l=Math.round(1e5*l)/1e5,r=vec2.fromValues(Math.round(1e5*r[0])/1e5,Math.round(1e5*r[1])/1e5);const d=!n;let v=[];if(0===h||0===l)v.push(r);else{h=Math.abs(h),l=Math.abs(l);const e=o,t=Math.cos(e),a=Math.sin(e),n=vec2.subtract(vec2.create(),u,r);vec2.scale(n,n,.5);const i=Math.round(1e5*(t*n[0]+a*n[1]))/1e5,f=Math.round(1e5*(-a*n[0]+t*n[1]))/1e5,m=vec2.fromValues(i,f),M=m[0]*m[0]/(h*h)+m[1]*m[1]/(l*l);if(M>1){const e=Math.sqrt(M);h*=e,l*=e,h=Math.round(1e5*h)/1e5,l=Math.round(1e5*l)/1e5}let w=Math.sqrt((h*h*l*l-h*h*m[1]*m[1]-l*l*m[0]*m[0])/(h*h*m[1]*m[1]+l*l*m[0]*m[0]));d===s&&(w=-w);const g=vec2.fromValues(h*m[1]/l,-l*m[0]/h);vec2.scale(g,g,w);let p=vec2.fromValues(t*g[0]-a*g[1],a*g[0]+t*g[1]);p=vec2.add(p,p,vec2.scale(vec2.create(),vec2.add(vec2.create(),u,r),.5));const P=vec2.fromValues((m[0]-g[0])/h,(m[1]-g[1])/l),b=vec2.fromValues((-m[0]-g[0])/h,(-m[1]-g[1])/l),E=vec2.angleRadians(P);let V=vec2.angleRadians(b)-E;V%=2*Math.PI,!d&&V>0?V-=2*Math.PI:d&&V<0&&(V+=2*Math.PI);let y=Math.ceil(Math.abs(V)/(2*Math.PI)*c)+1;y<1&&(y=1);for(let e=1;e<=y;e++){const r=E+e/y*V,o=Math.cos(r),n=Math.sin(r),s=vec2.fromValues(t*h*o-a*l*n,a*h*o+t*l*n);vec2.add(s,s,p),v.push(s)}}return v=i.concat(v),fromPoints({},v)};module.exports=appendArc;

},{"../../maths/vec2":183,"./fromPoints":56,"./toPoints":61}],46:[function(require,module,exports){
const vec2=require("../../maths/vec2"),vec3=require("../../maths/vec2"),appendPoints=require("./appendPoints"),toPoints=require("./toPoints"),appendBezier=(e,t)=>{let{controlPoints:o,segments:r}=Object.assign({},{segments:16},e);if(!Array.isArray(o))throw new Error("controlPoints must be an array of one or more points");if(o.length<1)throw new Error("controlPoints must be an array of one or more points");if(r<4)throw new Error("segments must be four or more");if(t.isClosed)throw new Error("the given geometry cannot be closed");const n=toPoints(t);if(n.length<1)throw new Error("the given path must contain one or more points (as the starting point for the bezier curve)");if(null===(o=o.slice())[0]){if(o.length<2)throw new Error("a null control point must be passed with one more control points");let e=n[n.length-2];if("lastBezierControlPoint"in t&&(e=t.lastBezierControlPoint),!Array.isArray(e))throw new Error("the given path must contain TWO or more points if given a null control point");const r=vec2.scale(vec2.create(),n[n.length-1],2);vec2.subtract(r,r,e),o[0]=r}o.unshift(n[n.length-1]);const s=o.length-1,i=[];let c=1;for(let e=0;e<=s;++e)e>0&&(c*=e),i.push(c);const a=[];for(let e=0;e<=s;++e){const t=i[s]/(i[e]*i[s-e]);a.push(t)}const l=vec2.create(),h=vec2.create(),p=vec3.create(),u=e=>{let t=1,r=Math.pow(1-e,s);const n=1!==e?1/(1-e):1,i=vec2.create();for(let c=0;c<=s;++c){c===s&&(r=1);const h=a[c]*t*r,p=vec2.scale(l,o[c],h);vec2.add(i,i,p),t*=e,r*=n}return i},v=[],f=[],m=s+1;for(let e=0;e<m;++e){const t=e/(m-1),o=u(t);v.push(o),f.push(t)}let g=1;const w=2*Math.PI/r,P=Math.sin(w);for(;g<v.length-1;){const e=vec2.subtract(l,v[g],v[g-1]);vec2.normalize(e,e);const t=vec2.subtract(h,v[g+1],v[g]);vec2.normalize(t,t);const o=vec2.cross(p,e,t);if(Math.abs(o[2])>P){const e=f[g-1],t=f[g+1],o=e+1*(t-e)/3,r=e+2*(t-e)/3,n=u(o),s=u(r);v.splice(g,1,n,s),f.splice(g,1,o,r),--g<1&&(g=1)}else++g}v.shift();const b=appendPoints(v,t);return b.lastBezierControlPoint=o[o.length-2],b};module.exports=appendBezier;

},{"../../maths/vec2":183,"./appendPoints":47,"./toPoints":61}],47:[function(require,module,exports){
const fromPoints=require("./fromPoints"),toPoints=require("./toPoints"),appendPoints=(o,t)=>{if(t.isClosed)throw new Error("cannot append points to a closed path");let n=toPoints(t);return n=n.concat(o),fromPoints({},n)};module.exports=appendPoints;

},{"./fromPoints":56,"./toPoints":61}],48:[function(require,module,exports){
const mat4=require("../../maths/mat4"),vec2=require("../../maths/vec2"),applyTransforms=t=>mat4.isIdentity(t.transforms)?t:(t.points=t.points.map(r=>vec2.transform(vec2.create(),r,t.transforms)),mat4.identity(t.transforms),t);module.exports=applyTransforms;

},{"../../maths/mat4":137,"../../maths/vec2":183}],49:[function(require,module,exports){
const mat4=require("../../maths/mat4"),vec2=require("../../maths/vec2"),create=require("./create"),clone=e=>{const r=create();return r.points=e.points.map(e=>vec2.clone(e)),r.isClosed=e.isClosed,r.transforms=mat4.clone(e.transforms),r};module.exports=clone;

},{"../../maths/mat4":137,"../../maths/vec2":183,"./create":52}],50:[function(require,module,exports){
const{EPS:EPS}=require("../../maths/constants"),vec2=require("../../maths/vec2"),clone=require("./clone"),close=e=>{if(e.isClosed)return e;const t=clone(e);if(t.isClosed=!0,t.points.length>1){const e=t.points,n=e[0];let o=e[e.length-1];for(;vec2.distance(n,o)<EPS*EPS&&(e.pop(),1!==e.length);)o=e[e.length-1]}return t};module.exports=close;

},{"../../maths/constants":87,"../../maths/vec2":183,"./clone":49}],51:[function(require,module,exports){
const fromPoints=require("./fromPoints"),toPoints=require("./toPoints"),concat=(...o)=>{let t=!1;for(const n of o){if(t)throw new Error("Cannot concatenate to a closed path");t=n.isClosed}let n=[];return o.forEach(o=>{n=n.concat(toPoints(o))}),fromPoints({closed:t},n)};module.exports=concat;

},{"./fromPoints":56,"./toPoints":61}],52:[function(require,module,exports){
const mat4=require("../../maths/mat4"),create=e=>(void 0===e&&(e=[]),{points:e,isClosed:!1,transforms:mat4.create()});module.exports=create;

},{"../../maths/mat4":137}],53:[function(require,module,exports){
const toPoints=require("./toPoints"),eachPoint=(o,t,e)=>{toPoints(e).forEach(t)};module.exports=eachPoint;

},{"./toPoints":61}],54:[function(require,module,exports){
const vec2=require("../../maths/vec2"),toPoints=require("./toPoints"),equals=(e,t)=>{if(e.isClosed!==t.isClosed)return!1;if(e.points.length!==t.points.length)return!1;const o=toPoints(e),s=toPoints(t),i=o.length;let r=0;do{let t=!1;for(let e=0;e<i;e++)if(!vec2.equals(o[e],s[(e+r)%i])){t=!0;break}if(!1===t)return!0;if(!e.isClosed)return!1}while(++r<i);return!1};module.exports=equals;

},{"../../maths/vec2":183,"./toPoints":61}],55:[function(require,module,exports){
const mat4=require("../../maths/mat4"),vec2=require("../../maths/vec2"),create=require("./create"),fromCompactBinary=r=>{if(2!==r[0])throw new Error("invalid compact binary data");const e=create();e.transforms=mat4.clone(r.slice(1,17)),e.isClosed=!!r[17];for(let t=22;t<r.length;t+=2){const o=vec2.fromValues(r[t],r[t+1]);e.points.push(o)}return r[18]>=0&&(e.color=[r[18],r[19],r[20],r[21]]),e};module.exports=fromCompactBinary;

},{"../../maths/mat4":137,"../../maths/vec2":183,"./create":52}],56:[function(require,module,exports){
const{EPS:EPS}=require("../../maths/constants"),vec2=require("../../maths/vec2"),close=require("./close"),create=require("./create"),fromPoints=(e,t)=>{let{closed:s}=Object.assign({},{closed:!1},e),o=create();if(o.points=t.map(e=>vec2.clone(e)),o.points.length>1){const e=o.points[0],t=o.points[o.points.length-1];vec2.distance(e,t)<EPS*EPS&&(s=!0)}return!0===s&&(o=close(o)),o};module.exports=fromPoints;

},{"../../maths/constants":87,"../../maths/vec2":183,"./close":50,"./create":52}],57:[function(require,module,exports){
module.exports={appendArc:require("./appendArc"),appendBezier:require("./appendBezier"),appendPoints:require("./appendPoints"),clone:require("./clone"),close:require("./close"),concat:require("./concat"),create:require("./create"),eachPoint:require("./eachPoint"),equals:require("./equals"),fromPoints:require("./fromPoints"),fromCompactBinary:require("./fromCompactBinary"),isA:require("./isA"),reverse:require("./reverse"),toPoints:require("./toPoints"),toString:require("./toString"),toCompactBinary:require("./toCompactBinary"),transform:require("./transform")};

},{"./appendArc":45,"./appendBezier":46,"./appendPoints":47,"./clone":49,"./close":50,"./concat":51,"./create":52,"./eachPoint":53,"./equals":54,"./fromCompactBinary":55,"./fromPoints":56,"./isA":58,"./reverse":59,"./toCompactBinary":60,"./toPoints":61,"./toString":62,"./transform":63}],58:[function(require,module,exports){
const isA=s=>!!(s&&"object"==typeof s&&"points"in s&&"transforms"in s&&"isClosed"in s&&Array.isArray(s.points)&&"length"in s.transforms);module.exports=isA;

},{}],59:[function(require,module,exports){
const clone=require("./clone"),reverse=e=>{const r=clone(e);return r.points=e.points.slice().reverse(),r};module.exports=reverse;

},{"./clone":49}],60:[function(require,module,exports){
const toCompactBinary=o=>{const t=o.points,n=o.transforms;let r=[-1,-1,-1,-1];o.color&&(r=o.color);const s=new Float32Array(22+2*t.length);s[0]=2,s[1]=n[0],s[2]=n[1],s[3]=n[2],s[4]=n[3],s[5]=n[4],s[6]=n[5],s[7]=n[6],s[8]=n[7],s[9]=n[8],s[10]=n[9],s[11]=n[10],s[12]=n[11],s[13]=n[12],s[14]=n[13],s[15]=n[14],s[16]=n[15],s[17]=o.isClosed?1:0,s[18]=r[0],s[19]=r[1],s[20]=r[2],s[21]=r[3];for(let o=0;o<t.length;o++){const n=2*o+22,r=t[o];s[n]=r[0],s[n+1]=r[1]}return s};module.exports=toCompactBinary;

},{}],61:[function(require,module,exports){
const applyTransforms=require("./applyTransforms"),toPoints=o=>applyTransforms(o).points;module.exports=toPoints;

},{"./applyTransforms":48}],62:[function(require,module,exports){
const vec2=require("../../maths/vec2"),toPoints=require("./toPoints"),toString=t=>{const o=toPoints(t);let n="path ("+o.length+" points, "+t.isClosed+"):\n[\n";return o.forEach(t=>{n+="  "+vec2.toString(t)+",\n"}),n+="]\n"};module.exports=toString;

},{"../../maths/vec2":183,"./toPoints":61}],63:[function(require,module,exports){
const mat4=require("../../maths/mat4"),create=require("./create"),transform=(r,t)=>{const e=create(t.points);return e.isClosed=t.isClosed,mat4.multiply(e.transforms,r,t.transforms),e};module.exports=transform;

},{"../../maths/mat4":137,"./create":52}],64:[function(require,module,exports){
const measureArea=require("./measureArea"),flip=require("./flip"),arePointsInside=(e,t)=>{if(0===e.length)return 0;const n=t.vertices;return n.length<3?0:(measureArea(t)<0&&(t=flip(t)),e.reduce((e,t)=>e+isPointInside(t,n),0)===e.length?1:0)},isPointInsideOld=(e,t)=>{let n=0;const r=t.length,s=e[0],i=e[1];for(let o=0;o<t.length;o++){const l=t[o],u=t[(o+1)%r];s!==l[0]&&i!==l[1]&&s!==u[0]&&i!==u[1]&&(l[1]<=i?u[1]>i&&isLeft(l,u,e)>0&&n++:u[1]<=i&&isLeft(l,u,e)<0&&n--)}return 0===n?1:0},isPointInside=(e,t)=>{const n=t.length,r=e[0],s=e[1];let i=t[n-1],o=t[0],l=i[1]>s,u=0,f=0;for(let e=n+1;--e;){const e=o[1]>s;if(l!==e){const e=i[0]>r,t=o[0]>r;e&&t?u=!u:o[0]-(o[1]-s)*(i[0]-o[0])/(i[1]-o[1])>=r&&(u=!u)}l=e,i=o,o=t[++f]}return u},isLeft=(e,t,n)=>(t[0]-e[0])*(n[1]-e[1])-(n[0]-e[0])*(t[1]-e[1]);module.exports=arePointsInside;

},{"./flip":66,"./measureArea":68}],65:[function(require,module,exports){
const create=e=>((void 0===e||e.length<3)&&(e=[]),{vertices:e});module.exports=create;

},{}],66:[function(require,module,exports){
const create=require("./create"),flip=e=>{const r=e.vertices.slice().reverse();return create(r)};module.exports=flip;

},{"./create":65}],67:[function(require,module,exports){
module.exports={arePointsInside:require("./arePointsInside"),create:require("./create"),flip:require("./flip"),measureArea:require("./measureArea")};

},{"./arePointsInside":64,"./create":65,"./flip":66,"./measureArea":68}],68:[function(require,module,exports){
const area=require("../../maths/utils/area"),measureArea=e=>area(e.vertices);module.exports=measureArea;

},{"../../maths/utils/area":160}],69:[function(require,module,exports){
const create=require("./create"),vec3=require("../../maths/vec3"),clone=(...e)=>{let c,r;return 1===e.length?(c=create(),r=e[0]):(c=e[0],r=e[1]),c.vertices=r.vertices.map(e=>vec3.clone(e)),c};module.exports=clone;

},{"../../maths/vec3":214,"./create":70}],70:[function(require,module,exports){
const create=e=>((void 0===e||e.length<3)&&(e=[]),{vertices:e});module.exports=create;

},{}],71:[function(require,module,exports){
const vec3=require("../../maths/vec3"),create=require("./create"),fromPoints=e=>{const r=e.map(e=>vec3.clone(e));return create(r)};module.exports=fromPoints;

},{"../../maths/vec3":214,"./create":70}],72:[function(require,module,exports){
const create=require("./create"),fromPointsAndPlane=(e,n)=>{const r=create(e);return r.plane=n,r};module.exports=fromPointsAndPlane;

},{"./create":70}],73:[function(require,module,exports){
module.exports={clone:require("./clone"),create:require("./create"),fromPoints:require("./fromPoints"),fromPointsAndPlane:require("./fromPointsAndPlane"),invert:require("./invert"),isA:require("./isA"),isConvex:require("./isConvex"),measureArea:require("./measureArea"),measureBoundingBox:require("./measureBoundingBox"),measureBoundingSphere:require("./measureBoundingSphere"),measureSignedVolume:require("./measureSignedVolume"),plane:require("./plane"),toPoints:require("./toPoints"),toString:require("./toString"),transform:require("./transform")};

},{"./clone":69,"./create":70,"./fromPoints":71,"./fromPointsAndPlane":72,"./invert":74,"./isA":75,"./isConvex":76,"./measureArea":77,"./measureBoundingBox":78,"./measureBoundingSphere":79,"./measureSignedVolume":80,"./plane":81,"./toPoints":82,"./toString":83,"./transform":84}],74:[function(require,module,exports){
const create=require("./create"),invert=e=>{const r=e.vertices.slice().reverse();return create(r)};module.exports=invert;

},{"./create":70}],75:[function(require,module,exports){
const isA=e=>!!(e&&"object"==typeof e&&"vertices"in e&&Array.isArray(e.vertices));module.exports=isA;

},{}],76:[function(require,module,exports){
const plane=require("../../maths/plane"),vec3=require("../../maths/vec3"),isConvex=e=>areVerticesConvex(e.vertices),areVerticesConvex=e=>{const t=e.length;if(t>2){const r=plane.fromPoints(plane.create(),e[0],e[1],e[2]);let c=e[t-2],n=e[t-1];for(let o=0;o<t;o++){const t=e[o];if(!isConvexPoint(c,n,t,r))return!1;c=n,n=t}}return!0},isConvexPoint=(e,t,r,c)=>{const n=vec3.cross(vec3.create(),vec3.subtract(vec3.create(),t,e),vec3.subtract(vec3.create(),r,t));return vec3.dot(n,c)>=0};module.exports=isConvex;

},{"../../maths/plane":155,"../../maths/vec3":214}],77:[function(require,module,exports){
const vec3=require("../../maths/vec3"),measureArea=e=>{const t=e.vertices.length;if(t<3)return 0;const r=e.vertices,a=r[0],c=r[1],s=r[2],o=vec3.subtract(vec3.create(),c,a),u=vec3.subtract(vec3.create(),s,a),v=vec3.cross(o,o,u),b=Math.abs(v[0]),h=Math.abs(v[1]),n=Math.abs(v[2]),f=Math.sqrt(b*b+h*h+n*n);let i=3;b>h&&b>n?i=1:h>n&&(i=2);let l=0,m=0,M=1,d=2;switch(i){case 1:for(M=1;M<t;M++)m=M-1,d=(M+1)%t,l+=r[M][1]*(r[d][2]-r[m][2]);l+=r[0][1]*(r[1][2]-r[t-1][2]),l*=f/(2*v[0]);break;case 2:for(M=1;M<t;M++)m=M-1,d=(M+1)%t,l+=r[M][2]*(r[d][0]-r[m][0]);l+=r[0][2]*(r[1][0]-r[t-1][0]),l*=f/(2*v[1]);break;case 3:default:for(M=1;M<t;M++)m=M-1,d=(M+1)%t,l+=r[M][0]*(r[d][1]-r[m][1]);l+=r[0][0]*(r[1][1]-r[t-1][1]),l*=f/(2*v[2])}return l};module.exports=measureArea;

},{"../../maths/vec3":214}],78:[function(require,module,exports){
const vec3=require("../../maths/vec3"),measureBoundingBox=e=>{const c=e.vertices,n=c.length,o=0===n?vec3.create():vec3.clone(c[0]),r=vec3.clone(o);for(let e=1;e<n;e++)vec3.min(o,o,c[e]),vec3.max(r,r,c[e]);return[o,r]};module.exports=measureBoundingBox;

},{"../../maths/vec3":214}],79:[function(require,module,exports){
const vec3=require("../../maths/vec3"),measureBoundingBox=require("./measureBoundingBox"),measureBoundingSphere=e=>{const n=measureBoundingBox(e),r=n[0];return vec3.add(r,n[0],n[1]),vec3.scale(r,r,.5),[r,vec3.distance(r,n[1])]};module.exports=measureBoundingSphere;

},{"../../maths/vec3":214,"./measureBoundingBox":78}],80:[function(require,module,exports){
const vec3=require("../../maths/vec3"),measureSignedVolume=e=>{let r=0;const t=e.vertices,c=vec3.create();for(let e=0;e<t.length-2;e++)vec3.cross(c,t[e+1],t[e+2]),r+=vec3.dot(t[0],c);return r/=6};module.exports=measureSignedVolume;

},{"../../maths/vec3":214}],81:[function(require,module,exports){
const mplane=require("../../maths/plane/"),plane=e=>{if(!e.plane){const n=e.vertices;e.plane=mplane.fromPoints(mplane.create(),n[0],n[1],n[2])}return e.plane};module.exports=plane;

},{"../../maths/plane/":155}],82:[function(require,module,exports){
const toPoints=o=>o.vertices;module.exports=toPoints;

},{}],83:[function(require,module,exports){
const vec3=require("../../maths/vec3/"),toString=e=>{let t="poly3: vertices: [";return e.vertices.forEach(e=>{t+=`${vec3.toString(e)}, `}),t+="]"};module.exports=toString;

},{"../../maths/vec3/":214}],84:[function(require,module,exports){
const mat4=require("../../maths/mat4"),vec3=require("../../maths/vec3"),create=require("./create"),transform=(e,r)=>{const t=r.vertices.map(r=>vec3.transform(vec3.create(),r,e));return mat4.isMirroring(e)&&t.reverse(),create(t)};module.exports=transform;

},{"../../maths/mat4":137,"../../maths/vec3":214,"./create":70}],85:[function(require,module,exports){
module.exports={colors:require("./colors"),curves:require("./curves"),geometries:require("./geometries"),maths:require("./maths"),measurements:require("./measurements"),primitives:require("./primitives"),text:require("./text"),utils:require("./utils"),booleans:require("./operations/booleans"),expansions:require("./operations/expansions"),extrusions:require("./operations/extrusions"),hulls:require("./operations/hulls"),modifiers:require("./operations/modifiers"),transforms:require("./operations/transforms")};

},{"./colors":8,"./curves":16,"./geometries":44,"./maths":88,"./measurements":244,"./operations/booleans":254,"./operations/expansions":285,"./operations/extrusions":298,"./operations/hulls":319,"./operations/modifiers":330,"./operations/transforms":339,"./primitives":355,"./text":368,"./utils":376}],86:[function(require,module,exports){
const mat4=require("./mat4"),vec2=require("./vec2"),vec3=require("./vec3"),OrthoNormalBasis=function(e,t){arguments.length<2&&(t=vec3.orthogonal(vec3.create(),e)),this.v=vec3.normalize(vec3.create(),vec3.cross(vec3.create(),e,t)),this.u=vec3.cross(vec3.create(),this.v,e),this.plane=e,this.planeorigin=vec3.scale(vec3.create(),e,e[3])};OrthoNormalBasis.GetCartesian=function(e,t){const i=e+"/"+t;let s,n;if("X/Y"===i)s=[0,0,1],n=[1,0,0];else if("Y/-X"===i)s=[0,0,1],n=[0,1,0];else if("-X/-Y"===i)s=[0,0,1],n=[-1,0,0];else if("-Y/X"===i)s=[0,0,1],n=[0,-1,0];else if("-X/Y"===i)s=[0,0,-1],n=[-1,0,0];else if("-Y/-X"===i)s=[0,0,-1],n=[0,-1,0];else if("X/-Y"===i)s=[0,0,-1],n=[1,0,0];else if("Y/X"===i)s=[0,0,-1],n=[0,1,0];else if("X/Z"===i)s=[0,-1,0],n=[1,0,0];else if("Z/-X"===i)s=[0,-1,0],n=[0,0,1];else if("-X/-Z"===i)s=[0,-1,0],n=[-1,0,0];else if("-Z/X"===i)s=[0,-1,0],n=[0,0,-1];else if("-X/Z"===i)s=[0,1,0],n=[-1,0,0];else if("-Z/-X"===i)s=[0,1,0],n=[0,0,-1];else if("X/-Z"===i)s=[0,1,0],n=[1,0,0];else if("Z/X"===i)s=[0,1,0],n=[0,0,1];else if("Y/Z"===i)s=[1,0,0],n=[0,1,0];else if("Z/-Y"===i)s=[1,0,0],n=[0,0,1];else if("-Y/-Z"===i)s=[1,0,0],n=[0,-1,0];else if("-Z/Y"===i)s=[1,0,0],n=[0,0,-1];else if("-Y/Z"===i)s=[-1,0,0],n=[0,-1,0];else if("-Z/-Y"===i)s=[-1,0,0],n=[0,0,-1];else if("Y/-Z"===i)s=[-1,0,0],n=[0,1,0];else{if("Z/Y"!==i)throw new Error("OrthoNormalBasis.GetCartesian: invalid combination of axis identifiers. Should pass two string arguments from [X,Y,Z,-X,-Y,-Z], being two different axes.");s=[-1,0,0],n=[0,0,1]}return new OrthoNormalBasis(new Plane(new Vector3D(s),0),new Vector3D(n))},OrthoNormalBasis.Z0Plane=function(){const e=new Plane(new Vector3D([0,0,1]),0);return new OrthoNormalBasis(e,new Vector3D([1,0,0]))},OrthoNormalBasis.prototype={getProjectionMatrix:function(){return mat4.fromValues(this.u[0],this.v[0],this.plane[0],0,this.u[1],this.v[1],this.plane[1],0,this.u[2],this.v[2],this.plane[2],0,0,0,-this.plane[3],1)},getInverseProjectionMatrix:function(){const e=vec3.scale(vec3.create(),this.plane,this.plane[3]);return mat4.fromValues(this.u[0],this.u[1],this.u[2],0,this.v[0],this.v[1],this.v[2],0,this.plane[0],this.plane[1],this.plane[2],0,e[0],e[1],e[2],1)},to2D:function(e){return vec2.fromValues(vec3.dot(e,this.u),vec3.dot(e,this.v))},to3D:function(e){const t=vec3.scale(vec3.create(),this.u,e[0]),i=vec3.scale(vec3.create(),this.v,e[1]),s=vec3.add(t,t,this.planeorigin);return vec3.add(i,i,s)},line3Dto2D:function(e){const t=e.point,i=e.direction.plus(t),s=this.to2D(t),n=this.to2D(i);return Line2D.fromPoints(s,n)},line2Dto3D:function(e){const t=e.origin(),i=e.direction().plus(t),s=this.to3D(t),n=this.to3D(i);return Line3D.fromPoints(s,n)},transform:function(e){const t=this.plane.transform(e),i=this.u.transform(e),s=new Vector3D(0,0,0).transform(e),n=i.minus(s);return new OrthoNormalBasis(t,n)}},module.exports=OrthoNormalBasis;

},{"./mat4":137,"./vec2":183,"./vec3":214}],87:[function(require,module,exports){
const spatialResolution=1e5,EPS=1e-5;module.exports={EPS:EPS,spatialResolution:1e5};

},{}],88:[function(require,module,exports){
module.exports={constants:require("./constants"),line2:require("./line2"),line3:require("./line3"),mat4:require("./mat4"),plane:require("./plane"),utils:require("./utils"),vec2:require("./vec2"),vec3:require("./vec3"),vec4:require("./vec4")};

},{"./constants":87,"./line2":98,"./line3":115,"./mat4":137,"./plane":155,"./utils":162,"./vec2":183,"./vec3":214,"./vec4":240}],89:[function(require,module,exports){
const create=require("./create"),clone=e=>{const r=create();return r[0]=e[0],r[1]=e[1],r[2]=e[2],r};module.exports=clone;

},{"./create":92}],90:[function(require,module,exports){
const vec2=require("../vec2"),direction=require("./direction"),origin=require("./origin"),closestPoint=(e,i)=>{const r=origin(e),o=direction(e),n=(o[1]-r[1])/(o[0]-r[0]),t=r[1]-n*r[0],c=-1/n,s=(i[1]-c*i[0]-t)/(n-c),u=n*s+t;return vec2.fromValues(s,u)};module.exports=closestPoint;

},{"../vec2":183,"./direction":93,"./origin":100}],91:[function(require,module,exports){
const copy=(o,c)=>(o[0]=c[0],o[1]=c[1],o[2]=c[2],o);module.exports=copy;

},{}],92:[function(require,module,exports){
const create=()=>[0,1,0];module.exports=create;

},{}],93:[function(require,module,exports){
const vec2=require("../vec2"),direction=e=>{const c=vec2.normal(vec2.create(),e);return vec2.negate(c,c),c};module.exports=direction;

},{"../vec2":183}],94:[function(require,module,exports){
const vec2=require("../vec2"),distanceToPoint=(e,t)=>{let o=vec2.dot(t,e);return o=Math.abs(o-e[2])};module.exports=distanceToPoint;

},{"../vec2":183}],95:[function(require,module,exports){
const equals=(e,s)=>e[0]===s[0]&&e[1]===s[1]&&e[2]===s[2];module.exports=equals;

},{}],96:[function(require,module,exports){
const vec2=require("../vec2"),fromPoints=(e,c,o)=>{const r=vec2.subtract(vec2.create(),o,c);vec2.normal(r,r),vec2.normalize(r,r);const t=vec2.dot(c,r);return e[0]=r[0],e[1]=r[1],e[2]=t,e};module.exports=fromPoints;

},{"../vec2":183}],97:[function(require,module,exports){
const create=require("./create"),fromValues=(e,r,t)=>{const o=create();return o[0]=e,o[1]=r,o[2]=t,o};module.exports=fromValues;

},{"./create":92}],98:[function(require,module,exports){
module.exports={clone:require("./clone"),closestPoint:require("./closestPoint"),copy:require("./copy"),create:require("./create"),direction:require("./direction"),distanceToPoint:require("./distanceToPoint"),equals:require("./equals"),fromPoints:require("./fromPoints"),fromValues:require("./fromValues"),intersectPointOfLines:require("./intersectPointOfLines"),origin:require("./origin"),reverse:require("./reverse"),toString:require("./toString"),transform:require("./transform"),xAtY:require("./xAtY")};

},{"./clone":89,"./closestPoint":90,"./copy":91,"./create":92,"./direction":93,"./distanceToPoint":94,"./equals":95,"./fromPoints":96,"./fromValues":97,"./intersectPointOfLines":99,"./origin":100,"./reverse":101,"./toString":102,"./transform":103,"./xAtY":104}],99:[function(require,module,exports){
const vec2=require("../vec2"),{solve2Linear:solve2Linear}=require("../utils"),intersectToLine=(e,r)=>{const n=solve2Linear(e[0],e[1],r[0],r[1],e[2],r[2]);return vec2.clone(n)};module.exports=intersectToLine;

},{"../utils":162,"../vec2":183}],100:[function(require,module,exports){
const vec2=require("../vec2"),origin=e=>vec2.scale(vec2.create(),e,e[2]);module.exports=origin;

},{"../vec2":183}],101:[function(require,module,exports){
const vec2=require("../vec2"),copy=require("./copy"),fromValues=require("./fromValues"),reverse=(e,r)=>{const c=vec2.negate(vec2.create(),r),o=-r[2];return copy(e,fromValues(c[0],c[1],o))};module.exports=reverse;

},{"../vec2":183,"./copy":91,"./fromValues":97}],102:[function(require,module,exports){
const toString=t=>`line2: (${t[0].toFixed(7)}, ${t[1].toFixed(7)}, ${t[2].toFixed(7)})`;module.exports=toString;

},{}],103:[function(require,module,exports){
const vec2=require("../vec2"),fromPoints=require("./fromPoints"),origin=require("./origin"),direction=require("./direction"),transform=(r,o,i)=>{const e=origin(o),n=direction(o);return vec2.transform(e,e,i),vec2.transform(n,n,i),fromPoints(r,e,n)};module.exports=transform;

},{"../vec2":183,"./direction":93,"./fromPoints":96,"./origin":100}],104:[function(require,module,exports){
const origin=require("./origin"),xAtY=(i,r)=>{let e=(i[2]-i[1]*r)/i[0];if(Number.isNaN(e)){e=origin(i)[0]}return e};module.exports=xAtY;

},{"./origin":100}],105:[function(require,module,exports){
const vec3=require("../vec3"),create=require("./create"),clone=e=>{const c=create();return vec3.copy(c[0],e[0]),vec3.copy(c[1],e[1]),c};module.exports=clone;

},{"../vec3":214,"./create":108}],106:[function(require,module,exports){
const vec3=require("../vec3"),closestPoint=(e,c)=>{const t=e[0],o=e[1],s=vec3.dot(vec3.subtract(vec3.create(),c,t),o)/vec3.dot(o,o),v=vec3.scale(vec3.create(),o,s);return vec3.add(v,v,t),v};module.exports=closestPoint;

},{"../vec3":214}],107:[function(require,module,exports){
const vec3=require("../vec3"),copy=(c,e)=>(vec3.copy(c[0],e[0]),vec3.copy(c[1],e[1]),c);module.exports=copy;

},{"../vec3":214}],108:[function(require,module,exports){
const vec3=require("../vec3"),create=()=>[vec3.fromValues(0,0,0),vec3.fromValues(0,0,1)];module.exports=create;

},{"../vec3":214}],109:[function(require,module,exports){
const direction=o=>o[1];module.exports=direction;

},{}],110:[function(require,module,exports){
const vec3=require("../vec3"),closestPoint=require("./closestPoint"),distanceToPoint=(e,t)=>{const c=closestPoint(e,t),o=vec3.subtract(vec3.create(),t,c);return vec3.length(o)};module.exports=distanceToPoint;

},{"../vec3":214,"./closestPoint":106}],111:[function(require,module,exports){
const vec3=require("../vec3"),equals=(e,s)=>!!vec3.equals(e[1],s[1])&&!!vec3.equals(e[0],s[0]);module.exports=equals;

},{"../vec3":214}],112:[function(require,module,exports){
const vec3=require("../vec3"),{solve2Linear:solve2Linear}=require("../utils"),{EPS:EPS}=require("../constants"),fromPointAndDirection=require("./fromPointAndDirection"),fromPlanes=(e,r,o)=>{let n=vec3.cross(vec3.create(),r,o),s=vec3.length(n);if(s<EPS)throw new Error("parallel planes do not intersect");s=1/s,n=vec3.scale(n,n,s);const t=Math.abs(n[0]),a=Math.abs(n[1]),i=Math.abs(n[2]);let l,c;return t>=a&&t>=i?(c=solve2Linear(r[1],r[2],o[1],o[2],r[3],o[3]),l=vec3.fromValues(0,c[0],c[1])):a>=t&&a>=i?(c=solve2Linear(r[0],r[2],o[0],o[2],r[3],o[3]),l=vec3.fromValues(c[0],0,c[1])):(c=solve2Linear(r[0],r[1],o[0],o[1],r[3],o[3]),l=vec3.fromValues(c[0],c[1],0)),fromPointAndDirection(e,l,n)};module.exports=fromPlanes;

},{"../constants":87,"../utils":162,"../vec3":214,"./fromPointAndDirection":113}],113:[function(require,module,exports){
const vec3=require("../vec3"),fromPointAndDirection=(e,c,o)=>{const r=vec3.normalize(vec3.create(),o);return vec3.copy(e[0],c),vec3.copy(e[1],r),e};module.exports=fromPointAndDirection;

},{"../vec3":214}],114:[function(require,module,exports){
const vec3=require("../vec3"),fromPointAndDirection=require("./fromPointAndDirection"),fromPoints=(o,r,e)=>{const t=vec3.subtract(vec3.create(),e,r);return fromPointAndDirection(o,r,t)};module.exports=fromPoints;

},{"../vec3":214,"./fromPointAndDirection":113}],115:[function(require,module,exports){
module.exports={clone:require("./clone"),closestPoint:require("./closestPoint"),copy:require("./copy"),create:require("./create"),direction:require("./direction"),distanceToPoint:require("./distanceToPoint"),equals:require("./equals"),fromPlanes:require("./fromPlanes"),fromPointAndDirection:require("./fromPointAndDirection"),fromPoints:require("./fromPoints"),intersectPointOfLineAndPlane:require("./intersectPointOfLineAndPlane"),origin:require("./origin"),reverse:require("./reverse"),toString:require("./toString"),transform:require("./transform")};

},{"./clone":105,"./closestPoint":106,"./copy":107,"./create":108,"./direction":109,"./distanceToPoint":110,"./equals":111,"./fromPlanes":112,"./fromPointAndDirection":113,"./fromPoints":114,"./intersectPointOfLineAndPlane":116,"./origin":117,"./reverse":118,"./toString":119,"./transform":120}],116:[function(require,module,exports){
const vec3=require("../vec3"),intersectToPlane=(e,c)=>{const t=c,r=c[3],o=e[0],v=e[1],n=(r-vec3.dot(t,o))/vec3.dot(t,v);return vec3.add(vec3.create(),o,vec3.scale(vec3.create(),v,n))};module.exports=intersectToPlane;

},{"../vec3":214}],117:[function(require,module,exports){
const origin=o=>o[0];module.exports=origin;

},{}],118:[function(require,module,exports){
const vec3=require("../vec3"),fromPointAndDirection=require("./fromPointAndDirection"),reverse=(e,r)=>{const n=vec3.clone(r[0]),o=vec3.negate(vec3.create(),r[1]);return fromPointAndDirection(e,n,o)};module.exports=reverse;

},{"../vec3":214,"./fromPointAndDirection":113}],119:[function(require,module,exports){
const toString=t=>{const o=t[0],i=t[1];return`line3: point: (${o[0].toFixed(7)}, ${o[1].toFixed(7)}, ${o[2].toFixed(7)}) direction: (${i[0].toFixed(7)}, ${i[1].toFixed(7)}, ${i[2].toFixed(7)})`};module.exports=toString;

},{}],120:[function(require,module,exports){
const vec3=require("../vec3"),fromPointAndDirection=require("./fromPointAndDirection"),transform=(r,e,t)=>{const o=e[0],c=e[1],n=vec3.add(vec3.create(),o,c),i=vec3.transform(vec3.create(),o,t),a=vec3.transform(n,n,t),m=vec3.subtract(a,a,i);return fromPointAndDirection(r,i,m)};module.exports=transform;

},{"../vec3":214,"./fromPointAndDirection":113}],121:[function(require,module,exports){
const add=(d,o,a)=>(d[0]=o[0]+a[0],d[1]=o[1]+a[1],d[2]=o[2]+a[2],d[3]=o[3]+a[3],d[4]=o[4]+a[4],d[5]=o[5]+a[5],d[6]=o[6]+a[6],d[7]=o[7]+a[7],d[8]=o[8]+a[8],d[9]=o[9]+a[9],d[10]=o[10]+a[10],d[11]=o[11]+a[11],d[12]=o[12]+a[12],d[13]=o[13]+a[13],d[14]=o[14]+a[14],d[15]=o[15]+a[15],d);module.exports=add;

},{}],122:[function(require,module,exports){
const create=require("./create"),clone=e=>{const r=create();return r[0]=e[0],r[1]=e[1],r[2]=e[2],r[3]=e[3],r[4]=e[4],r[5]=e[5],r[6]=e[6],r[7]=e[7],r[8]=e[8],r[9]=e[9],r[10]=e[10],r[11]=e[11],r[12]=e[12],r[13]=e[13],r[14]=e[14],r[15]=e[15],r};module.exports=clone;

},{"./create":125}],123:[function(require,module,exports){
const EPSILON=1e-6;module.exports={EPSILON:1e-6};

},{}],124:[function(require,module,exports){
const copy=(o,c)=>(o[0]=c[0],o[1]=c[1],o[2]=c[2],o[3]=c[3],o[4]=c[4],o[5]=c[5],o[6]=c[6],o[7]=c[7],o[8]=c[8],o[9]=c[9],o[10]=c[10],o[11]=c[11],o[12]=c[12],o[13]=c[13],o[14]=c[14],o[15]=c[15],o);module.exports=copy;

},{}],125:[function(require,module,exports){
const create=()=>[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];module.exports=create;

},{}],126:[function(require,module,exports){
const equals=(e,s)=>e[0]===s[0]&&e[1]===s[1]&&e[2]===s[2]&&e[3]===s[3]&&e[4]===s[4]&&e[5]===s[5]&&e[6]===s[6]&&e[7]===s[7]&&e[8]===s[8]&&e[9]===s[9]&&e[10]===s[10]&&e[11]===s[11]&&e[12]===s[12]&&e[13]===s[13]&&e[14]===s[14]&&e[15]===s[15];module.exports=equals;

},{}],127:[function(require,module,exports){
const identity=require("./identity"),{EPSILON:EPSILON}=require("./constants"),fromRotation=(t,e,i)=>{let[n,o,r]=i,s=Math.sqrt(n*n+o*o+r*r);if(Math.abs(s)<EPSILON)return identity(t);n*=s=1/s,o*=s,r*=s;const a=Math.sin(e),u=Math.cos(e),c=1-u;return t[0]=n*n*c+u,t[1]=o*n*c+r*a,t[2]=r*n*c-o*a,t[3]=0,t[4]=n*o*c-r*a,t[5]=o*o*c+u,t[6]=r*o*c+n*a,t[7]=0,t[8]=n*r*c+o*a,t[9]=o*r*c-n*a,t[10]=r*r*c+u,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t};module.exports=fromRotation;

},{"./constants":123,"./identity":136}],128:[function(require,module,exports){
const fromScaling=(o,c)=>(o[0]=c[0],o[1]=0,o[2]=0,o[3]=0,o[4]=0,o[5]=c[1],o[6]=0,o[7]=0,o[8]=0,o[9]=0,o[10]=c[2],o[11]=0,o[12]=0,o[13]=0,o[14]=0,o[15]=1,o);module.exports=fromScaling;

},{}],129:[function(require,module,exports){
const fromTaitBryanRotation=(t,o,a,n)=>{const s=Math.sin(o),i=Math.cos(o),r=Math.sin(a),h=Math.cos(a),M=Math.sin(n),c=Math.cos(n);return t[0]=h*i,t[1]=h*s,t[2]=-r,t[3]=0,t[4]=M*r*i-c*s,t[5]=c*i+M*r*s,t[6]=M*h,t[7]=0,t[8]=M*s+c*r*i,t[9]=c*r*s-M*i,t[10]=c*h,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t};module.exports=fromTaitBryanRotation;

},{}],130:[function(require,module,exports){
const fromTranslation=(o,n)=>(o[0]=1,o[1]=0,o[2]=0,o[3]=0,o[4]=0,o[5]=1,o[6]=0,o[7]=0,o[8]=0,o[9]=0,o[10]=1,o[11]=0,o[12]=n[0],o[13]=n[1],o[14]=n[2],o[15]=1,o);module.exports=fromTranslation;

},{}],131:[function(require,module,exports){
const create=require("./create"),fromValues=(e,r,t,o,a,c,s,u,l,m,n,f,V,d,i,p)=>{const q=create();return q[0]=e,q[1]=r,q[2]=t,q[3]=o,q[4]=a,q[5]=c,q[6]=s,q[7]=u,q[8]=l,q[9]=m,q[10]=n,q[11]=f,q[12]=V,q[13]=d,q[14]=i,q[15]=p,q};module.exports=fromValues;

},{"./create":125}],132:[function(require,module,exports){
const vec3=require("../vec3"),fromRotation=require("./fromRotation"),fromVectorRotation=(o,e,t)=>{const r=vec3.normalize(vec3.create(),e),c=vec3.normalize(vec3.create(),t),n=vec3.cross(vec3.create(),c,r),a=vec3.dot(c,r);if(-1===a)return fromRotation(o,Math.PI,vec3.orthogonal(n,r));const i=1/(1+a);return o[0]=n[0]*n[0]*i+a,o[1]=n[1]*n[0]*i-n[2],o[2]=n[2]*n[0]*i+n[1],o[3]=0,o[4]=n[0]*n[1]*i+n[2],o[5]=n[1]*n[1]*i+a,o[6]=n[2]*n[1]*i-n[0],o[7]=0,o[8]=n[0]*n[2]*i-n[1],o[9]=n[1]*n[2]*i+n[0],o[10]=n[2]*n[2]*i+a,o[11]=0,o[12]=0,o[13]=0,o[14]=0,o[15]=1,o};module.exports=fromVectorRotation;

},{"../vec3":214,"./fromRotation":127}],133:[function(require,module,exports){
const fromXRotation=(o,t)=>{const n=Math.sin(t),r=Math.cos(t);return o[0]=1,o[1]=0,o[2]=0,o[3]=0,o[4]=0,o[5]=r,o[6]=n,o[7]=0,o[8]=0,o[9]=-n,o[10]=r,o[11]=0,o[12]=0,o[13]=0,o[14]=0,o[15]=1,o};module.exports=fromXRotation;

},{}],134:[function(require,module,exports){
const fromYRotation=(o,t)=>{const n=Math.sin(t),r=Math.cos(t);return o[0]=r,o[1]=0,o[2]=-n,o[3]=0,o[4]=0,o[5]=1,o[6]=0,o[7]=0,o[8]=n,o[9]=0,o[10]=r,o[11]=0,o[12]=0,o[13]=0,o[14]=0,o[15]=1,o};module.exports=fromYRotation;

},{}],135:[function(require,module,exports){
const fromZRotation=(o,t)=>{const n=Math.sin(t),r=Math.cos(t);return o[0]=r,o[1]=n,o[2]=0,o[3]=0,o[4]=-n,o[5]=r,o[6]=0,o[7]=0,o[8]=0,o[9]=0,o[10]=1,o[11]=0,o[12]=0,o[13]=0,o[14]=0,o[15]=1,o};module.exports=fromZRotation;

},{}],136:[function(require,module,exports){
const identity=t=>(t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t);module.exports=identity;

},{}],137:[function(require,module,exports){
module.exports={add:require("./add"),clone:require("./clone"),copy:require("./copy"),create:require("./create"),invert:require("./invert"),equals:require("./equals"),fromRotation:require("./fromRotation"),fromScaling:require("./fromScaling"),fromTaitBryanRotation:require("./fromTaitBryanRotation"),fromTranslation:require("./fromTranslation"),fromValues:require("./fromValues"),fromVectorRotation:require("./fromVectorRotation"),fromXRotation:require("./fromXRotation"),fromYRotation:require("./fromYRotation"),fromZRotation:require("./fromZRotation"),identity:require("./identity"),isIdentity:require("./isIdentity"),isMirroring:require("./isMirroring"),mirrorByPlane:require("./mirrorByPlane"),multiply:require("./multiply"),rotate:require("./rotate"),rotateX:require("./rotateX"),rotateY:require("./rotateY"),rotateZ:require("./rotateZ"),scale:require("./scale"),subtract:require("./subtract"),toString:require("./toString"),translate:require("./translate")};

},{"./add":121,"./clone":122,"./copy":124,"./create":125,"./equals":126,"./fromRotation":127,"./fromScaling":128,"./fromTaitBryanRotation":129,"./fromTranslation":130,"./fromValues":131,"./fromVectorRotation":132,"./fromXRotation":133,"./fromYRotation":134,"./fromZRotation":135,"./identity":136,"./invert":138,"./isIdentity":139,"./isMirroring":140,"./mirrorByPlane":141,"./multiply":142,"./rotate":143,"./rotateX":144,"./rotateY":145,"./rotateZ":146,"./scale":147,"./subtract":148,"./toString":149,"./translate":150}],138:[function(require,module,exports){
const invert=(t,e)=>{const n=e[0],r=e[1],l=e[2],o=e[3],s=e[4],u=e[5],c=e[6],i=e[7],v=e[8],d=e[9],m=e[10],p=e[11],x=e[12],a=e[13],b=e[14],f=e[15],g=n*u-r*s,h=n*c-l*s,j=n*i-o*s,k=r*c-l*u,q=r*i-o*u,w=l*i-o*c,y=v*a-d*x,z=v*b-m*x,A=v*f-p*x,B=d*b-m*a,C=d*f-p*a,D=m*f-p*b;let E=g*D-h*C+j*B+k*A-q*z+w*y;return E?(E=1/E,t[0]=(u*D-c*C+i*B)*E,t[1]=(l*C-r*D-o*B)*E,t[2]=(a*w-b*q+f*k)*E,t[3]=(m*q-d*w-p*k)*E,t[4]=(c*A-s*D-i*z)*E,t[5]=(n*D-l*A+o*z)*E,t[6]=(b*j-x*w-f*h)*E,t[7]=(v*w-m*j+p*h)*E,t[8]=(s*C-u*A+i*y)*E,t[9]=(r*A-n*C-o*y)*E,t[10]=(x*q-a*j+f*g)*E,t[11]=(d*j-v*q-p*g)*E,t[12]=(u*z-s*B-c*y)*E,t[13]=(n*B-r*z+l*y)*E,t[14]=(a*h-x*k-b*g)*E,t[15]=(v*k-d*h+m*g)*E,t):null};module.exports=invert;

},{}],139:[function(require,module,exports){
const isIdentity=t=>1===t[0]&&0===t[1]&&0===t[2]&&0===t[3]&&0===t[4]&&1===t[5]&&0===t[6]&&0===t[7]&&0===t[8]&&0===t[9]&&1===t[10]&&0===t[11]&&0===t[12]&&0===t[13]&&0===t[14]&&1===t[15];module.exports=isIdentity;

},{}],140:[function(require,module,exports){
const cross=require("../vec3/cross"),dot=require("../vec3/dot"),fromValues=require("../vec3/fromValues"),isMirroring=r=>{const e=fromValues(r[0],r[4],r[8]),o=fromValues(r[1],r[5],r[9]),s=fromValues(r[2],r[6],r[10]);return dot(cross(e,e,o),s)<0};module.exports=isMirroring;

},{"../vec3/cross":206,"../vec3/dot":209,"../vec3/fromValues":212}],141:[function(require,module,exports){
const mirrorByPlane=(r,o)=>{const[e,n,t,l]=o;return r[0]=1-2*e*e,r[1]=-2*n*e,r[2]=-2*t*e,r[3]=0,r[4]=-2*e*n,r[5]=1-2*n*n,r[6]=-2*t*n,r[7]=0,r[8]=-2*e*t,r[9]=-2*n*t,r[10]=1-2*t*t,r[11]=0,r[12]=2*e*l,r[13]=2*n*l,r[14]=2*t*l,r[15]=1,r};module.exports=mirrorByPlane;

},{}],142:[function(require,module,exports){
const multiply=(t,l,e)=>{const o=l[0],u=l[1],m=l[2],n=l[3],p=l[4],r=l[5],s=l[6],c=l[7],i=l[8],y=l[9],d=l[10],x=l[11],a=l[12],b=l[13],f=l[14],g=l[15];let h=e[0],j=e[1],k=e[2],q=e[3];return t[0]=h*o+j*p+k*i+q*a,t[1]=h*u+j*r+k*y+q*b,t[2]=h*m+j*s+k*d+q*f,t[3]=h*n+j*c+k*x+q*g,h=e[4],j=e[5],k=e[6],q=e[7],t[4]=h*o+j*p+k*i+q*a,t[5]=h*u+j*r+k*y+q*b,t[6]=h*m+j*s+k*d+q*f,t[7]=h*n+j*c+k*x+q*g,h=e[8],j=e[9],k=e[10],q=e[11],t[8]=h*o+j*p+k*i+q*a,t[9]=h*u+j*r+k*y+q*b,t[10]=h*m+j*s+k*d+q*f,t[11]=h*n+j*c+k*x+q*g,h=e[12],j=e[13],k=e[14],q=e[15],t[12]=h*o+j*p+k*i+q*a,t[13]=h*u+j*r+k*y+q*b,t[14]=h*m+j*s+k*d+q*f,t[15]=h*n+j*c+k*x+q*g,t};module.exports=multiply;

},{}],143:[function(require,module,exports){
const copy=require("./copy"),rotate=(t,e,o,r)=>{let[a,s,c]=r,n=Math.sqrt(a*a+s*s+c*c);if(Math.abs(n)<1e-6)return copy(t,e);a*=n=1/n,s*=n,c*=n;const h=Math.sin(o),p=Math.cos(o),u=1-p,M=e[0],i=e[1],y=e[2],l=e[3],q=e[4],b=e[5],d=e[6],f=e[7],m=e[8],x=e[9],g=e[10],j=e[11],k=a*a*u+p,v=s*a*u+c*h,w=c*a*u-s*h,z=a*s*u-c*h,A=s*s*u+p,B=c*s*u+a*h,C=a*c*u+s*h,D=s*c*u-a*h,E=c*c*u+p;return t[0]=M*k+q*v+m*w,t[1]=i*k+b*v+x*w,t[2]=y*k+d*v+g*w,t[3]=l*k+f*v+j*w,t[4]=M*z+q*A+m*B,t[5]=i*z+b*A+x*B,t[6]=y*z+d*A+g*B,t[7]=l*z+f*A+j*B,t[8]=M*C+q*D+m*E,t[9]=i*C+b*D+x*E,t[10]=y*C+d*D+g*E,t[11]=l*C+f*D+j*E,e!==t&&(t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t};module.exports=rotate;

},{"./copy":124}],144:[function(require,module,exports){
const rotateX=(t,o,e)=>{const r=Math.sin(e),s=Math.cos(e),a=o[4],n=o[5],c=o[6],h=o[7],u=o[8],M=o[9],X=o[10],d=o[11];return o!==t&&(t[0]=o[0],t[1]=o[1],t[2]=o[2],t[3]=o[3],t[12]=o[12],t[13]=o[13],t[14]=o[14],t[15]=o[15]),t[4]=a*s+u*r,t[5]=n*s+M*r,t[6]=c*s+X*r,t[7]=h*s+d*r,t[8]=u*s-a*r,t[9]=M*s-n*r,t[10]=X*s-c*r,t[11]=d*s-h*r,t};module.exports=rotateX;

},{}],145:[function(require,module,exports){
const rotateY=(t,o,e)=>{const r=Math.sin(e),s=Math.cos(e),a=o[0],n=o[1],c=o[2],h=o[3],u=o[8],M=o[9],Y=o[10],d=o[11];return o!==t&&(t[4]=o[4],t[5]=o[5],t[6]=o[6],t[7]=o[7],t[12]=o[12],t[13]=o[13],t[14]=o[14],t[15]=o[15]),t[0]=a*s-u*r,t[1]=n*s-M*r,t[2]=c*s-Y*r,t[3]=h*s-d*r,t[8]=a*r+u*s,t[9]=n*r+M*s,t[10]=c*r+Y*s,t[11]=h*r+d*s,t};module.exports=rotateY;

},{}],146:[function(require,module,exports){
const rotateZ=(t,o,e)=>{const r=Math.sin(e),s=Math.cos(e),a=o[0],n=o[1],c=o[2],h=o[3],u=o[4],M=o[5],Z=o[6],d=o[7];return o!==t&&(t[8]=o[8],t[9]=o[9],t[10]=o[10],t[11]=o[11],t[12]=o[12],t[13]=o[13],t[14]=o[14],t[15]=o[15]),t[0]=a*s+u*r,t[1]=n*s+M*r,t[2]=c*s+Z*r,t[3]=h*s+d*r,t[4]=u*s-a*r,t[5]=M*s-n*r,t[6]=Z*s-c*r,t[7]=d*s-h*r,t};module.exports=rotateZ;

},{}],147:[function(require,module,exports){
const scale=(e,s,c)=>{const o=c[0],t=c[1],l=c[2];return e[0]=s[0]*o,e[1]=s[1]*o,e[2]=s[2]*o,e[3]=s[3]*o,e[4]=s[4]*t,e[5]=s[5]*t,e[6]=s[6]*t,e[7]=s[7]*t,e[8]=s[8]*l,e[9]=s[9]*l,e[10]=s[10]*l,e[11]=s[11]*l,e[12]=s[12],e[13]=s[13],e[14]=s[14],e[15]=s[15],e};module.exports=scale;

},{}],148:[function(require,module,exports){
const subtract=(t,s,c)=>(t[0]=s[0]-c[0],t[1]=s[1]-c[1],t[2]=s[2]-c[2],t[3]=s[3]-c[3],t[4]=s[4]-c[4],t[5]=s[5]-c[5],t[6]=s[6]-c[6],t[7]=s[7]-c[7],t[8]=s[8]-c[8],t[9]=s[9]-c[9],t[10]=s[10]-c[10],t[11]=s[11]-c[11],t[12]=s[12]-c[12],t[13]=s[13]-c[13],t[14]=s[14]-c[14],t[15]=s[15]-c[15],t);module.exports=subtract;

},{}],149:[function(require,module,exports){
const toString=t=>`[${t[0].toFixed(7)}, ${t[1].toFixed(7)}, ${t[2].toFixed(7)}, ${t[3].toFixed(7)}, ${t[4].toFixed(7)}, ${t[5].toFixed(7)}, ${t[6].toFixed(7)}, ${t[7].toFixed(7)}, ${t[8].toFixed(7)}, ${t[9].toFixed(7)}, ${t[10].toFixed(7)}, ${t[11].toFixed(7)}, ${t[12].toFixed(7)}, ${t[13].toFixed(7)}, ${t[14].toFixed(7)}, ${t[15].toFixed(7)}]`;module.exports=toString;

},{}],150:[function(require,module,exports){
const translate=(t,e,n)=>{const r=n[0],s=n[1],a=n[2];let l,o,c,u,d,m,p,x,b,f,g,h;return e===t?(t[12]=e[0]*r+e[4]*s+e[8]*a+e[12],t[13]=e[1]*r+e[5]*s+e[9]*a+e[13],t[14]=e[2]*r+e[6]*s+e[10]*a+e[14],t[15]=e[3]*r+e[7]*s+e[11]*a+e[15]):(l=e[0],o=e[1],c=e[2],u=e[3],d=e[4],m=e[5],p=e[6],x=e[7],b=e[8],f=e[9],g=e[10],h=e[11],t[0]=l,t[1]=o,t[2]=c,t[3]=u,t[4]=d,t[5]=m,t[6]=p,t[7]=x,t[8]=b,t[9]=f,t[10]=g,t[11]=h,t[12]=l*r+d*s+b*a+e[12],t[13]=o*r+m*s+f*a+e[13],t[14]=c*r+p*s+g*a+e[14],t[15]=u*r+x*s+h*a+e[15]),t};module.exports=translate;

},{}],151:[function(require,module,exports){
const flip=(l,o)=>(l[0]=-o[0],l[1]=-o[1],l[2]=-o[2],l[3]=-o[3],l);module.exports=flip;

},{}],152:[function(require,module,exports){
const vec3=require("../vec3"),fromNormalAndPoint=(e,o,r)=>{const c=vec3.normalize(vec3.create(),o),n=vec3.dot(r,c);return e[0]=c[0],e[1]=c[1],e[2]=c[2],e[3]=n,e};module.exports=fromNormalAndPoint;

},{"../vec3":214}],153:[function(require,module,exports){
const vec3=require("../vec3"),fromPoints=(e,c,t,r)=>{const o=vec3.subtract(vec3.create(),t,c),s=vec3.subtract(vec3.create(),r,c);vec3.cross(o,o,s),vec3.normalize(o,o);const v=vec3.dot(o,c);return e[0]=o[0],e[1]=o[1],e[2]=o[2],e[3]=v,e};module.exports=fromPoints;

},{"../vec3":214}],154:[function(require,module,exports){
const{EPS:EPS}=require("../constants"),vec3=require("../vec3"),fromPointsRandom=(e,c,o,t)=>{let r=vec3.subtract(vec3.create(),o,c),v=vec3.subtract(vec3.create(),t,c);vec3.length(r)<EPS&&(r=vec3.orthogonal(r,v)),vec3.length(v)<EPS&&(v=vec3.orthogonal(v,r));let n=vec3.cross(vec3.create(),r,v);vec3.length(n)<EPS&&(v=vec3.orthogonal(v,r),n=vec3.cross(n,r,v)),n=vec3.normalize(n,n);const s=vec3.dot(n,c);return e[0]=n[0],e[1]=n[1],e[2]=n[2],e[3]=s,e};module.exports=fromPointsRandom;

},{"../constants":87,"../vec3":214}],155:[function(require,module,exports){
module.exports={clone:require("../vec4/clone"),copy:require("../vec4/copy"),create:require("../vec4/create"),equals:require("../vec4/equals"),flip:require("./flip"),fromNormalAndPoint:require("./fromNormalAndPoint"),fromValues:require("../vec4/fromValues"),fromPoints:require("./fromPoints"),fromPointsRandom:require("./fromPointsRandom"),projectionOfPoint:require("./projectionOfPoint"),signedDistanceToPoint:require("./signedDistanceToPoint"),toString:require("../vec4/toString"),transform:require("./transform")};

},{"../vec4/clone":233,"../vec4/copy":234,"../vec4/create":235,"../vec4/equals":237,"../vec4/fromValues":239,"../vec4/toString":241,"./flip":151,"./fromNormalAndPoint":152,"./fromPoints":153,"./fromPointsRandom":154,"./projectionOfPoint":156,"./signedDistanceToPoint":157,"./transform":158}],156:[function(require,module,exports){
const vec3=require("../vec3"),projectionOfPoint=(e,o)=>{const r=o[0]*e[0]+o[1]*e[1]+o[2]*e[2]-e[3],t=o[0]-r*e[0],c=o[1]-r*e[1],n=o[2]-r*e[2];return vec3.fromValues(t,c,n)};module.exports=projectionOfPoint;

},{"../vec3":214}],157:[function(require,module,exports){
const vec3=require("../vec3"),signedDistanceToPoint=(e,o)=>vec3.dot(e,o)-e[3];module.exports=signedDistanceToPoint;

},{"../vec3":214}],158:[function(require,module,exports){
const mat4=require("../mat4"),vec3=require("../vec3"),fromPoints=require("./fromPoints"),flip=require("./flip"),transform=(e,r,c)=>{const t=mat4.isMirroring(c),o=vec3.orthogonal(vec3.create(),r),a=vec3.cross(o,r,o),v=vec3.cross(vec3.create(),r,a);let s=vec3.fromScalar(vec3.create(),r[3]);vec3.multiply(s,s,r);let i=vec3.add(vec3.create(),s,a),m=vec3.add(vec3.create(),s,v);return s=vec3.transform(s,s,c),i=vec3.transform(i,i,c),m=vec3.transform(m,m,c),fromPoints(e,s,i,m),t&&flip(e,e),e};module.exports=transform;

},{"../mat4":137,"../vec3":214,"./flip":151,"./fromPoints":153}],159:[function(require,module,exports){
const NEPS=1e-13,aboutEqualNormals=(a,o)=>Math.abs(a[0]-o[0])<=NEPS&&Math.abs(a[1]-o[1])<=NEPS&&Math.abs(a[2]-o[2])<=NEPS;module.exports=aboutEqualNormals;

},{}],160:[function(require,module,exports){
const area=e=>{let t=0;for(let r=0;r<e.length;r++){const l=(r+1)%e.length;t+=e[r][0]*e[l][1],t-=e[l][0]*e[r][1]}return t/2};module.exports=area;

},{}],161:[function(require,module,exports){
const clamp=(a,m,t)=>Math.min(Math.max(a,m),t);module.exports=clamp;

},{}],162:[function(require,module,exports){
module.exports={aboutEqualNormals:require("./aboutEqualNormals"),area:require("./area"),clamp:require("./clamp"),interpolateBetween2DPointsForY:require("./interpolateBetween2DPointsForY"),intersect:require("./intersect"),solve2Linear:require("./solve2Linear")};

},{"./aboutEqualNormals":159,"./area":160,"./clamp":161,"./interpolateBetween2DPointsForY":163,"./intersect":164,"./solve2Linear":165}],163:[function(require,module,exports){
const interpolateBetween2DPointsForY=(e,t,o)=>{let n,r=o-e[1],i=t[1]-e[1];return i<0&&(r=-r,i=-i),n=r<=0?0:r>=i?1:i<1e-10?.5:r/i,e[0]+n*(t[0]-e[0])};module.exports=interpolateBetween2DPointsForY;

},{}],164:[function(require,module,exports){
const intersect=(t,e,r,n)=>{if(t[0]===e[0]&&t[1]===e[1]||r[0]===n[0]&&r[1]===n[1])return;const s=(n[1]-r[1])*(e[0]-t[0])-(n[0]-r[0])*(e[1]-t[1]);if(Math.abs(s)<Number.MIN_VALUE)return;const o=((n[0]-r[0])*(t[1]-r[1])-(n[1]-r[1])*(t[0]-r[0]))/s,c=((e[0]-t[0])*(t[1]-r[1])-(e[1]-t[1])*(t[0]-r[0]))/s;return o<0||o>1||c<0||c>1?void 0:[t[0]+o*(e[0]-t[0]),t[1]+o*(e[1]-t[1])]};module.exports=intersect;

},{}],165:[function(require,module,exports){
const solve2Linear=(e,o,n,r,s,t)=>{const l=1/(e*r-o*n);let a=s*r-o*t,c=-s*n+e*t;return[a*=l,c*=l]};module.exports=solve2Linear;

},{}],166:[function(require,module,exports){
const abs=(a,s)=>(a[0]=Math.abs(s[0]),a[1]=Math.abs(s[1]),a);module.exports=abs;

},{}],167:[function(require,module,exports){
const add=(d,o,a)=>(d[0]=o[0]+a[0],d[1]=o[1]+a[1],d);module.exports=add;

},{}],168:[function(require,module,exports){
module.exports=require("./angleRadians");

},{"./angleRadians":170}],169:[function(require,module,exports){
const angleRadians=require("./angleRadians"),angleDegrees=e=>57.29577951308232*angleRadians(e);module.exports=angleDegrees;

},{"./angleRadians":170}],170:[function(require,module,exports){
const angleRadians=a=>Math.atan2(a[1],a[0]);module.exports=angleRadians;

},{}],171:[function(require,module,exports){
const create=require("./create"),clone=e=>{const r=create();return r[0]=e[0],r[1]=e[1],r};module.exports=clone;

},{"./create":173}],172:[function(require,module,exports){
const copy=(o,c)=>(o[0]=c[0],o[1]=c[1],o);module.exports=copy;

},{}],173:[function(require,module,exports){
const create=()=>[0,0];module.exports=create;

},{}],174:[function(require,module,exports){
const cross=(s,o,c)=>(s[0]=0,s[1]=0,s[2]=o[0]*c[1]-o[1]*c[0],s);module.exports=cross;

},{}],175:[function(require,module,exports){
const distance=(t,e)=>{const n=e[0]-t[0],o=e[1]-t[1];return Math.hypot(n,o)};module.exports=distance;

},{}],176:[function(require,module,exports){
const divide=(d,e,i)=>(d[0]=e[0]/i[0],d[1]=e[1]/i[1],d);module.exports=divide;

},{}],177:[function(require,module,exports){
const dot=(o,t)=>o[0]*t[0]+o[1]*t[1];module.exports=dot;

},{}],178:[function(require,module,exports){
const equals=(e,s)=>e[0]===s[0]&&e[1]===s[1];module.exports=equals;

},{}],179:[function(require,module,exports){
const fromAngleRadians=require("./fromAngleRadians"),fromAngleDegrees=(e,r)=>fromAngleRadians(e,Math.PI*r/180);module.exports=fromAngleDegrees;

},{"./fromAngleRadians":180}],180:[function(require,module,exports){
const fromAngleRadians=(a,n)=>(a[0]=Math.cos(n),a[1]=Math.sin(n),a);module.exports=fromAngleRadians;

},{}],181:[function(require,module,exports){
const fromScalar=(o,r)=>(o[0]=r,o[1]=r,o);module.exports=fromScalar;

},{}],182:[function(require,module,exports){
const create=require("./create"),fromValues=(e,r)=>{const t=create();return t[0]=e,t[1]=r,t};module.exports=fromValues;

},{"./create":173}],183:[function(require,module,exports){
module.exports={abs:require("./abs"),add:require("./add"),angle:require("./angle"),angleDegrees:require("./angleDegrees"),angleRadians:require("./angleRadians"),clone:require("./clone"),copy:require("./copy"),create:require("./create"),cross:require("./cross"),distance:require("./distance"),divide:require("./divide"),dot:require("./dot"),equals:require("./equals"),fromAngleDegrees:require("./fromAngleDegrees"),fromAngleRadians:require("./fromAngleRadians"),fromScalar:require("./fromScalar"),fromValues:require("./fromValues"),length:require("./length"),lerp:require("./lerp"),max:require("./max"),min:require("./min"),multiply:require("./multiply"),negate:require("./negate"),normal:require("./normal"),normalize:require("./normalize"),rotate:require("./rotate"),scale:require("./scale"),snap:require("./snap"),squaredDistance:require("./squaredDistance"),squaredLength:require("./squaredLength"),subtract:require("./subtract"),toString:require("./toString"),transform:require("./transform")};

},{"./abs":166,"./add":167,"./angle":168,"./angleDegrees":169,"./angleRadians":170,"./clone":171,"./copy":172,"./create":173,"./cross":174,"./distance":175,"./divide":176,"./dot":177,"./equals":178,"./fromAngleDegrees":179,"./fromAngleRadians":180,"./fromScalar":181,"./fromValues":182,"./length":184,"./lerp":185,"./max":186,"./min":187,"./multiply":188,"./negate":189,"./normal":190,"./normalize":191,"./rotate":192,"./scale":193,"./snap":194,"./squaredDistance":195,"./squaredLength":196,"./subtract":197,"./toString":198,"./transform":199}],184:[function(require,module,exports){
const length=t=>Math.hypot(t[0],t[1]);module.exports=length;

},{}],185:[function(require,module,exports){
const lerp=(e,r,o,t)=>{const l=r[0],n=r[1];return e[0]=l+t*(o[0]-l),e[1]=n+t*(o[1]-n),e};module.exports=lerp;

},{}],186:[function(require,module,exports){
const max=(a,m,x)=>(a[0]=Math.max(m[0],x[0]),a[1]=Math.max(m[1],x[1]),a);module.exports=max;

},{}],187:[function(require,module,exports){
const min=(m,n,i)=>(m[0]=Math.min(n[0],i[0]),m[1]=Math.min(n[1],i[1]),m);module.exports=min;

},{}],188:[function(require,module,exports){
const multiply=(l,t,m)=>(l[0]=t[0]*m[0],l[1]=t[1]*m[1],l);module.exports=multiply;

},{}],189:[function(require,module,exports){
const negate=(e,t)=>(e[0]=-t[0],e[1]=-t[1],e);module.exports=negate;

},{}],190:[function(require,module,exports){
const create=require("./create"),rotate=require("./rotate"),normal=(e,r)=>rotate(e,r,create(),Math.PI/2);module.exports=normal;

},{"./create":173,"./rotate":192}],191:[function(require,module,exports){
const normalize=(t,e)=>{const o=e[0],r=e[1];let n=o*o+r*r;return n>0&&(n=1/Math.sqrt(n)),t[0]=o*n,t[1]=r*n,t};module.exports=normalize;

},{}],192:[function(require,module,exports){
const rotate=(t,o,e,r)=>{const s=o[0]-e[0],a=o[1]-e[0],n=Math.cos(r),c=Math.sin(r);return t[0]=s*n-a*c+e[0],t[1]=s*c+a*n+e[1],t};module.exports=rotate;

},{}],193:[function(require,module,exports){
const scale=(e,s,c)=>(e[0]=s[0]*c,e[1]=s[1]*c,e);module.exports=scale;

},{}],194:[function(require,module,exports){
const snap=(n,o,a)=>(n[0]=Math.round(o[0]/a)*a+0,n[1]=Math.round(o[1]/a)*a+0,n);module.exports=snap;

},{}],195:[function(require,module,exports){
const squaredDistance=(e,s)=>{const t=s[0]-e[0],n=s[1]-e[1];return t*t+n*n};module.exports=squaredDistance;

},{}],196:[function(require,module,exports){
const squaredLength=e=>{const t=e[0],n=e[1];return t*t+n*n};module.exports=squaredLength;

},{}],197:[function(require,module,exports){
const subtract=(t,s,c)=>(t[0]=s[0]-c[0],t[1]=s[1]-c[1],t);module.exports=subtract;

},{}],198:[function(require,module,exports){
const toString=t=>`[${t[0].toFixed(7)}, ${t[1].toFixed(7)}]`;module.exports=toString;

},{}],199:[function(require,module,exports){
const transform=(r,o,t)=>{const n=o[0],s=o[1];return r[0]=t[0]*n+t[4]*s+t[12],r[1]=t[1]*n+t[5]*s+t[13],r};module.exports=transform;

},{}],200:[function(require,module,exports){
const abs=(a,s)=>(a[0]=Math.abs(s[0]),a[1]=Math.abs(s[1]),a[2]=Math.abs(s[2]),a);module.exports=abs;

},{}],201:[function(require,module,exports){
const add=(d,o,a)=>(d[0]=o[0]+a[0],d[1]=o[1]+a[1],d[2]=o[2]+a[2],d);module.exports=add;

},{}],202:[function(require,module,exports){
const dot=require("./dot"),angle=(t,a)=>{const o=t[0],e=t[1],r=t[2],n=a[0],s=a[1],h=a[2],M=Math.sqrt(o*o+e*e+r*r)*Math.sqrt(n*n+s*s+h*h),d=M&&dot(t,a)/M;return Math.acos(Math.min(Math.max(d,-1),1))};module.exports=angle;

},{"./dot":209}],203:[function(require,module,exports){
const create=require("./create"),clone=e=>{const r=create();return r[0]=e[0],r[1]=e[1],r[2]=e[2],r};module.exports=clone;

},{"./create":205}],204:[function(require,module,exports){
const copy=(o,c)=>(o[0]=c[0],o[1]=c[1],o[2]=c[2],o);module.exports=copy;

},{}],205:[function(require,module,exports){
const create=()=>[0,0,0];module.exports=create;

},{}],206:[function(require,module,exports){
const cross=(s,o,r)=>{const c=o[0],t=o[1],e=o[2],n=r[0],u=r[1],d=r[2];return s[0]=t*d-e*u,s[1]=e*n-c*d,s[2]=c*u-t*n,s};module.exports=cross;

},{}],207:[function(require,module,exports){
const distance=(t,e)=>{const n=e[0]-t[0],o=e[1]-t[1],s=e[2]-t[2];return Math.hypot(n,o,s)};module.exports=distance;

},{}],208:[function(require,module,exports){
const divide=(d,e,i)=>(d[0]=e[0]/i[0],d[1]=e[1]/i[1],d[2]=e[2]/i[2],d);module.exports=divide;

},{}],209:[function(require,module,exports){
const dot=(o,t)=>o[0]*t[0]+o[1]*t[1]+o[2]*t[2];module.exports=dot;

},{}],210:[function(require,module,exports){
const equals=(e,s)=>e[0]===s[0]&&e[1]===s[1]&&e[2]===s[2];module.exports=equals;

},{}],211:[function(require,module,exports){
const fromScalar=(o,r)=>(o[0]=r,o[1]=r,o[2]=r,o);module.exports=fromScalar;

},{}],212:[function(require,module,exports){
const create=require("./create"),fromValues=(e,r,t)=>{const o=create();return o[0]=e,o[1]=r,o[2]=t,o};module.exports=fromValues;

},{"./create":205}],213:[function(require,module,exports){
const fromVector2=(o,r,e=0)=>(o[0]=r[0],o[1]=r[1],o[2]=e,o);module.exports=fromVector2;

},{}],214:[function(require,module,exports){
module.exports={abs:require("./abs"),add:require("./add"),angle:require("./angle"),clone:require("./clone"),copy:require("./copy"),create:require("./create"),cross:require("./cross"),distance:require("./distance"),divide:require("./divide"),dot:require("./dot"),equals:require("./equals"),fromScalar:require("./fromScalar"),fromValues:require("./fromValues"),fromVec2:require("./fromVec2"),length:require("./length"),lerp:require("./lerp"),max:require("./max"),min:require("./min"),multiply:require("./multiply"),negate:require("./negate"),normalize:require("./normalize"),orthogonal:require("./orthogonal"),rotateX:require("./rotateX"),rotateY:require("./rotateY"),rotateZ:require("./rotateZ"),scale:require("./scale"),snap:require("./snap"),squaredDistance:require("./squaredDistance"),squaredLength:require("./squaredLength"),subtract:require("./subtract"),toString:require("./toString"),transform:require("./transform")};

},{"./abs":200,"./add":201,"./angle":202,"./clone":203,"./copy":204,"./create":205,"./cross":206,"./distance":207,"./divide":208,"./dot":209,"./equals":210,"./fromScalar":211,"./fromValues":212,"./fromVec2":213,"./length":215,"./lerp":216,"./max":217,"./min":218,"./multiply":219,"./negate":220,"./normalize":221,"./orthogonal":222,"./rotateX":223,"./rotateY":224,"./rotateZ":225,"./scale":226,"./snap":227,"./squaredDistance":228,"./squaredLength":229,"./subtract":230,"./toString":231,"./transform":232}],215:[function(require,module,exports){
const length=t=>{const e=t[0],n=t[1],o=t[2];return Math.hypot(e,n,o)};module.exports=length;

},{}],216:[function(require,module,exports){
const lerp=(e,l,o,p)=>(e[0]=l[0]+p*(o[0]-l[0]),e[1]=l[1]+p*(o[1]-l[1]),e[2]=l[2]+p*(o[2]-l[2]),e);module.exports=lerp;

},{}],217:[function(require,module,exports){
const max=(a,m,x)=>(a[0]=Math.max(m[0],x[0]),a[1]=Math.max(m[1],x[1]),a[2]=Math.max(m[2],x[2]),a);module.exports=max;

},{}],218:[function(require,module,exports){
const min=(m,n,i)=>(m[0]=Math.min(n[0],i[0]),m[1]=Math.min(n[1],i[1]),m[2]=Math.min(n[2],i[2]),m);module.exports=min;

},{}],219:[function(require,module,exports){
const multiply=(l,t,m)=>(l[0]=t[0]*m[0],l[1]=t[1]*m[1],l[2]=t[2]*m[2],l);module.exports=multiply;

},{}],220:[function(require,module,exports){
const negate=(e,t)=>(e[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e);module.exports=negate;

},{}],221:[function(require,module,exports){
const normalize=(t,e)=>{const o=e[0],r=e[1],n=e[2];let l=o*o+r*r+n*n;return l>0&&(l=1/Math.sqrt(l)),t[0]=o*l,t[1]=r*l,t[2]=n*l,t};module.exports=normalize;

},{}],222:[function(require,module,exports){
const abs=require("./abs"),create=require("./create"),cross=require("./cross"),orthogonal=(r,e)=>{const o=abs(create(),e),s=0+(o[0]<o[1]&&o[0]<o[2]),t=0+(o[1]<=o[0]&&o[1]<o[2]),a=0+(o[2]<=o[0]&&o[2]<=o[1]);return cross(r,e,[s,t,a])};module.exports=orthogonal;

},{"./abs":200,"./create":205,"./cross":206}],223:[function(require,module,exports){
const rotateX=(t,o,s,a)=>{const e=[],n=[];return e[0]=o[0]-s[0],e[1]=o[1]-s[1],e[2]=o[2]-s[2],n[0]=e[0],n[1]=e[1]*Math.cos(a)-e[2]*Math.sin(a),n[2]=e[1]*Math.sin(a)+e[2]*Math.cos(a),t[0]=n[0]+s[0],t[1]=n[1]+s[1],t[2]=n[2]+s[2],t};module.exports=rotateX;

},{}],224:[function(require,module,exports){
const rotateY=(t,o,s,a)=>{const e=[],n=[];return e[0]=o[0]-s[0],e[1]=o[1]-s[1],e[2]=o[2]-s[2],n[0]=e[2]*Math.sin(a)+e[0]*Math.cos(a),n[1]=e[1],n[2]=e[2]*Math.cos(a)-e[0]*Math.sin(a),t[0]=n[0]+s[0],t[1]=n[1]+s[1],t[2]=n[2]+s[2],t};module.exports=rotateY;

},{}],225:[function(require,module,exports){
const rotateZ=(t,o,s,a)=>{const e=[],n=[];return e[0]=o[0]-s[0],e[1]=o[1]-s[1],n[0]=e[0]*Math.cos(a)-e[1]*Math.sin(a),n[1]=e[0]*Math.sin(a)+e[1]*Math.cos(a),t[0]=n[0]+s[0],t[1]=n[1]+s[1],t[2]=o[2],t};module.exports=rotateZ;

},{}],226:[function(require,module,exports){
const scale=(e,s,c)=>(e[0]=s[0]*c,e[1]=s[1]*c,e[2]=s[2]*c,e);module.exports=scale;

},{}],227:[function(require,module,exports){
const snap=(n,o,a)=>(n[0]=Math.round(o[0]/a)*a+0,n[1]=Math.round(o[1]/a)*a+0,n[2]=Math.round(o[2]/a)*a+0,n);module.exports=snap;

},{}],228:[function(require,module,exports){
const squaredDistance=(e,s)=>{const t=s[0]-e[0],n=s[1]-e[1],r=s[2]-e[2];return t*t+n*n+r*r};module.exports=squaredDistance;

},{}],229:[function(require,module,exports){
const squaredLength=e=>{const t=e[0],n=e[1],r=e[2];return t*t+n*n+r*r};module.exports=squaredLength;

},{}],230:[function(require,module,exports){
const subtract=(t,s,c)=>(t[0]=s[0]-c[0],t[1]=s[1]-c[1],t[2]=s[2]-c[2],t);module.exports=subtract;

},{}],231:[function(require,module,exports){
const toString=t=>`[${t[0].toFixed(7)}, ${t[1].toFixed(7)}, ${t[2].toFixed(7)}]`;module.exports=toString;

},{}],232:[function(require,module,exports){
const transform=(r,t,o)=>{const n=t[0],s=t[1],e=t[2];let m=o[3]*n+o[7]*s+o[11]*e+o[15];return m=m||1,r[0]=(o[0]*n+o[4]*s+o[8]*e+o[12])/m,r[1]=(o[1]*n+o[5]*s+o[9]*e+o[13])/m,r[2]=(o[2]*n+o[6]*s+o[10]*e+o[14])/m,r};module.exports=transform;

},{}],233:[function(require,module,exports){
const create=require("./create"),clone=e=>{const r=create();return r[0]=e[0],r[1]=e[1],r[2]=e[2],r[3]=e[3],r};module.exports=clone;

},{"./create":235}],234:[function(require,module,exports){
const copy=(o,c)=>(o[0]=c[0],o[1]=c[1],o[2]=c[2],o[3]=c[3],o);module.exports=copy;

},{}],235:[function(require,module,exports){
const create=()=>[0,0,0,0];module.exports=create;

},{}],236:[function(require,module,exports){
const dot=(o,t)=>o[0]*t[0]+o[1]*t[1]+o[2]*t[2]+o[3]*t[3];module.exports=dot;

},{}],237:[function(require,module,exports){
const equals=(e,s)=>e[0]===s[0]&&e[1]===s[1]&&e[2]===s[2]&&e[3]===s[3];module.exports=equals;

},{}],238:[function(require,module,exports){
const fromScalar=(o,r)=>(o[0]=r,o[1]=r,o[2]=r,o[3]=r,o);module.exports=fromScalar;

},{}],239:[function(require,module,exports){
const create=require("./create"),fromValues=(e,r,t,o)=>{const a=create();return a[0]=e,a[1]=r,a[2]=t,a[3]=o,a};module.exports=fromValues;

},{"./create":235}],240:[function(require,module,exports){
module.exports={clone:require("./clone"),copy:require("./copy"),create:require("./create"),dot:require("./dot"),equals:require("./equals"),fromScalar:require("./fromScalar"),fromValues:require("./fromValues"),toString:require("./toString"),transform:require("./transform")};

},{"./clone":233,"./copy":234,"./create":235,"./dot":236,"./equals":237,"./fromScalar":238,"./fromValues":239,"./toString":241,"./transform":242}],241:[function(require,module,exports){
const toString=t=>`(${t[0].toFixed(9)}, ${t[1].toFixed(9)}, ${t[2].toFixed(9)}, ${t[3].toFixed(9)})`;module.exports=toString;

},{}],242:[function(require,module,exports){
const transform=(r,o,t)=>{const[n,s,e,m]=o;return r[0]=t[0]*n+t[4]*s+t[8]*e+t[12]*m,r[1]=t[1]*n+t[5]*s+t[9]*e+t[13]*m,r[2]=t[2]*n+t[6]*s+t[10]*e+t[14]*m,r[3]=t[3]*n+t[7]*s+t[11]*e+t[15]*m,r};module.exports=transform;

},{}],243:[function(require,module,exports){
const{EPS:EPS}=require("../maths/constants"),calculateEpsilonFromBounds=(o,t)=>{let e=0;for(let l=0;l<t;l++)e+=o[1][l]-o[0][l];return EPS*e/t};module.exports=calculateEpsilonFromBounds;

},{"../maths/constants":87}],244:[function(require,module,exports){
module.exports={measureAggregateArea:require("./measureAggregateArea"),measureAggregateBoundingBox:require("./measureAggregateBoundingBox"),measureAggregateEpsilon:require("./measureAggregateEpsilon"),measureAggregateVolume:require("./measureAggregateVolume"),measureArea:require("./measureArea"),measureBoundingBox:require("./measureBoundingBox"),measureEpsilon:require("./measureEpsilon"),measureVolume:require("./measureVolume")};

},{"./measureAggregateArea":245,"./measureAggregateBoundingBox":246,"./measureAggregateEpsilon":247,"./measureAggregateVolume":248,"./measureArea":249,"./measureBoundingBox":250,"./measureEpsilon":251,"./measureVolume":252}],245:[function(require,module,exports){
const flatten=require("../utils/flatten"),measureArea=require("./measureArea"),measureAggregateArea=(...e)=>{if(0===(e=flatten(e)).length)throw new Error("measureAggregateArea: no geometries supplied");const r=measureArea(e);if(1===e.length)return r;return r.reduce((e,r)=>e+r,0)};module.exports=measureAggregateArea;

},{"../utils/flatten":374,"./measureArea":249}],246:[function(require,module,exports){
const flatten=require("../utils/flatten"),vec3min=require("../maths/vec3/min"),vec3max=require("../maths/vec3/max"),measureBoundingBox=require("./measureBoundingBox"),measureAggregateBoundingBox=(...e)=>{if(0===(e=flatten(e)).length)throw new Error("measureAggregateBoundingBox: no geometries supplied");const r=measureBoundingBox(e);if(1===e.length)return r;const u=[[Number.MAX_VALUE,Number.MAX_VALUE,Number.MAX_VALUE],[-Number.MAX_VALUE,-Number.MAX_VALUE,-Number.MAX_VALUE]];return r.reduce((e,r)=>e=[vec3min(e[0],e[0],r[0]),vec3max(e[1],e[1],r[1])],u)};module.exports=measureAggregateBoundingBox;

},{"../maths/vec3/max":217,"../maths/vec3/min":218,"../utils/flatten":374,"./measureBoundingBox":250}],247:[function(require,module,exports){
const flatten=require("../utils/flatten"),measureAggregateBoundingBox=require("./measureAggregateBoundingBox"),calculateEpsilonFromBounds=require("./calculateEpsilonFromBounds"),{geom2:geom2,geom3:geom3,path2:path2}=require("../geometries"),measureAggregateEpsilon=(...e)=>{if(0===(e=flatten(e)).length)throw new Error("measureAggregateEpsilon: no geometries supplied");const o=measureAggregateBoundingBox(e);let r=0;return r=e.reduce((e,o)=>path2.isA(o)||geom2.isA(o)?Math.max(e,2):geom3.isA(o)?Math.max(e,3):0,r),calculateEpsilonFromBounds(o,r)};module.exports=measureAggregateEpsilon;

},{"../geometries":44,"../utils/flatten":374,"./calculateEpsilonFromBounds":243,"./measureAggregateBoundingBox":246}],248:[function(require,module,exports){
const flatten=require("../utils/flatten"),measureVolume=require("./measureVolume"),measureAggregateVolume=(...e)=>{if(0===(e=flatten(e)).length)throw new Error("measureAggregateVolume: no geometries supplied");const r=measureVolume(e);if(1===e.length)return r;return r.reduce((e,r)=>e+r,0)};module.exports=measureAggregateVolume;

},{"../utils/flatten":374,"./measureVolume":252}],249:[function(require,module,exports){
const flatten=require("../utils/flatten"),geom2=require("../geometries/geom2"),geom3=require("../geometries/geom3"),path2=require("../geometries/path2"),poly3=require("../geometries/poly3"),cache=new WeakMap,measureAreaOfPath2=()=>0,measureAreaOfGeom2=e=>{let r=cache.get(e);if(r)return r;return r=geom2.toSides(e).reduce((e,r)=>e+(r[0][0]*r[1][1]-r[0][1]*r[1][0]),0),r*=.5,cache.set(e,r),r},measureAreaOfGeom3=e=>{let r=cache.get(e);if(r)return r;return r=geom3.toPolygons(e).reduce((e,r)=>e+poly3.measureArea(r),0),cache.set(e,r),r},measureArea=(...e)=>{if(0===(e=flatten(e)).length)throw new Error("wrong number of arguments");const r=e.map(e=>path2.isA(e)?0:geom2.isA(e)?measureAreaOfGeom2(e):geom3.isA(e)?measureAreaOfGeom3(e):0);return 1===r.length?r[0]:r};module.exports=measureArea;

},{"../geometries/geom2":22,"../geometries/geom3":36,"../geometries/path2":57,"../geometries/poly3":73,"../utils/flatten":374}],250:[function(require,module,exports){
const flatten=require("../utils/flatten"),vec2=require("../maths/vec2"),vec3=require("../maths/vec3"),geom2=require("../geometries/geom2"),geom3=require("../geometries/geom3"),path2=require("../geometries/path2"),poly3=require("../geometries/poly3"),cache=new WeakMap,measureBoundingBoxOfPath2=e=>{let o=cache.get(e);if(o)return o;const t=path2.toPoints(e);let n;n=0===t.length?vec2.create():vec2.clone(t[0]);let r=vec2.clone(n);return t.forEach(e=>{vec2.min(n,n,e),vec2.max(r,r,e)}),n=[n[0],n[1],0],r=[r[0],r[1],0],o=[n,r],cache.set(e,o),o},measureBoundingBoxOfGeom2=e=>{let o=cache.get(e);if(o)return o;const t=geom2.toPoints(e);let n;n=0===t.length?vec2.create():vec2.clone(t[0]);let r=vec2.clone(n);return t.forEach(e=>{vec2.min(n,n,e),vec2.max(r,r,e)}),n=[n[0],n[1],0],r=[r[0],r[1],0],o=[n,r],cache.set(e,o),o},measureBoundingBoxOfGeom3=e=>{let o=cache.get(e);if(o)return o;const t=geom3.toPolygons(e);let n=vec3.create();if(t.length>0){const e=poly3.toPoints(t[0]);vec3.copy(n,e[0])}let r=vec3.clone(n);return t.forEach(e=>{poly3.toPoints(e).forEach(e=>{vec3.min(n,n,e),vec3.max(r,r,e)})}),n=[n[0],n[1],n[2]],r=[r[0],r[1],r[2]],o=[n,r],cache.set(e,o),o},measureBoundingBox=(...e)=>{if(0===(e=flatten(e)).length)throw new Error("wrong number of arguments");const o=e.map(e=>path2.isA(e)?measureBoundingBoxOfPath2(e):geom2.isA(e)?measureBoundingBoxOfGeom2(e):geom3.isA(e)?measureBoundingBoxOfGeom3(e):[[0,0,0],[0,0,0]]);return 1===o.length?o[0]:o};module.exports=measureBoundingBox;

},{"../geometries/geom2":22,"../geometries/geom3":36,"../geometries/path2":57,"../geometries/poly3":73,"../maths/vec2":183,"../maths/vec3":214,"../utils/flatten":374}],251:[function(require,module,exports){
const flatten=require("../utils/flatten"),{geom2:geom2,geom3:geom3,path2:path2}=require("../geometries"),calculateEpsilonFromBounds=require("./calculateEpsilonFromBounds"),measureBoundingBox=require("./measureBoundingBox"),measureEpsilonOfPath2=e=>calculateEpsilonFromBounds(measureBoundingBox(e),2),measureEpsilonOfGeom2=e=>calculateEpsilonFromBounds(measureBoundingBox(e),2),measureEpsilonOfGeom3=e=>calculateEpsilonFromBounds(measureBoundingBox(e),3),measureEpsilon=(...e)=>{if(0===(e=flatten(e)).length)throw new Error("wrong number of arguments");const o=e.map(e=>path2.isA(e)?measureEpsilonOfPath2(e):geom2.isA(e)?measureEpsilonOfGeom2(e):geom3.isA(e)?measureEpsilonOfGeom3(e):0);return 1===o.length?o[0]:o};module.exports=measureEpsilon;

},{"../geometries":44,"../utils/flatten":374,"./calculateEpsilonFromBounds":243,"./measureBoundingBox":250}],252:[function(require,module,exports){
const flatten=require("../utils/flatten"),geom2=require("../geometries/geom2"),geom3=require("../geometries/geom3"),path2=require("../geometries/path2"),poly3=require("../geometries/poly3"),cache=new WeakMap,measureVolumeOfPath2=()=>0,measureVolumeOfGeom2=()=>0,measureVolumeOfGeom3=e=>{let r=cache.get(e);if(r)return r;return r=geom3.toPolygons(e).reduce((e,r)=>e+poly3.measureSignedVolume(r),0),cache.set(e,r),r},measureVolume=(...e)=>{if(0===(e=flatten(e)).length)throw new Error("wrong number of arguments");const r=e.map(e=>path2.isA(e)?0:geom2.isA(e)?0:geom3.isA(e)?measureVolumeOfGeom3(e):0);return 1===r.length?r[0]:r};module.exports=measureVolume;

},{"../geometries/geom2":22,"../geometries/geom3":36,"../geometries/path2":57,"../geometries/poly3":73,"../utils/flatten":374}],253:[function(require,module,exports){
const vec2=require("../../maths/vec2"),geom2=require("../../geometries/geom2"),fromFakePolygon=(e,o)=>{if(o.vertices.length<4)return null;const r=[],n=o.vertices.filter((e,o)=>e[2]>0&&(r.push(o),!0));if(2!==n.length)throw new Error("Assertion failed: fromFakePolygon: not enough points found");const t=n.map(o=>{const r=Math.round(o[0]/e)*e+0,n=Math.round(o[1]/e)*e+0;return vec2.fromValues(r,n)});if(vec2.equals(t[0],t[1]))return null;const s=r[1]-r[0];if(1!==s&&3!==s)throw new Error("Assertion failed: fromFakePolygon: unknown index ordering");return 1===s&&t.reverse(),t},fromFakePolygons=(e,o)=>{const r=o.map(o=>fromFakePolygon(e,o)).filter(e=>null!==e);return geom2.create(r)};module.exports=fromFakePolygons;

},{"../../geometries/geom2":22,"../../maths/vec2":183}],254:[function(require,module,exports){
module.exports={intersect:require("./intersect"),scission:require("./scission"),subtract:require("./subtract"),union:require("./union")};

},{"./intersect":255,"./scission":262,"./subtract":264,"./union":275}],255:[function(require,module,exports){
const flatten=require("../../utils/flatten"),areAllShapesTheSameType=require("../../utils/areAllShapesTheSameType"),geom2=require("../../geometries/geom2"),geom3=require("../../geometries/geom3"),intersectGeom2=require("./intersectGeom2"),intersectGeom3=require("./intersectGeom3"),intersect=(...e)=>{if(0===(e=flatten(e)).length)throw new Error("wrong number of arguments");if(!areAllShapesTheSameType(e))throw new Error("only intersect of the types are supported");const r=e[0];return geom2.isA(r)?intersectGeom2(e):geom3.isA(r)?intersectGeom3(e):r};module.exports=intersect;

},{"../../geometries/geom2":22,"../../geometries/geom3":36,"../../utils/areAllShapesTheSameType":372,"../../utils/flatten":374,"./intersectGeom2":256,"./intersectGeom3":257}],256:[function(require,module,exports){
const flatten=require("../../utils/flatten"),geom3=require("../../geometries/geom3"),measureEpsilon=require("../../measurements/measureEpsilon"),fromFakePolygons=require("./fromFakePolygons"),to3DWalls=require("./to3DWalls"),intersectGeom3=require("./intersectGeom3"),intersect=(...e)=>{const o=(e=flatten(e)).map(e=>to3DWalls({z0:-1,z1:1},e)),r=intersectGeom3(o),t=measureEpsilon(r);return fromFakePolygons(t,geom3.toPolygons(r))};module.exports=intersect;

},{"../../geometries/geom3":36,"../../measurements/measureEpsilon":251,"../../utils/flatten":374,"./fromFakePolygons":253,"./intersectGeom3":257,"./to3DWalls":268}],257:[function(require,module,exports){
const flatten=require("../../utils/flatten"),retessellate=require("./retessellate"),intersectSub=require("./intersectGeom3Sub"),intersect=(...e)=>{let t=(e=flatten(e)).shift();return e.forEach(e=>{t=intersectSub(t,e)}),t=retessellate(t)};module.exports=intersect;

},{"../../utils/flatten":374,"./intersectGeom3Sub":258,"./retessellate":261}],258:[function(require,module,exports){
const geom3=require("../../geometries/geom3"),mayOverlap=require("./mayOverlap"),{Tree:Tree}=require("./trees"),intersectGeom3Sub=(e,o)=>{if(!mayOverlap(e,o))return geom3.create();const r=new Tree(geom3.toPolygons(e)),t=new Tree(geom3.toPolygons(o));r.invert(),t.clipTo(r),t.invert(),r.clipTo(t),t.clipTo(r),r.addPolygons(t.allPolygons()),r.invert();const n=r.allPolygons();return geom3.create(n)};module.exports=intersectGeom3Sub;

},{"../../geometries/geom3":36,"./mayOverlap":259,"./trees":272}],259:[function(require,module,exports){
const{EPS:EPS}=require("../../maths/constants"),measureBoundingBox=require("../../measurements/measureBoundingBox"),mayOverlap=(e,n)=>{if(0===e.polygons.length||0===n.polygons.length)return!1;const o=measureBoundingBox(e),r=o[0],s=o[1],u=measureBoundingBox(n),a=u[0],t=u[1];return!(a[0]-s[0]>EPS)&&(!(r[0]-t[0]>EPS)&&(!(a[1]-s[1]>EPS)&&(!(r[1]-t[1]>EPS)&&(!(a[2]-s[2]>EPS)&&!(r[2]-t[2]>EPS)))))};module.exports=mayOverlap;

},{"../../maths/constants":87,"../../measurements/measureBoundingBox":250}],260:[function(require,module,exports){
const{EPS:EPS}=require("../../maths/constants"),line2=require("../../maths/line2"),vec2=require("../../maths/vec2"),OrthoNormalBasis=require("../../maths/OrthoNormalBasis"),interpolateBetween2DPointsForY=require("../../maths/utils/interpolateBetween2DPointsForY"),{insertSorted:insertSorted,fnNumberSort:fnNumberSort}=require("../../utils"),poly3=require("../../geometries/poly3"),reTesselateCoplanarPolygons=t=>{if(t.length<2)return t;const e=[],o=t.length,n=poly3.plane(t[0]),l=new OrthoNormalBasis(n),i=[],r=[],s={},f={},p={},h=1/EPS*10;for(let e=0;e<o;e++){const o=t[e];let n=[],c=o.vertices.length,g=-1;if(c>0){let t,i;for(let r=0;r<c;r++){let s=l.to2D(o.vertices[r]);const c=Math.floor(s[1]*h);let a;c in p?a=p[c]:c+1 in p?a=p[c+1]:c-1 in p?a=p[c-1]:(a=s[1],p[c]=s[1]),s=vec2.fromValues(s[0],a),n.push(s);const u=s[1];(0===r||u<t)&&(t=u,g=r),(0===r||u>i)&&(i=u),u in f||(f[u]={}),f[u][e]=!0}t>=i?(n=[],c=0,g=-1):(t in s||(s[t]=[]),s[t].push(e))}n.reverse(),g=c-g-1,i.push(n),r.push(g)}const c=[];for(const t in f)c.push(t);c.sort(fnNumberSort);let g=[],a=[];for(let t=0;t<c.length;t++){const o=[],p=c[t],h=Number(p),u=f[p];for(let t=0;t<g.length;++t){const e=g[t],o=e.polygonindex;if(u[o]){const n=i[o],l=n.length;let r=e.leftvertexindex,s=e.rightvertexindex;for(;;){let t=r+1;if(t>=l&&(t=0),n[t][1]!==h)break;r=t}let f=s-1;if(f<0&&(f=l-1),n[f][1]===h&&(s=f),r!==e.leftvertexindex&&r===s)g.splice(t,1),--t;else{e.leftvertexindex=r,e.rightvertexindex=s,e.topleft=n[r],e.topright=n[s];let t=r+1;t>=l&&(t=0),e.bottomleft=n[t];let o=s-1;o<0&&(o=l-1),e.bottomright=n[o]}}}let m;if(t>=c.length-1)g=[],m=null;else{const e=.5*(h+(m=Number(c[t+1]))),o=s[p];for(const t in o){const n=o[t],l=i[n],s=l.length,f=r[n];let p=f;for(;;){let t=p+1;if(t>=s&&(t=0),l[t][1]!==h)break;if(t===f)break;p=t}let c=f;for(;;){let t=c-1;if(t<0&&(t=s-1),l[t][1]!==h)break;if(t===p)break;c=t}let a=p+1;a>=s&&(a=0);let u=c-1;u<0&&(u=s-1);const m={polygonindex:n,leftvertexindex:p,rightvertexindex:c,topleft:l[p],topright:l[c],bottomleft:l[a],bottomright:l[u]};insertSorted(g,m,(t,o)=>{const n=interpolateBetween2DPointsForY(t.topleft,t.bottomleft,e),l=interpolateBetween2DPointsForY(o.topleft,o.bottomleft,e);return n>l?1:n<l?-1:0})}}for(const t in g){const e=g[t];let n=interpolateBetween2DPointsForY(e.topleft,e.bottomleft,h);const l=vec2.fromValues(n,h);n=interpolateBetween2DPointsForY(e.topright,e.bottomright,h);const i=vec2.fromValues(n,h);n=interpolateBetween2DPointsForY(e.topleft,e.bottomleft,m);const r=vec2.fromValues(n,m);n=interpolateBetween2DPointsForY(e.topright,e.bottomright,m);const s=vec2.fromValues(n,m),f={topleft:l,topright:i,bottomleft:r,bottomright:s,leftline:line2.fromPoints(line2.create(),l,r),rightline:line2.fromPoints(line2.create(),s,i)};if(o.length>0){const t=o[o.length-1],e=vec2.distance(f.topleft,t.topright),n=vec2.distance(f.bottomleft,t.bottomright);e<EPS&&n<EPS&&(f.topleft=t.topleft,f.leftline=t.leftline,f.bottomleft=t.bottomleft,o.splice(o.length-1,1))}o.push(f)}if(t>0){const t={},i={};for(let e=0;e<o.length;e++){const n=o[e];for(let e=0;e<a.length;e++)if(!i[e]){const o=a[e];if(vec2.distance(o.bottomleft,n.topleft)<EPS&&vec2.distance(o.bottomright,n.topright)<EPS){i[e]=!0;const l=line2.direction(n.leftline),r=line2.direction(o.leftline),s=l[0]-r[0],f=line2.direction(n.rightline),p=line2.direction(o.rightline),h=f[0]-p[0],c=Math.abs(s)<EPS,g=Math.abs(h)<EPS,a=g||h>=0;(c||s>=0)&&a&&(n.outpolygon=o.outpolygon,n.leftlinecontinues=c,n.rightlinecontinues=g,t[e]=!0);break}}}for(let o=0;o<a.length;o++)if(!t[o]){const t=a[o];t.outpolygon.rightpoints.push(t.bottomright),vec2.distance(t.bottomright,t.bottomleft)>EPS&&t.outpolygon.leftpoints.push(t.bottomleft),t.outpolygon.leftpoints.reverse();const i=t.outpolygon.rightpoints.concat(t.outpolygon.leftpoints).map(t=>l.to3D(t)),r=poly3.fromPointsAndPlane(i,n);r.vertices.length&&e.push(r)}}for(let t=0;t<o.length;t++){const e=o[t];e.outpolygon?(e.leftlinecontinues||e.outpolygon.leftpoints.push(e.topleft),e.rightlinecontinues||e.outpolygon.rightpoints.push(e.topright)):(e.outpolygon={leftpoints:[],rightpoints:[]},e.outpolygon.leftpoints.push(e.topleft),vec2.distance(e.topleft,e.topright)>EPS&&e.outpolygon.rightpoints.push(e.topright))}a=o}return e};module.exports=reTesselateCoplanarPolygons;

},{"../../geometries/poly3":73,"../../maths/OrthoNormalBasis":86,"../../maths/constants":87,"../../maths/line2":98,"../../maths/utils/interpolateBetween2DPointsForY":163,"../../maths/vec2":183,"../../utils":376}],261:[function(require,module,exports){
const geom3=require("../../geometries/geom3"),poly3=require("../../geometries/poly3"),reTesselateCoplanarPolygons=require("./reTesselateCoplanarPolygons"),NEPS=1e-13,aboutEqualNormals=(e,o)=>Math.abs(e[0]-o[0])<=NEPS&&Math.abs(e[1]-o[1])<=NEPS&&Math.abs(e[2]-o[2])<=NEPS,coplanar=(e,o)=>Math.abs(e[3]-o[3])<1.5e-7&&aboutEqualNormals(e,o),retessellate=e=>{if(e.isRetesselated)return e;const o=geom3.toPolygons(e),a=[];o.forEach(e=>{const o=a.find(o=>coplanar(o[0],poly3.plane(e)));if(o){o[1].push(e)}else a.push([poly3.plane(e),[e]])});let s=[];a.forEach(e=>{const o=e[1],a=reTesselateCoplanarPolygons(o);s=s.concat(a)});const l=geom3.create(s);return l.isRetesselated=!0,l};module.exports=retessellate;

},{"../../geometries/geom3":36,"../../geometries/poly3":73,"./reTesselateCoplanarPolygons":260}],262:[function(require,module,exports){
const flatten=require("../../utils/flatten"),geom3=require("../../geometries/geom3"),scissionGeom3=require("./scissionGeom3"),scission=(...e)=>{if(0===(e=flatten(e)).length)throw new Error("wrong number of arguments");const s=e.map(e=>geom3.isA(e)?scissionGeom3(e):e);return 1===s.length?s[0]:s};module.exports=scission;

},{"../../geometries/geom3":36,"../../utils/flatten":374,"./scissionGeom3":263}],263:[function(require,module,exports){
const vec3=require("../../maths/vec3"),measureEpsilon=require("../../measurements/measureEpsilon"),geom3=require("../../geometries/geom3"),sortNb=e=>e.sort((e,s)=>e-s).filter((e,s,o)=>!s||e!==o[s-1]),insertMapping=(e,s,o)=>{const t=`${s}`,n=e.get(t);void 0===n?e.set(t,[o]):n.push(o)},findMapping=(e,s)=>{const o=`${s}`;return e.get(o)},scissionGeom3=e=>{const s=measureEpsilon(e),o=geom3.toPolygons(e),t=o.length,n=new Map,r=vec3.create();o.forEach((e,o)=>{e.vertices.forEach(e=>{insertMapping(n,vec3.snap(r,e,s),o)})});const c=o.map(e=>{let o=[];return e.vertices.forEach(e=>{o=o.concat(findMapping(n,vec3.snap(r,e,s)))}),{e:1,d:sortNb(o)}});n.clear();let i=0;const a=c.length;for(let e=0;e<a;e++){const s=c[e];if(s.e>0){const o=new Array(t);o[e]=!0;do{i=0,o.forEach((e,s)=>{const t=c[s];if(t.e>0){t.e=-1;for(let e=0;e<t.d.length;e++)o[t.d[e]]=!0;i++}})}while(i>0);s.indexes=o}}const p=[];for(let e=0;e<a;e++)if(c[e].indexes){const s=[];c[e].indexes.forEach((e,t)=>s.push(o[t])),p.push(geom3.create(s))}return p};module.exports=scissionGeom3;

},{"../../geometries/geom3":36,"../../maths/vec3":214,"../../measurements/measureEpsilon":251}],264:[function(require,module,exports){
const flatten=require("../../utils/flatten"),areAllShapesTheSameType=require("../../utils/areAllShapesTheSameType"),geom2=require("../../geometries/geom2"),geom3=require("../../geometries/geom3"),subtractGeom2=require("./subtractGeom2"),subtractGeom3=require("./subtractGeom3"),subtract=(...e)=>{if(0===(e=flatten(e)).length)throw new Error("wrong number of arguments");if(!areAllShapesTheSameType(e))throw new Error("only subtract of the types are supported");const r=e[0];return geom2.isA(r)?subtractGeom2(e):geom3.isA(r)?subtractGeom3(e):r};module.exports=subtract;

},{"../../geometries/geom2":22,"../../geometries/geom3":36,"../../utils/areAllShapesTheSameType":372,"../../utils/flatten":374,"./subtractGeom2":265,"./subtractGeom3":266}],265:[function(require,module,exports){
const flatten=require("../../utils/flatten"),geom3=require("../../geometries/geom3"),measureEpsilon=require("../../measurements/measureEpsilon"),fromFakePolygons=require("./fromFakePolygons"),to3DWalls=require("./to3DWalls"),subtractGeom3=require("./subtractGeom3"),subtract=(...e)=>{const o=(e=flatten(e)).map(e=>to3DWalls({z0:-1,z1:1},e)),r=subtractGeom3(o),t=measureEpsilon(r);return fromFakePolygons(t,geom3.toPolygons(r))};module.exports=subtract;

},{"../../geometries/geom3":36,"../../measurements/measureEpsilon":251,"../../utils/flatten":374,"./fromFakePolygons":253,"./subtractGeom3":266,"./to3DWalls":268}],266:[function(require,module,exports){
const flatten=require("../../utils/flatten"),retessellate=require("./retessellate"),subtractSub=require("./subtractGeom3Sub"),subtract=(...t)=>{let e=(t=flatten(t)).shift();return t.forEach(t=>{e=subtractSub(e,t)}),e=retessellate(e)};module.exports=subtract;

},{"../../utils/flatten":374,"./retessellate":261,"./subtractGeom3Sub":267}],267:[function(require,module,exports){
const geom3=require("../../geometries/geom3"),mayOverlap=require("./mayOverlap"),{Tree:Tree}=require("./trees"),subtractGeom3Sub=(e,o)=>{if(!mayOverlap(e,o))return geom3.clone(e);const r=new Tree(geom3.toPolygons(e)),t=new Tree(geom3.toPolygons(o));r.invert(),r.clipTo(t),t.clipTo(r,!0),r.addPolygons(t.allPolygons()),r.invert();const l=r.allPolygons();return geom3.create(l)};module.exports=subtractGeom3Sub;

},{"../../geometries/geom3":36,"./mayOverlap":259,"./trees":272}],268:[function(require,module,exports){
const vec3=require("../../maths/vec3"),geom2=require("../../geometries/geom2"),geom3=require("../../geometries/geom3"),poly3=require("../../geometries/poly3"),to3DWall=(e,o,r)=>{const c=[vec3.fromVec2(vec3.create(),r[0],e),vec3.fromVec2(vec3.create(),r[1],e),vec3.fromVec2(vec3.create(),r[1],o),vec3.fromVec2(vec3.create(),r[0],o)];return poly3.fromPoints(c)},to3DWalls=(e,o)=>{const r=geom2.toSides(o).map(o=>to3DWall(e.z0,e.z1,o));return geom3.create(r)};module.exports=to3DWalls;

},{"../../geometries/geom2":22,"../../geometries/geom3":36,"../../geometries/poly3":73,"../../maths/vec3":214}],269:[function(require,module,exports){
const plane=require("../../../maths/plane"),poly3=require("../../../geometries/poly3");class Node{constructor(e){this.plane=null,this.front=null,this.back=null,this.polygontreenodes=[],this.parent=e}invert(){const e=[this];let o;for(let n=0;n<e.length;n++){(o=e[n]).plane&&(o.plane=plane.flip(plane.create(),o.plane)),o.front&&e.push(o.front),o.back&&e.push(o.back);const t=o.front;o.front=o.back,o.back=t}}clipPolygons(e,o){let n,t={node:this,polygontreenodes:e};const l=[];do{if(n=t.node,e=t.polygontreenodes,n.plane){const t=[],s=[],p=o?t:s,r=n.plane,a=e.length;for(let o=0;o<a;o++){const n=e[o];n.isRemoved()||n.splitByPlane(r,p,t,s,t)}n.front&&s.length>0&&l.push({node:n.front,polygontreenodes:s});const h=t.length;if(n.back&&h>0)l.push({node:n.back,polygontreenodes:t});else for(let e=0;e<h;e++)t[e].remove()}t=l.pop()}while(void 0!==t)}clipTo(e,o){let n=this;const t=[];do{n.polygontreenodes.length>0&&e.rootnode.clipPolygons(n.polygontreenodes,o),n.front&&t.push(n.front),n.back&&t.push(n.back),n=t.pop()}while(void 0!==n)}addPolygonTreeNodes(e){let o={node:this,polygontreenodes:e};const n=[];do{const e=o.node,t=o.polygontreenodes;if(0===t.length){o=n.pop();continue}if(!e.plane){let o=0;const n=t[o=Math.floor(t.length/2)].getPolygon();e.plane=poly3.plane(n)}const l=[],s=[],p=t.length;for(let o=0;o<p;++o)t[o].splitByPlane(e.plane,e.polygontreenodes,s,l,s);if(l.length>0){e.front||(e.front=new Node(e)),p===l.length&&0===s.length?e.front.polygontreenodes.push(...l):n.push({node:e.front,polygontreenodes:l})}if(s.length>0){e.back||(e.back=new Node(e)),p===s.length&&0===l.length?e.back.polygontreenodes.push(...s):n.push({node:e.back,polygontreenodes:s})}o=n.pop()}while(void 0!==o)}getParentPlaneNormals(e,o){o>0&&this.parent&&(e.push(this.parent.plane.normal),this.parent.getParentPlaneNormals(e,o-1))}}module.exports=Node;

},{"../../../geometries/poly3":73,"../../../maths/plane":155}],270:[function(require,module,exports){
const{EPS:EPS}=require("../../../maths/constants"),vec3=require("../../../maths/vec3"),poly3=require("../../../geometries/poly3"),splitPolygonByPlane=require("./splitPolygonByPlane");class PolygonTreeNode{constructor(){this.parent=null,this.children=[],this.polygon=null,this.removed=!1}addPolygons(e){if(!this.isRootNode())throw new Error("Assertion failed");const t=this;e.forEach(e=>{t.addChild(e)})}remove(){if(!this.removed){this.removed=!0;const e=this.parent.children,t=e.indexOf(this);if(t<0)throw new Error("Assertion failed");e.splice(t,1),this.parent.recursivelyInvalidatePolygon()}}isRemoved(){return this.removed}isRootNode(){return!this.parent}invert(){if(!this.isRootNode())throw new Error("Assertion failed");this.invertSub()}getPolygon(){if(!this.polygon)throw new Error("Assertion failed");return this.polygon}getPolygons(e){let t=[this];const o=[t];let n,l,s,r;for(n=0;n<o.length;++n)for(l=0,s=(t=o[n]).length;l<s;l++)(r=t[l]).polygon?e.push(r.polygon):r.children.length>0&&o.push(r.children)}splitByPlane(e,t,o,n,l){if(this.children.length){const s=[this.children];let r,i,h,p,c;for(r=0;r<s.length;r++)for(c=s[r],i=0,h=c.length;i<h;i++)(p=c[i]).children.length>0?s.push(p.children):p._splitByPlane(e,t,o,n,l)}else this._splitByPlane(e,t,o,n,l)}_splitByPlane(e,t,o,n,l){const s=this.polygon;if(s){const r=poly3.measureBoundingSphere(s),i=r[1]+EPS,h=r[0],p=vec3.dot(e,h)-e[3];if(p>i)n.push(this);else if(p<-i)l.push(this);else{const r=splitPolygonByPlane(e,s);switch(r.type){case 0:t.push(this);break;case 1:o.push(this);break;case 2:n.push(this);break;case 3:l.push(this);break;case 4:if(r.front){const e=this.addChild(r.front);n.push(e)}if(r.back){const e=this.addChild(r.back);l.push(e)}}}}}addChild(e){const t=new PolygonTreeNode;return t.parent=this,t.polygon=e,this.children.push(t),t}invertSub(){let e=[this];const t=[e];let o,n,l,s;for(o=0;o<t.length;o++)for(n=0,l=(e=t[o]).length;n<l;n++)(s=e[n]).polygon&&(s.polygon=poly3.invert(s.polygon)),s.children.length>0&&t.push(s.children)}recursivelyInvalidatePolygon(){let e=this;for(;e.polygon;)e.polygon=null,e.parent&&(e=e.parent)}clear(){let e=[this];const t=[e];for(let o=0;o<t.length;++o){const n=(e=t[o]).length;for(let o=0;o<n;o++){const n=e[o];n.polygon&&(n.polygon=null),n.parent&&(n.parent=null),n.children.length>0&&t.push(n.children),n.children=[]}}}toString(){let e="",t=[this];const o=[t];let n,l,s,r;for(n=0;n<o.length;++n){t=o[n];const i=" ".repeat(n);for(l=0,s=t.length;l<s;l++)e+=`${i}PolygonTreeNode (${(r=t[l]).isRootNode()}): ${r.children.length}`,r.polygon?e+=`\n ${i}poly3\n`:e+="\n",r.children.length>0&&o.push(r.children)}return e}}module.exports=PolygonTreeNode;

},{"../../../geometries/poly3":73,"../../../maths/constants":87,"../../../maths/vec3":214,"./splitPolygonByPlane":274}],271:[function(require,module,exports){
const Node=require("./Node"),PolygonTreeNode=require("./PolygonTreeNode");class Tree{constructor(o){this.polygonTree=new PolygonTreeNode,this.rootnode=new Node(null),o&&this.addPolygons(o)}invert(){this.polygonTree.invert(),this.rootnode.invert()}clipTo(o,e){e=!!e,this.rootnode.clipTo(o,e)}allPolygons(){const o=[];return this.polygonTree.getPolygons(o),o}addPolygons(o){const e=new Array(o.length);for(let r=0;r<o.length;r++)e[r]=this.polygonTree.addChild(o[r]);this.rootnode.addPolygonTreeNodes(e)}clear(){this.polygonTree.clear()}toString(){return"Tree: "+this.polygonTree.toString("")}}module.exports=Tree;

},{"./Node":269,"./PolygonTreeNode":270}],272:[function(require,module,exports){
module.exports={Tree:require("./Tree")};

},{"./Tree":271}],273:[function(require,module,exports){
const vec3=require("../../../maths/vec3"),splitLineSegmentByPlane=(e,t,c)=>{const n=vec3.subtract(vec3.create(),c,t);let s=(e[3]-vec3.dot(e,t))/vec3.dot(e,n);return Number.isNaN(s)&&(s=0),s>1&&(s=1),s<0&&(s=0),vec3.scale(n,n,s),vec3.add(n,t,n),n};module.exports=splitLineSegmentByPlane;

},{"../../../maths/vec3":214}],274:[function(require,module,exports){
const{EPS:EPS}=require("../../../maths/constants"),plane=require("../../../maths/plane"),vec3=require("../../../maths/vec3"),poly3=require("../../../geometries/poly3"),splitLineSegmentByPlane=require("./splitLineSegmentByPlane"),splitPolygonByPlane=(e,t)=>{const l={type:null,front:null,back:null},n=t.vertices,s=n.length,o=poly3.plane(t);if(plane.equals(o,e))l.type=0;else{let t=!1,p=!1;const i=[],c=-EPS;for(let l=0;l<s;l++){const s=vec3.dot(e,n[l])-e[3],o=s<0;i.push(o),s>EPS&&(t=!0),s<c&&(p=!0)}if(t||p)if(p)if(t){l.type=4;const t=[],p=[];let c=i[0];for(let l=0;l<s;l++){const o=n[l];let r=l+1;r>=s&&(r=0);const a=i[r];if(c===a)c?p.push(o):t.push(o);else{const l=o,s=n[r],i=splitLineSegmentByPlane(e,l,s);c?(p.push(o),p.push(i),t.push(i)):(t.push(o),t.push(i),p.push(i))}c=a}const r=EPS*EPS;if(p.length>=3){let e=p[p.length-1];for(let t=0;t<p.length;t++){const l=p[t];vec3.squaredDistance(l,e)<r&&(p.splice(t,1),t--),e=l}}if(t.length>=3){let e=t[t.length-1];for(let l=0;l<t.length;l++){const n=t[l];vec3.squaredDistance(n,e)<r&&(t.splice(l,1),l--),e=n}}t.length>=3&&(l.front=poly3.fromPointsAndPlane(t,o)),p.length>=3&&(l.back=poly3.fromPointsAndPlane(p,o))}else l.type=3;else l.type=2;else{const t=vec3.dot(e,o);l.type=t>=0?0:1}}return l};module.exports=splitPolygonByPlane;

},{"../../../geometries/poly3":73,"../../../maths/constants":87,"../../../maths/plane":155,"../../../maths/vec3":214,"./splitLineSegmentByPlane":273}],275:[function(require,module,exports){
const flatten=require("../../utils/flatten"),areAllShapesTheSameType=require("../../utils/areAllShapesTheSameType"),geom2=require("../../geometries/geom2"),geom3=require("../../geometries/geom3"),unionGeom2=require("./unionGeom2"),unionGeom3=require("./unionGeom3"),union=(...e)=>{if(0===(e=flatten(e)).length)throw new Error("wrong number of arguments");if(!areAllShapesTheSameType(e))throw new Error("only unions of the same type are supported");const o=e[0];return geom2.isA(o)?unionGeom2(e):geom3.isA(o)?unionGeom3(e):o};module.exports=union;

},{"../../geometries/geom2":22,"../../geometries/geom3":36,"../../utils/areAllShapesTheSameType":372,"../../utils/flatten":374,"./unionGeom2":276,"./unionGeom3":277}],276:[function(require,module,exports){
const flatten=require("../../utils/flatten"),geom3=require("../../geometries/geom3"),measureEpsilon=require("../../measurements/measureEpsilon"),fromFakePolygons=require("./fromFakePolygons"),to3DWalls=require("./to3DWalls"),unionGeom3=require("./unionGeom3"),union=(...e)=>{const o=(e=flatten(e)).map(e=>to3DWalls({z0:-1,z1:1},e)),n=unionGeom3(o),r=measureEpsilon(n);return fromFakePolygons(r,geom3.toPolygons(n))};module.exports=union;

},{"../../geometries/geom3":36,"../../measurements/measureEpsilon":251,"../../utils/flatten":374,"./fromFakePolygons":253,"./to3DWalls":268,"./unionGeom3":277}],277:[function(require,module,exports){
const flatten=require("../../utils/flatten"),retessellate=require("./retessellate"),unionSub=require("./unionGeom3Sub"),union=(...e)=>{let n;for(e=flatten(e),n=1;n<e.length;n+=2)e.push(unionSub(e[n-1],e[n]));return e[n-1]};module.exports=union;

},{"../../utils/flatten":374,"./retessellate":261,"./unionGeom3Sub":278}],278:[function(require,module,exports){
const geom3=require("../../geometries/geom3"),mayOverlap=require("./mayOverlap"),{Tree:Tree}=require("./trees"),unionSub=(e,o)=>{if(!mayOverlap(e,o))return unionForNonIntersecting(e,o);const n=new Tree(geom3.toPolygons(e)),r=new Tree(geom3.toPolygons(o));n.clipTo(r,!1),r.clipTo(n),r.invert(),r.clipTo(n),r.invert();const t=n.allPolygons().concat(r.allPolygons());return geom3.create(t)},unionForNonIntersecting=(e,o)=>{let n=geom3.toPolygons(e);return n=n.concat(geom3.toPolygons(o)),geom3.create(n)};module.exports=unionSub;

},{"../../geometries/geom3":36,"./mayOverlap":259,"./trees":272}],279:[function(require,module,exports){
const flatten=require("../../utils/flatten"),geom2=require("../../geometries/geom2"),geom3=require("../../geometries/geom3"),path2=require("../../geometries/path2"),expandGeom2=require("./expandGeom2"),expandGeom3=require("./expandGeom3"),expandPath2=require("./expandPath2"),expand=(e,...r)=>{if(0===(r=flatten(r)).length)throw new Error("wrong number of arguments");const t=r.map(r=>path2.isA(r)?expandPath2(e,r):geom2.isA(r)?expandGeom2(e,r):geom3.isA(r)?expandGeom3(e,r):r);return 1===t.length?t[0]:t};module.exports=expand;

},{"../../geometries/geom2":22,"../../geometries/geom3":36,"../../geometries/path2":57,"../../utils/flatten":374,"./expandGeom2":280,"./expandGeom3":281,"./expandPath2":282}],280:[function(require,module,exports){
const geom2=require("../../geometries/geom2"),offsetFromPoints=require("./offsetFromPoints"),expandGeom2=(e,o)=>{const{delta:r,corners:s,segments:t}=Object.assign({},{delta:1,corners:"edge",segments:16},e);if("edge"!==s&&"chamfer"!==s&&"round"!==s)throw new Error('corners must be "edge", "chamfer", or "round"');const n=geom2.toOutlines(o).map(o=>offsetFromPoints(e={delta:r,corners:s,closed:!0,segments:t},o)).reduce((e,o)=>e.concat(geom2.toSides(geom2.fromPoints(o))),[]);return geom2.create(n)};module.exports=expandGeom2;

},{"../../geometries/geom2":22,"./offsetFromPoints":287}],281:[function(require,module,exports){
const geom3=require("../../geometries/geom3"),union=require("../booleans/union"),expandShell=require("./expandShell"),expandGeom3=(e,n)=>{const{delta:o,corners:r,segments:t}=Object.assign({},{delta:1,corners:"round",segments:12},e);if("round"!==r)throw new Error('corners must be "round" for 3D geometries');if(0===geom3.toPolygons(n).length)throw new Error("the given geometry cannot be empty");const s=expandShell(e={delta:o,corners:r,segments:t},n);return union(n,s)};module.exports=expandGeom3;

},{"../../geometries/geom3":36,"../booleans/union":275,"./expandShell":283}],282:[function(require,module,exports){
const area=require("../../maths/utils/area"),vec2=require("../../maths/vec2"),geom2=require("../../geometries/geom2"),path2=require("../../geometries/path2"),offsetFromPoints=require("./offsetFromPoints"),createGeometryFromClosedOffsets=e=>{let{external:t,internal:r}=e;area(t)<0?t=t.reverse():r=r.reverse();const o=path2.fromPoints({closed:!0},t),s=path2.fromPoints({closed:!0},r),n=geom2.toSides(geom2.fromPoints(path2.toPoints(o))),a=geom2.toSides(geom2.fromPoints(path2.toPoints(s)));return n.push(...a),geom2.create(n)},createGeometryFromExpandedOpenPath=(e,t,r,o)=>{const{points:s,external:n,internal:a}=e,c=Math.floor(t/2),m=[],i=[];if("round"===r&&c>0){const e=Math.PI/c,t=s[s.length-1],r=vec2.angle(vec2.subtract(vec2.create(),n[n.length-1],t)),d=s[0],l=vec2.angle(vec2.subtract(vec2.create(),a[0],d));for(let s=1;s<c;s++){let n=r+e*s,a=vec2.fromAngleRadians(vec2.create(),n);vec2.scale(a,a,o),vec2.add(a,a,t),m.push(a),n=l+e*s,a=vec2.fromAngleRadians(vec2.create(),n),vec2.scale(a,a,o),vec2.add(a,a,d),i.push(a)}}const d=[];return d.push(...n,...m,...a.reverse(),...i),geom2.fromPoints(d)},expandPath2=(e,t)=>{e=Object.assign({},{delta:1,corners:"edge",segments:16},e);const{delta:r,corners:o,segments:s}=e;if(r<=0)throw new Error("the given delta must be positive for paths");if("edge"!==o&&"chamfer"!==o&&"round"!==o)throw new Error('corners must be "edge", "chamfer", or "round"');const n=t.isClosed,a=path2.toPoints(t);if(0===a.length)throw new Error("the given geometry cannot be empty");const c={points:a,external:offsetFromPoints({delta:r,corners:o,segments:s,closed:n},a),internal:offsetFromPoints({delta:-r,corners:o,segments:s,closed:n},a)};return t.isClosed?createGeometryFromClosedOffsets(c):createGeometryFromExpandedOpenPath(c,s,o,r)};module.exports=expandPath2;

},{"../../geometries/geom2":22,"../../geometries/path2":57,"../../maths/utils/area":160,"../../maths/vec2":183,"./offsetFromPoints":287}],283:[function(require,module,exports){
const{EPS:EPS}=require("../../maths/constants"),mat4=require("../../maths/mat4"),vec3=require("../../maths/vec3"),fnNumberSort=require("../../utils/fnNumberSort"),geom3=require("../../geometries/geom3"),poly3=require("../../geometries/poly3"),sphere=require("../../primitives/sphere"),retessellate=require("../booleans/retessellate"),unionGeom3Sub=require("../booleans/unionGeom3Sub"),extrudePolygon=require("./extrudePolygon"),mapPlaneToVertex=(e,t,o)=>{const n=e.findIndex(e=>vec3.equals(e[0],t));if(n<0){const n=[t,[o]];return e.push(n),e.length}return e[n][1].push(o),n},mapPlaneToEdge=(e,t,o)=>{const n=e.findIndex(e=>vec3.equals(e[0],t[0])&&vec3.equals(e[1],t[1])||vec3.equals(e[0],t[1])&&vec3.equals(e[1],t[0]));if(n<0){const n=[t,[o]];return e.push(n),e.length}return e[n][1].push(o),n},addUniqueAngle=(e,t)=>{const o=e.findIndex(e=>e===t);return o<0?(e.push(t),e.length):o},expandShell=(e,t)=>{const{delta:o,segments:n}=Object.assign({},{delta:1,segments:12},e);let s=geom3.create();const r=[],c=[],a=vec3.create(),l=vec3.create();return geom3.toPolygons(t).forEach((e,t)=>{const n=vec3.scale(vec3.create(),poly3.plane(e),2*o),a=poly3.transform(mat4.fromTranslation(mat4.create(),vec3.scale(vec3.create(),n,-.5)),e),l=extrudePolygon(n,a);s=unionGeom3Sub(s,l);const u=e.vertices;for(let t=0;t<u.length;t++){mapPlaneToVertex(r,u[t],poly3.plane(e));const o=(t+1)%u.length,n=[u[t],u[o]];mapPlaneToEdge(c,n,poly3.plane(e))}}),c.forEach(e=>{const t=e[0],r=e[1],c=t[0],u=t[1],i=vec3.subtract(vec3.create(),u,c);vec3.normalize(i,i);const h=r[0],m=vec3.cross(vec3.create(),h,i);let v=[];for(let e=0;e<n;e++)addUniqueAngle(v,e*Math.PI*2/n);for(let e=0,t=r.length;e<t;e++){const t=r[e],o=vec3.dot(m,t),n=vec3.dot(h,t);let s=Math.atan2(o,n);s<0&&(s+=2*Math.PI),addUniqueAngle(v,s),(s=Math.atan2(-o,-n))<0&&(s+=2*Math.PI),addUniqueAngle(v,s)}const d=(v=v.sort(fnNumberSort)).length;let p,g;const f=[],q=[],P=[];for(let e=-1;e<d;e++){const t=v[e<0?e+d:e],n=Math.sin(t),s=Math.cos(t);vec3.scale(a,h,s*o),vec3.scale(l,m,n*o),vec3.add(a,a,l);const r=vec3.add(vec3.create(),c,a),i=vec3.add(vec3.create(),u,a);let y=!1;if(e>=0&&vec3.distance(r,p)<EPS&&(y=!0),!y){if(e>=0){f.push(r),q.push(i);const e=[g,i,r,p],t=poly3.fromPoints(e);P.push(t)}p=r,g=i}}q.reverse(),P.push(poly3.fromPoints(f)),P.push(poly3.fromPoints(q));const y=geom3.create(P);s=unionGeom3Sub(s,y)}),r.forEach(e=>{const t=e[0],r=e[1],c=r[0];let u=null,i=0;for(let e=1;e<r.length;e++){const t=r[e],o=vec3.cross(a,c,t),n=vec3.length(o);n>.05&&n>i&&(i=n,u=t)}u||(u=vec3.orthogonal(a,c));const h=vec3.cross(a,c,u);vec3.normalize(h,h);const m=vec3.cross(l,h,c),v=sphere({center:[t[0],t[1],t[2]],radius:o,segments:n,axes:[c,h,m]});s=unionGeom3Sub(s,v)}),retessellate(s)};module.exports=expandShell;

},{"../../geometries/geom3":36,"../../geometries/poly3":73,"../../maths/constants":87,"../../maths/mat4":137,"../../maths/vec3":214,"../../primitives/sphere":363,"../../utils/fnNumberSort":375,"../booleans/retessellate":261,"../booleans/unionGeom3Sub":278,"./extrudePolygon":284}],284:[function(require,module,exports){
const mat4=require("../../maths/mat4"),vec3=require("../../maths/vec3"),geom3=require("../../geometries/geom3"),poly3=require("../../geometries/poly3"),extrudePolygon=(e,t)=>{vec3.dot(poly3.plane(t),e)>0&&(t=poly3.invert(t));const r=[t],o=poly3.transform(mat4.fromTranslation(mat4.create(),e),t),s=t.vertices.length;for(let e=0;e<s;e++){const i=[],m=e<s-1?e+1:0;i.push(t.vertices[e]),i.push(o.vertices[e]),i.push(o.vertices[m]),i.push(t.vertices[m]);const n=poly3.fromPoints(i);r.push(n)}return r.push(poly3.invert(o)),geom3.create(r)};module.exports=extrudePolygon;

},{"../../geometries/geom3":36,"../../geometries/poly3":73,"../../maths/mat4":137,"../../maths/vec3":214}],285:[function(require,module,exports){
module.exports={expand:require("./expand"),offset:require("./offset")};

},{"./expand":279,"./offset":286}],286:[function(require,module,exports){
const flatten=require("../../utils/flatten"),geom2=require("../../geometries/geom2"),path2=require("../../geometries/path2"),offsetGeom2=require("./offsetGeom2"),offsetPath2=require("./offsetPath2"),offset=(e,...t)=>{if(0===(t=flatten(t)).length)throw new Error("wrong number of arguments");const o=t.map(t=>path2.isA(t)?offsetPath2(e,t):geom2.isA(t)?offsetGeom2(e,t):t);return 1===o.length?o[0]:o};module.exports=offset;

},{"../../geometries/geom2":22,"../../geometries/path2":57,"../../utils/flatten":374,"./offsetGeom2":288,"./offsetPath2":289}],287:[function(require,module,exports){
const{EPS:EPS}=require("../../maths/constants"),intersect=require("../../maths/utils/intersect"),line2=require("../../maths/line2"),vec2=require("../../maths/vec2"),area=require("../../maths/utils/area"),offsetFromPoints=(e,s)=>{let{delta:t,corners:c,closed:n,segments:a}=Object.assign({},{delta:1,corners:"edge",closed:!1,segments:16},e);if(Math.abs(t)<EPS)return s;let l=e.closed?area(s):1;0===l&&(l=1);const r=l>0&&t>=0||l<0&&t<0;t=Math.abs(t);let i=null;const o=[],u=[],f=vec2.create(),v=s.length;for(let e=0;e<v;e++){const c=(e+1)%v,a=s[e],l=s[c];r?vec2.subtract(f,a,l):vec2.subtract(f,l,a),vec2.normal(f,f),vec2.normalize(f,f),vec2.scale(f,f,t);const h=vec2.add(vec2.create(),a,f),d=vec2.add(vec2.create(),l,f),m=[h,d];if(null!=i&&(n||!n&&0!==c)){const e=intersect(i[0],i[1],m[0],m[1]);e?(o.pop(),m[0]=e):u.push({c:a,s0:i,s1:m})}i=[h,d],(0!==c||n)&&(o.push(m[0]),o.push(m[1]))}if(n&&null!=i){const e=o[0],t=o[1],c=intersect(i[0],i[1],e,t);if(c)o[0]=c,o.pop();else{const c=s[0],n=[e,t];u.push({c:c,s0:i,s1:n})}}if("edge"===c){const e=line2.create(),s=line2.create();u.forEach(t=>{line2.fromPoints(e,t.s0[0],t.s0[1]),line2.fromPoints(s,t.s1[0],t.s1[1]);const c=line2.intersectPointOfLines(e,s);if(Number.isFinite(c[0])&&Number.isFinite(c[1])){const e=t.s0[1];let s=o.findIndex(s=>vec2.equals(e,s));s=(s+1)%o.length,o.splice(s,0,c)}else{const e=t.s1[0],s=o.findIndex(s=>vec2.equals(e,s));o.splice(s,1)}})}if("round"===c){let e=Math.floor(a/4);const s=vec2.create();u.forEach(c=>{let n=vec2.angle(vec2.subtract(s,c.s1[0],c.c));if(n-=vec2.angle(vec2.subtract(s,c.s0[1],c.c)),r&&n<0&&(n+=Math.PI)<0&&(n+=Math.PI),!r&&n>0&&(n-=Math.PI)>0&&(n-=Math.PI),0!==n){const l=n/(e=Math.floor(a*(Math.abs(n)/(2*Math.PI)))),r=vec2.angle(vec2.subtract(s,c.s0[1],c.c)),i=[];for(let s=1;s<e;s++){const e=r+l*s,n=vec2.fromAngleRadians(vec2.create(),e);vec2.scale(n,n,t),vec2.add(n,n,c.c),i.push(n)}if(i.length>0){const e=c.s0[1];let s=o.findIndex(s=>vec2.equals(e,s));s=(s+1)%o.length,o.splice(s,0,...i)}}else{const e=c.s1[0],s=o.findIndex(s=>vec2.equals(e,s));o.splice(s,1)}})}return o};module.exports=offsetFromPoints;

},{"../../maths/constants":87,"../../maths/line2":98,"../../maths/utils/area":160,"../../maths/utils/intersect":164,"../../maths/vec2":183}],288:[function(require,module,exports){
const geom2=require("../../geometries/geom2"),poly2=require("../../geometries/poly2"),offsetFromPoints=require("./offsetFromPoints"),offsetGeom2=(e,o)=>{const{delta:r,corners:s,segments:t}=Object.assign({},{delta:1,corners:"edge",segments:0},e);if("edge"!==s&&"chamfer"!==s&&"round"!==s)throw new Error('corners must be "edge", "chamfer", or "round"');const n=geom2.toOutlines(o),m=n.map(o=>{const m=n.reduce((e,r)=>e+poly2.arePointsInside(o,poly2.create(r)),0);return offsetFromPoints(e={delta:m%2==0?r:-r,corners:s,closed:!0,segments:t},o)}).reduce((e,o)=>e.concat(geom2.toSides(geom2.fromPoints(o))),[]);return geom2.create(m)};module.exports=offsetGeom2;

},{"../../geometries/geom2":22,"../../geometries/poly2":67,"./offsetFromPoints":287}],289:[function(require,module,exports){
const path2=require("../../geometries/path2"),offsetFromPoints=require("./offsetFromPoints"),offsetPath2=(e,o)=>{const s={delta:1,corners:"edge",closed:o.isClosed,segments:16},{delta:t,corners:r,closed:n,segments:c}=Object.assign({},s,e);if("edge"!==r&&"chamfer"!==r&&"round"!==r)throw new Error('corners must be "edge", "chamfer", or "round"');const d=offsetFromPoints(e={delta:t,corners:r,closed:n,segments:c},path2.toPoints(o));return path2.fromPoints({closed:n},d)};module.exports=offsetPath2;

},{"../../geometries/path2":57,"./offsetFromPoints":287}],290:[function(require,module,exports){
const mat4=require("../../maths/mat4"),geom2=require("../../geometries/geom2"),geom3=require("../../geometries/geom3"),poly3=require("../../geometries/poly3"),slice=require("./slice"),extrudeWalls=require("./extrudeWalls"),defaultCallback=(e,l,r)=>{let t=null;return geom2.isA(r)&&(t=slice.fromSides(geom2.toSides(r))),poly3.isA(r)&&(t=slice.fromPoints(poly3.toPoints(r))),0===e||1===e?slice.transform(mat4.fromTranslation(mat4.create(),[0,0,e]),t):null},extrudeFromSlices=(e,l)=>{const r={numberOfSlices:2,capStart:!0,capEnd:!0,close:!1,callback:defaultCallback},{numberOfSlices:t,capStart:o,capEnd:s,close:c,callback:i}=Object.assign({},r,e);if(t<2)throw new Error("numberOfSlices must be 2 or more");const n=t-1;let a=null,u=null,m=null,f=[];for(let e=0;e<t;e++){const r=i(e/n,e,l);if(r){if(!slice.isA(r))throw new Error("the callback function must return slice objects");if(0===slice.toEdges(r).length)throw new Error("the callback function must return slices with one or more edges");m&&(f=f.concat(extrudeWalls(m,r))),0===e&&(a=r),e===t-1&&(u=r),m=r}}if(s){const e=slice.toPolygons(u);f=f.concat(e)}if(o){slice.reverse(a,a);const e=slice.toPolygons(a);f=f.concat(e)}return o||s||c&&!slice.equals(u,a)&&(f=f.concat(extrudeWalls(u,a))),geom3.create(f)};module.exports=extrudeFromSlices;

},{"../../geometries/geom2":22,"../../geometries/geom3":36,"../../geometries/poly3":73,"../../maths/mat4":137,"./extrudeWalls":297,"./slice":306}],291:[function(require,module,exports){
const flatten=require("../../utils/flatten"),geom2=require("../../geometries/geom2"),extrudeLinearGeom2=require("./extrudeLinearGeom2"),extrudeLinear=(e,...t)=>{const{height:r,twistAngle:n,twistSteps:i}=Object.assign({},{height:1,twistAngle:0,twistSteps:1},e);if(0===(t=flatten(t)).length)throw new Error("wrong number of arguments");e={offset:[0,0,r],twistAngle:n,twistSteps:i};const s=t.map(t=>geom2.isA(t)?extrudeLinearGeom2(e,t):t);return 1===s.length?s[0]:s};module.exports=extrudeLinear;

},{"../../geometries/geom2":22,"../../utils/flatten":374,"./extrudeLinearGeom2":292}],292:[function(require,module,exports){
const mat4=require("../../maths/mat4"),vec3=require("../../maths/vec3"),geom2=require("../../geometries/geom2"),slice=require("./slice"),extrudeFromSlices=require("./extrudeFromSlices"),extrudeGeom2=(e,t)=>{let{offset:r,twistAngle:s,twistSteps:o}=Object.assign({},{offset:[0,0,1],twistAngle:0,twistSteps:12},e);if(o<1)throw new Error("twistSteps must be 1 or more");0===s&&(o=1);const c=vec3.clone(r),i=geom2.toSides(t);if(0===i.length)throw new Error("the given geometry cannot be empty");const m=slice.fromSides(i);c[2]<0&&slice.reverse(m,m);const a=mat4.create();return extrudeFromSlices(e={numberOfSlices:o+1,capStart:!0,capEnd:!0,callback:(e,t,r)=>{const i=t/o*s,m=vec3.scale(vec3.create(),c,t/o);return mat4.multiply(a,mat4.fromZRotation(a,i),mat4.fromTranslation(mat4.create(),m)),slice.transform(a,r)}},m)};module.exports=extrudeGeom2;

},{"../../geometries/geom2":22,"../../maths/mat4":137,"../../maths/vec3":214,"./extrudeFromSlices":290,"./slice":306}],293:[function(require,module,exports){
const flatten=require("../../utils/flatten"),geom2=require("../../geometries/geom2"),path2=require("../../geometries/path2"),extrudeRectangularPath2=require("./extrudeRectangularPath2"),extrudeRectangularGeom2=require("./extrudeRectangularGeom2"),extrudeRectangular=(e,...t)=>{const{size:r,height:a}=Object.assign({},{size:1,height:1},e);if(0===(t=flatten(t)).length)throw new Error("wrong number of arguments");if(r<=0)throw new Error("size must be positive");if(a<=0)throw new Error("height must be positive");const u=t.map(t=>path2.isA(t)?extrudeRectangularPath2(e,t):geom2.isA(t)?extrudeRectangularGeom2(e,t):t);return 1===u.length?u[0]:u};module.exports=extrudeRectangular;

},{"../../geometries/geom2":22,"../../geometries/path2":57,"../../utils/flatten":374,"./extrudeRectangularGeom2":294,"./extrudeRectangularPath2":295}],294:[function(require,module,exports){
const{area:area}=require("../../maths/utils"),geom2=require("../../geometries/geom2"),path2=require("../../geometries/path2"),expand=require("../expansions/expand"),extrudeLinearGeom2=require("./extrudeLinearGeom2"),extrudeRectangularGeom2=(e,r)=>{const{size:t,height:o}=Object.assign({},{size:1,height:1},e);e.delta=t,e.offset=[0,0,o];const a=geom2.toOutlines(r);if(0===a.length)throw new Error("the given geometry cannot be empty");const n=a.map(r=>(area(r)<0&&r.reverse(),expand(e,path2.fromPoints({closed:!0},r)))).reduce((e,r)=>e.concat(geom2.toSides(r)),[]),i=geom2.create(n);return extrudeLinearGeom2(e,i)};module.exports=extrudeRectangularGeom2;

},{"../../geometries/geom2":22,"../../geometries/path2":57,"../../maths/utils":162,"../expansions/expand":279,"./extrudeLinearGeom2":292}],295:[function(require,module,exports){
const path2=require("../../geometries/path2"),expand=require("../expansions/expand"),extrudeLinearGeom2=require("./extrudeLinearGeom2"),extrudeRectangularPath2=(e,t)=>{const{size:r,height:n}=Object.assign({},{size:1,height:1},e);if(e.delta=r,e.offset=[0,0,n],0===path2.toPoints(t).length)throw new Error("the given geometry cannot be empty");const a=expand(e,t);return extrudeLinearGeom2(e,a)};module.exports=extrudeRectangularPath2;

},{"../../geometries/path2":57,"../expansions/expand":279,"./extrudeLinearGeom2":292}],296:[function(require,module,exports){
const mat4=require("../../maths/mat4"),{mirrorX:mirrorX}=require("../transforms/mirror"),geom2=require("../../geometries/geom2"),slice=require("./slice"),extrudeFromSlices=require("./extrudeFromSlices"),extrudeRotate=(e,t)=>{const r={segments:12,startAngle:0,angle:2*Math.PI,overflow:"cap"};let{segments:a,startAngle:o,angle:s,overflow:m}=Object.assign({},r,e);if(a<3)throw new Error("segments must be greater then 3");o=Math.abs(o)>2*Math.PI?o%(2*Math.PI):o,s=Math.abs(s)>2*Math.PI?s%(2*Math.PI):s;let n=o+s;if((n=Math.abs(n)>2*Math.PI?n%(2*Math.PI):n)<o){const e=o;o=n,n=e}let l=n-o;if(l<=0&&(l=2*Math.PI),Math.abs(l)<2*Math.PI){const e=2*Math.PI/a;a=Math.floor(Math.abs(l)/e),Math.abs(l)>a*e&&a++}let h=geom2.toSides(t);if(0===h.length)throw new Error("the given geometry cannot be empty");const i=h.filter(e=>e[0][0]<0),c=h.filter(e=>e[0][0]>=0);i.length>0&&c.length>0&&"cap"===m&&(i.length>c.length?(h=h.map(e=>{let t=e[0],r=e[1];return[t=[Math.min(t[0],0),t[1]],r=[Math.min(r[0],0),r[1]]]}),t=geom2.reverse(geom2.create(h)),t=mirrorX(t)):c.length>=i.length&&(h=h.map(e=>{let t=e[0],r=e[1];return[t=[Math.max(t[0],0),t[1]],r=[Math.max(r[0],0),r[1]]]}),t=geom2.create(h)));const g=l/a,M=Math.abs(l)<2*Math.PI,u=slice.fromSides(geom2.toSides(t));slice.reverse(u,u);const f=mat4.create();return extrudeFromSlices(e={numberOfSlices:a+1,capStart:M,capEnd:M,close:!M,callback:(e,t,r)=>{const a=g*t+o;return mat4.multiply(f,mat4.fromZRotation(f,a),mat4.fromXRotation(mat4.create(),Math.PI/2)),slice.transform(f,r)}},u)};module.exports=extrudeRotate;

},{"../../geometries/geom2":22,"../../maths/mat4":137,"../transforms/mirror":340,"./extrudeFromSlices":290,"./slice":306}],297:[function(require,module,exports){
const{EPS:EPS}=require("../../maths/constants"),vec3=require("../../maths/vec3"),poly3=require("../../geometries/poly3"),slice=require("./slice"),gcd=(e,t)=>e===t?e:e<t?gcd(t,e):1===t?1:0===t?e:gcd(t,e%t),lcm=(e,t)=>e*t/gcd(e,t),repartitionEdges=(e,t)=>{const r=e/t.length;if(1===r)return t;const s=vec3.fromValues(r,r,r),c=[];return t.forEach(e=>{const t=vec3.subtract(vec3.create(),e[1],e[0]);vec3.divide(t,t,s);let o=e[0];for(let e=1;e<=r;++e){const e=vec3.add(vec3.create(),o,t);c.push([o,e]),o=e}}),c},EPSAREA=EPS*EPS/2*Math.sin(Math.PI/3),extrudeWalls=(e,t)=>{let r=slice.toEdges(e),s=slice.toEdges(t);if(r.length!==s.length){const e=lcm(r.length,s.length);e!==r.length&&(r=repartitionEdges(e,r)),e!==s.length&&(s=repartitionEdges(e,s))}const c=[];return r.forEach((e,t)=>{const r=s[t],o=poly3.fromPoints([e[0],e[1],r[1]]),n=poly3.measureArea(o);Number.isFinite(n)&&n>EPSAREA&&c.push(o);const i=poly3.fromPoints([e[0],r[1],r[0]]),l=poly3.measureArea(i);Number.isFinite(l)&&l>EPSAREA&&c.push(i)}),c};module.exports=extrudeWalls;

},{"../../geometries/poly3":73,"../../maths/constants":87,"../../maths/vec3":214,"./slice":306}],298:[function(require,module,exports){
module.exports={extrudeFromSlices:require("./extrudeFromSlices"),extrudeLinear:require("./extrudeLinear"),extrudeRectangular:require("./extrudeRectangular"),extrudeRotate:require("./extrudeRotate"),project:require("./project"),slice:require("./slice")};

},{"./extrudeFromSlices":290,"./extrudeLinear":291,"./extrudeRectangular":293,"./extrudeRotate":296,"./project":299,"./slice":306}],299:[function(require,module,exports){
const flatten=require("../../utils/flatten"),aboutEqualNormals=require("../../maths/utils/aboutEqualNormals"),plane=require("../../maths/plane"),mat4=require("../../maths/mat4"),geom2=require("../../geometries/geom2"),geom3=require("../../geometries/geom3"),poly3=require("../../geometries/poly3"),measureEpsilon=require("../../measurements/measureEpsilon"),unionGeom2=require("../booleans/unionGeom2"),unionGeom3=require("../booleans/unionGeom3"),projectGeom3=(e,o)=>{const r=plane.fromNormalAndPoint(plane.create(),e.axis,e.origin);if(Number.isNaN(r[0])||Number.isNaN(r[1])||Number.isNaN(r[2])||Number.isNaN(r[3]))throw new Error("project: invalid axis or origin");const t=measureEpsilon(o),n=t*t*Math.sqrt(3)/4;if(0===t)return geom2.create();const a=geom3.toPolygons(o),i=[];for(let e=0;e<a.length;e++){const o=a[e].vertices.map(e=>plane.projectionOfPoint(r,e)),t=poly3.create(o);if(poly3.measureArea(t)<n)continue;const s=poly3.plane(t);aboutEqualNormals(r,s)&&i.push(t)}let s=geom3.create(i);if(s=unionGeom3(s,s),!aboutEqualNormals(r,[0,0,1])){const e=mat4.fromVectorRotation(mat4.create(),r,[0,0,1]);s=geom3.transform(e,s)}const m=geom3.toPolygons(s).map(e=>geom2.fromPoints(poly3.toPoints(e)));return s=unionGeom2(m)},project=(e,...o)=>{const{axis:r,origin:t}=Object.assign({},{axis:[0,0,1],origin:[0,0,0]},e);if(0===(o=flatten(o)).length)throw new Error("wrong number of arguments");e={axis:r,origin:t};const n=o.map(o=>geom3.isA(o)?projectGeom3(e,o):o);return 1===n.length?n[0]:n};module.exports=project;

},{"../../geometries/geom2":22,"../../geometries/geom3":36,"../../geometries/poly3":73,"../../maths/mat4":137,"../../maths/plane":155,"../../maths/utils/aboutEqualNormals":159,"../../measurements/measureEpsilon":251,"../../utils/flatten":374,"../booleans/unionGeom2":276,"../booleans/unionGeom3":277}],300:[function(require,module,exports){
const plane=require("../../../maths/plane"),vec3=require("../../../maths/vec3"),calculatePlane=e=>{const c=e.edges;if(c.length<3)throw new Error("slices must have 3 or more edges to calculate a plane");const a=c.reduce((e,c)=>vec3.add(vec3.create(),e,c[0]),vec3.create());let t;vec3.scale(a,a,1/c.length);let l=0;c.forEach(e=>{const c=vec3.squaredDistance(a,e[0]);c>l&&(t=e,l=c)});const r=c.find(e=>vec3.equals(e[1],t[0]));return plane.fromPoints(plane.create(),r[0],t[0],t[1])};module.exports=calculatePlane;

},{"../../../maths/plane":155,"../../../maths/vec3":214}],301:[function(require,module,exports){
const create=require("./create"),vec3=require("../../../maths/vec3"),clone=(...e)=>{let c,r;return 1===e.length?(c=create(),r=e[0]):(c=e[0],r=e[1]),c.edges=r.edges.map(e=>[vec3.clone(e[0]),vec3.clone(e[1])]),c};module.exports=clone;

},{"../../../maths/vec3":214,"./create":302}],302:[function(require,module,exports){
const create=e=>(e||(e=[]),{edges:e});module.exports=create;

},{}],303:[function(require,module,exports){
const vec3=require("../../../maths/vec3"),equals=(e,s)=>{const r=e.edges,t=s.edges;return r.length===t.length&&r.reduce((e,s,r)=>{const u=t[r],c=vec3.squaredDistance(s[0],u[0]);return e&&c<Number.EPSILON},!0)};module.exports=equals;

},{"../../../maths/vec3":214}],304:[function(require,module,exports){
const vec3=require("../../../maths/vec3"),create=require("./create"),fromPoints=e=>{if(!Array.isArray(e))throw new Error("the given points must be an array");if(e.length<3)throw new Error("the given points must contain THREE or more points");const r=[];let t=e[e.length-1];return e.forEach(e=>{2===e.length&&r.push([vec3.fromVec2(vec3.create(),t),vec3.fromVec2(vec3.create(),e)]),3===e.length&&r.push([t,e]),t=e}),create(r)};module.exports=fromPoints;

},{"../../../maths/vec3":214,"./create":302}],305:[function(require,module,exports){
const vec3=require("../../../maths/vec3"),create=require("./create"),fromSides=e=>{if(!Array.isArray(e))throw new Error("the given sides must be an array");const r=[];return e.forEach(e=>{r.push([vec3.fromVec2(vec3.create(),e[0]),vec3.fromVec2(vec3.create(),e[1])])}),create(r)};module.exports=fromSides;

},{"../../../maths/vec3":214,"./create":302}],306:[function(require,module,exports){
module.exports={calculatePlane:require("./calculatePlane"),clone:require("./clone"),create:require("./create"),equals:require("./equals"),fromPoints:require("./fromPoints"),fromSides:require("./fromSides"),isA:require("./isA"),reverse:require("./reverse"),toEdges:require("./toEdges"),toPolygons:require("./toPolygons"),toString:require("./toString"),transform:require("./transform")};

},{"./calculatePlane":300,"./clone":301,"./create":302,"./equals":303,"./fromPoints":304,"./fromSides":305,"./isA":307,"./reverse":308,"./toEdges":309,"./toPolygons":310,"./toString":311,"./transform":312}],307:[function(require,module,exports){
const isA=e=>!!(e&&"object"==typeof e&&"edges"in e&&Array.isArray(e.edges));module.exports=isA;

},{}],308:[function(require,module,exports){
const create=require("./create"),reverse=(...e)=>{let r,t;return 1===e.length?(r=create(),t=e[0]):(r=e[0],t=e[1]),r.edges=t.edges.map(e=>[e[1],e[0]]),r};module.exports=reverse;

},{"./create":302}],309:[function(require,module,exports){
const toEdges=e=>e.edges;module.exports=toEdges;

},{}],310:[function(require,module,exports){
const vec3=require("../../../maths/vec3"),geom3=require("../../../geometries/geom3"),poly3=require("../../../geometries/poly3"),intersectGeom3Sub=require("../../booleans/intersectGeom3Sub"),calculatePlane=require("./calculatePlane"),toPolygon3D=(e,c)=>{const t=[vec3.subtract(vec3.create(),c[0],e),vec3.subtract(vec3.create(),c[1],e),vec3.add(vec3.create(),c[1],e),vec3.add(vec3.create(),c[0],e)];return poly3.fromPoints(t)},toPolygons=e=>{const c=calculatePlane(e),t=e.edges,a=t.reduce((e,c)=>vec3.add(vec3.create(),e,c[0]),vec3.create());vec3.scale(a,a,1/t.length);let o=[[NaN,NaN,NaN],[NaN,NaN,NaN]],r=0;t.forEach(e=>{const c=vec3.squaredDistance(a,e[0]);c>r&&(o=e,r=c)});const s=vec3.subtract(vec3.create(),o[0],a),v=vec3.cross(vec3.create(),c,s),n=vec3.add(vec3.create(),a,s);vec3.add(n,n,s);const l=vec3.add(vec3.create(),a,v);vec3.add(l,l,v);const u=vec3.subtract(vec3.create(),a,s);vec3.subtract(u,u,s);const d=vec3.subtract(vec3.create(),a,v);vec3.subtract(d,d,v);const g=poly3.fromPoints([n,l,u,d]),m=geom3.create([g]),i=t.map(e=>toPolygon3D(c,e)),b=geom3.create(i),N=intersectGeom3Sub(m,b);let P=geom3.toPolygons(N);return P=P.filter(e=>{const t=vec3.angle(c,poly3.plane(e));return Math.abs(t)<Math.PI/90})};module.exports=toPolygons;

},{"../../../geometries/geom3":36,"../../../geometries/poly3":73,"../../../maths/vec3":214,"../../booleans/intersectGeom3Sub":258,"./calculatePlane":300}],311:[function(require,module,exports){
const vec3=require("../../../maths/vec3"),edgesToString=e=>e.reduce((e,t)=>e+=`[${vec3.toString(t[0])}, ${vec3.toString(t[1])}], `,""),toString=e=>`[${edgesToString(e.edges)}]`;module.exports=toString;

},{"../../../maths/vec3":214}],312:[function(require,module,exports){
const vec3=require("../../../maths/vec3"),create=require("./create"),transform=(e,r)=>{const t=r.edges.map(r=>[vec3.transform(vec3.create(),r[0],e),vec3.transform(vec3.create(),r[1],e)]);return create(t)};module.exports=transform;

},{"../../../maths/vec3":214,"./create":302}],313:[function(require,module,exports){
const flatten=require("../../utils/flatten"),areAllShapesTheSameType=require("../../utils/areAllShapesTheSameType"),geom2=require("../../geometries/geom2"),geom3=require("../../geometries/geom3"),path2=require("../../geometries/path2"),hullPath2=require("./hullPath2"),hullGeom2=require("./hullGeom2"),hullGeom3=require("./hullGeom3"),hull=(...e)=>{if(0===(e=flatten(e)).length)throw new Error("wrong number of arguments");if(!areAllShapesTheSameType(e))throw new Error("only hulls of the same type are supported");const l=e[0];return path2.isA(l)?hullPath2(e):geom2.isA(l)?hullGeom2(e):geom3.isA(l)?hullGeom3(e):l};module.exports=hull;

},{"../../geometries/geom2":22,"../../geometries/geom3":36,"../../geometries/path2":57,"../../utils/areAllShapesTheSameType":372,"../../utils/flatten":374,"./hullGeom2":315,"./hullGeom3":316,"./hullPath2":317}],314:[function(require,module,exports){
const flatten=require("../../utils/flatten"),union=require("../booleans/union"),hull=require("./hull"),hullChain=(...n)=>{if((n=flatten(n)).length<2)throw new Error("wrong number of arguments");const e=[];for(let l=1;l<n.length;l++)e.push(hull(n[l-1],n[l]));return union(e)};module.exports=hullChain;

},{"../../utils/flatten":374,"../booleans/union":275,"./hull":313}],315:[function(require,module,exports){
const flatten=require("../../utils/flatten"),geom2=require("../../geometries/geom2"),hullPoints2=require("./hullPoints2"),hullGeom2=(...e)=>{e=flatten(e);const t=[],o=new Map;for(let l=0;l<e.length;l++){const n=geom2.toSides(e[l]);for(let e=0;e<n.length;e++){const l=n[e][0],s=`${l[0]},${l[1]}`;o.has(s)||(t.push(l),o.set(s,!0))}}o.clear();const l=hullPoints2(t);return l.length<3?geom2.create():geom2.fromPoints(l)};module.exports=hullGeom2;

},{"../../geometries/geom2":22,"../../utils/flatten":374,"./hullPoints2":318}],316:[function(require,module,exports){
const flatten=require("../../utils/flatten"),geom3=require("../../geometries/geom3"),poly3=require("../../geometries/poly3"),quickhull=require("./quickhull"),hullGeom3=(...e)=>{if(1===(e=flatten(e)).length)return e[0];const t=[],l=new Map;for(let o=0;o<e.length;++o){const r=geom3.toPolygons(e[o]);for(let e=0;e<r.length;++e){const o=r[e].vertices;for(let e=0;e<o.length;++e){const r=`${o[e]}`;l.has(r)||(t.push(o[e]),l.set(r,!0))}}}l.clear();const o=quickhull(t,{skipTriangulation:!0}).map(e=>{const l=e.map(e=>t[e]);return poly3.create(l)});return geom3.create(o)};module.exports=hullGeom3;

},{"../../geometries/geom3":36,"../../geometries/poly3":73,"../../utils/flatten":374,"./quickhull":326}],317:[function(require,module,exports){
const flatten=require("../../utils/flatten"),vec2=require("../../maths/vec2"),path2=require("../../geometries/path2"),hullPoints2=require("./hullPoints2"),hullPath2=(...t)=>{t=flatten(t);const e=[];t.forEach(t=>{path2.toPoints(t).forEach(t=>{e.findIndex(e=>vec2.equals(e,t))<0&&e.push(t)})});const l=hullPoints2(e);return path2.fromPoints({closed:!0},l)};module.exports=hullPath2;

},{"../../geometries/path2":57,"../../maths/vec2":183,"../../utils/flatten":374,"./hullPoints2":318}],318:[function(require,module,exports){
const vec2=require("../../maths/vec2"),angleBetweenPoints=(e,t)=>Math.atan2(t[1]-e[1],t[0]-e[0]),compareIndex=(e,t)=>e.angle<t.angle?-1:e.angle>t.angle?1:e.distance<t.distance?-1:e.distance>t.distance?1:0,compute=e=>{if(e.length<3)return e;let t=0;e.forEach((n,r)=>{const a=e[t];n[1]===a[1]?n[0]<a[0]&&(t=r):n[1]<a[1]&&(t=r)});const n=[];let r=0,a=0;for(let l=0;l<e.length;l++)l!==t&&((r=angleBetweenPoints(e[t],e[l]))<0&&(r+=Math.PI),a=vec2.squaredDistance(e[t],e[l]),n.push({index:l,angle:r,distance:a}));n.sort((e,t)=>compareIndex(e,t));const l=new Array(e.length+1);let o=2;for(let r=0;r<e.length;r++)r!==t&&(l[o]=n[o-2].index,o++);l[0]=l[e.length],l[1]=t;const s=(t,n,r)=>(e[n][0]-e[t][0])*(e[r][1]-e[t][1])-(e[n][1]-e[t][1])*(e[r][0]-e[t][0]);let c,i=2;for(let t=3;t<=e.length;t++){for(;s(l[i-1],l[i],l[t])<Number.EPSILON;)i--;i++,c=l[t],l[t]=l[i],l[i]=c}const g=new Array(i);for(let e=0;e<i;e++)g[e]=l[e+1];return g},hullPoints2=e=>{const t=compute(e);let n=[];return Array.isArray(t)&&(n=t.map(t=>e[t])),n};module.exports=hullPoints2;

},{"../../maths/vec2":183}],319:[function(require,module,exports){
module.exports={hull:require("./hull"),hullChain:require("./hullChain")};

},{"./hull":313,"./hullChain":314}],320:[function(require,module,exports){
const add=require("../../../maths/vec3/add"),copy=require("../../../maths/vec3/copy"),cross=require("../../../maths/vec3/cross"),dot=require("../../../maths/vec3/dot"),length=require("../../../maths/vec3/length"),normalize=require("../../../maths/vec3/normalize"),scale=require("../../../maths/vec3/scale"),subtract=require("../../../maths/vec3/subtract"),HalfEdge=require("./HalfEdge"),VISIBLE=0,NON_CONVEX=1,DELETED=2;class Face{constructor(){this.normal=[],this.centroid=[],this.offset=0,this.outside=null,this.mark=VISIBLE,this.edge=null,this.nVertices=0}getEdge(e){if("number"!=typeof e)throw Error("requires a number");let t=this.edge;for(;e>0;)t=t.next,e-=1;for(;e<0;)t=t.prev,e+=1;return t}computeNormal(){const e=this.edge,t=e.next;let r=t.next;const s=subtract([],t.head().point,e.head().point),o=[],i=[];for(this.nVertices=2,this.normal=[0,0,0];r!==e;)copy(i,s),subtract(s,r.head().point,e.head().point),add(this.normal,this.normal,cross(o,i,s)),r=r.next,this.nVertices+=1;this.area=length(this.normal),this.normal=scale(this.normal,this.normal,1/this.area)}computeNormalMinArea(e){if(this.computeNormal(),this.area<e){let e,t=0,r=this.edge;do{const s=r.lengthSquared();s>t&&(e=r,t=s),r=r.next}while(r!==this.edge);const s=e.tail().point,o=e.head().point,i=subtract([],o,s),n=Math.sqrt(t);scale(i,i,1/n);const a=dot(this.normal,i);scale(i,i,-a),add(this.normal,this.normal,i),normalize(this.normal,this.normal)}}computeCentroid(){this.centroid=[0,0,0];let e=this.edge;do{add(this.centroid,this.centroid,e.head().point),e=e.next}while(e!==this.edge);scale(this.centroid,this.centroid,1/this.nVertices)}computeNormalAndCentroid(e){void 0!==e?this.computeNormalMinArea(e):this.computeNormal(),this.computeCentroid(),this.offset=dot(this.normal,this.centroid)}distanceToPlane(e){return dot(this.normal,e)-this.offset}connectHalfEdges(e,t){let r;if(e.opposite.face===t.opposite.face){const s=t.opposite.face;let o;e===this.edge&&(this.edge=t),3===s.nVertices?(o=t.opposite.prev.opposite,s.mark=DELETED,r=s):(o=t.opposite.next,s.edge===o.prev&&(s.edge=o),o.prev=o.prev.prev,o.prev.next=o),t.prev=e.prev,t.prev.next=t,t.setOpposite(o),s.computeNormalAndCentroid()}else e.next=t,t.prev=e;return r}mergeAdjacentFaces(e,t){const r=e.opposite,s=r.face;t.push(s),s.mark=DELETED;let o,i,n=e.prev,a=e.next,c=r.prev,h=r.next;for(;n.opposite.face===s;)n=n.prev,h=h.next;for(;a.opposite.face===s;)a=a.next,c=c.prev;for(o=h;o!==c.next;o=o.next)o.face=this;return this.edge=a,(i=this.connectHalfEdges(c,a))&&t.push(i),(i=this.connectHalfEdges(n,h))&&t.push(i),this.computeNormalAndCentroid(),t}collectIndices(){const e=[];let t=this.edge;do{e.push(t.head().index),t=t.next}while(t!==this.edge);return e}static createTriangle(e,t,r,s=0){const o=new Face,i=new HalfEdge(e,o),n=new HalfEdge(t,o),a=new HalfEdge(r,o);return i.next=a.prev=n,n.next=i.prev=a,a.next=n.prev=i,o.edge=i,o.computeNormalAndCentroid(s),o}}module.exports={VISIBLE:VISIBLE,NON_CONVEX:1,DELETED:DELETED,Face:Face};

},{"../../../maths/vec3/add":201,"../../../maths/vec3/copy":204,"../../../maths/vec3/cross":206,"../../../maths/vec3/dot":209,"../../../maths/vec3/length":215,"../../../maths/vec3/normalize":221,"../../../maths/vec3/scale":226,"../../../maths/vec3/subtract":230,"./HalfEdge":321}],321:[function(require,module,exports){
const distance=require("../../../maths/vec3/distance"),squaredDistance=require("../../../maths/vec3/squaredDistance");class HalfEdge{constructor(t,e){this.vertex=t,this.face=e,this.next=null,this.prev=null,this.opposite=null}head(){return this.vertex}tail(){return this.prev?this.prev.vertex:null}length(){return this.tail()?distance(this.tail().point,this.head().point):-1}lengthSquared(){return this.tail()?squaredDistance(this.tail().point,this.head().point):-1}setOpposite(t){this.opposite=t,t.opposite=this}}module.exports=HalfEdge;

},{"../../../maths/vec3/distance":207,"../../../maths/vec3/squaredDistance":228}],322:[function(require,module,exports){
const dot=require("../../../maths/vec3/dot"),pointLineDistance=require("./point-line-distance"),getPlaneNormal=require("./get-plane-normal"),VertexList=require("./VertexList"),Vertex=require("./Vertex"),{Face:Face,VISIBLE:VISIBLE,NON_CONVEX:NON_CONVEX,DELETED:DELETED}=require("./Face"),MERGE_NON_CONVEX_WRT_LARGER_FACE=1,MERGE_NON_CONVEX=2;class QuickHull{constructor(e){if(!Array.isArray(e))throw TypeError("input is not a valid array");if(e.length<4)throw Error("cannot build a simplex out of <4 points");this.tolerance=-1,this.nFaces=0,this.nPoints=e.length,this.faces=[],this.newFaces=[],this.claimed=new VertexList,this.unclaimed=new VertexList,this.vertices=[];for(let t=0;t<e.length;t+=1)this.vertices.push(new Vertex(e[t],t));this.discardedFaces=[],this.vertexPointIndices=[]}addVertexToFace(e,t){e.face=t,t.outside?this.claimed.insertBefore(t.outside,e):this.claimed.add(e),t.outside=e}removeVertexFromFace(e,t){e===t.outside&&(e.next&&e.next.face===t?t.outside=e.next:t.outside=null),this.claimed.remove(e)}removeAllVerticesFromFace(e){if(e.outside){let t=e.outside;for(;t.next&&t.next.face===e;)t=t.next;return this.claimed.removeChain(e.outside,t),t.next=null,e.outside}}deleteFaceVertices(e,t){const i=this.removeAllVerticesFromFace(e);if(i)if(t){let e;for(let s=i;s;s=e){e=s.next,t.distanceToPlane(s.point)>this.tolerance?this.addVertexToFace(s,t):this.unclaimed.add(s)}}else this.unclaimed.addAll(i)}resolveUnclaimedPoints(e){let t=this.unclaimed.first();for(let i=t;i;i=t){t=i.next;let s,o=this.tolerance;for(let t=0;t<e.length;t+=1){const a=e[t];if(a.mark===VISIBLE){const e=a.distanceToPlane(i.point);if(e>o&&(o=e,s=a),o>1e3*this.tolerance)break}}s&&this.addVertexToFace(i,s)}}computeExtremes(){const e=[],t=[],i=[],s=[];let o,a;for(o=0;o<3;o+=1)i[o]=s[o]=this.vertices[0];for(o=0;o<3;o+=1)e[o]=t[o]=this.vertices[0].point[o];for(o=1;o<this.vertices.length;o+=1){const c=this.vertices[o],n=c.point;for(a=0;a<3;a+=1)n[a]<e[a]&&(e[a]=n[a],i[a]=c);for(a=0;a<3;a+=1)n[a]>t[a]&&(t[a]=n[a],s[a]=c)}return this.tolerance=3*Number.EPSILON*(Math.max(Math.abs(e[0]),Math.abs(t[0]))+Math.max(Math.abs(e[1]),Math.abs(t[1]))+Math.max(Math.abs(e[2]),Math.abs(t[2]))),[i,s]}createInitialSimplex(){const e=this.vertices,[t,i]=this.computeExtremes();let s,o,a,c,n=0,r=0;for(a=0;a<3;a+=1){const e=i[a].point[a]-t[a].point[a];e>n&&(n=e,r=a)}const l=t[r],h=i[r];for(n=0,a=0;a<this.vertices.length;a+=1){const e=this.vertices[a];if(e!==l&&e!==h){const t=pointLineDistance(e.point,l.point,h.point);t>n&&(n=t,s=e)}}const d=getPlaneNormal([],l.point,h.point,s.point),p=dot(l.point,d);for(n=-1,a=0;a<this.vertices.length;a+=1){const e=this.vertices[a];if(e!==l&&e!==h&&e!==s){const t=Math.abs(dot(d,e.point)-p);t>n&&(n=t,o=e)}}const f=[];if(dot(o.point,d)-p<0)for(f.push(Face.createTriangle(l,h,s),Face.createTriangle(o,h,l),Face.createTriangle(o,s,h),Face.createTriangle(o,l,s)),a=0;a<3;a+=1){const e=(a+1)%3;f[a+1].getEdge(2).setOpposite(f[0].getEdge(e)),f[a+1].getEdge(1).setOpposite(f[e+1].getEdge(0))}else for(f.push(Face.createTriangle(l,s,h),Face.createTriangle(o,l,h),Face.createTriangle(o,h,s),Face.createTriangle(o,s,l)),a=0;a<3;a+=1){const e=(a+1)%3;f[a+1].getEdge(2).setOpposite(f[0].getEdge((3-a)%3)),f[a+1].getEdge(0).setOpposite(f[e+1].getEdge(1))}for(a=0;a<4;a+=1)this.faces.push(f[a]);for(a=0;a<e.length;a+=1){const t=e[a];if(t!==l&&t!==h&&t!==s&&t!==o){let e;for(n=this.tolerance,c=0;c<4;c+=1){const i=f[c].distanceToPlane(t.point);i>n&&(n=i,e=f[c])}e&&this.addVertexToFace(t,e)}}}reindexFaceAndVertices(){const e=[];for(let t=0;t<this.faces.length;t+=1){const i=this.faces[t];i.mark===VISIBLE&&e.push(i)}this.faces=e}collectFaces(e){const t=[];for(let i=0;i<this.faces.length;i+=1){if(this.faces[i].mark!==VISIBLE)throw Error("attempt to include a destroyed face in the hull");const s=this.faces[i].collectIndices();if(e)t.push(s);else for(let e=0;e<s.length-2;e+=1)t.push([s[0],s[e+1],s[e+2]])}return t}nextVertexToAdd(){if(!this.claimed.isEmpty()){let e,t,i=0;const s=this.claimed.first().face;for(t=s.outside;t&&t.face===s;t=t.next){const o=s.distanceToPlane(t.point);o>i&&(i=o,e=t)}return e}}computeHorizon(e,t,i,s){let o;this.deleteFaceVertices(i),i.mark=DELETED,o=t?t.next:t=i.getEdge(0);do{const t=o.opposite,i=t.face;i.mark===VISIBLE&&(i.distanceToPlane(e)>this.tolerance?this.computeHorizon(e,t,i,s):s.push(o)),o=o.next}while(o!==t)}addAdjoiningFace(e,t){const i=Face.createTriangle(e,t.tail(),t.head());return this.faces.push(i),i.getEdge(-1).setOpposite(t.opposite),i.getEdge(0)}addNewFaces(e,t){let i,s;this.newFaces=[];for(let o=0;o<t.length;o+=1){const a=t[o],c=this.addAdjoiningFace(e,a);i?c.next.setOpposite(s):i=c,this.newFaces.push(c.face),s=c}i.next.setOpposite(s)}oppositeFaceDistance(e){return e.face.distanceToPlane(e.opposite.face.centroid)}doAdjacentMerge(e,t){let i=e.edge,s=!0,o=0;do{if(o>=e.nVertices)throw Error("merge recursion limit exceeded");const a=i.opposite.face;let c=!1;if(t===MERGE_NON_CONVEX?(this.oppositeFaceDistance(i)>-this.tolerance||this.oppositeFaceDistance(i.opposite)>-this.tolerance)&&(c=!0):e.area>a.area?this.oppositeFaceDistance(i)>-this.tolerance?c=!0:this.oppositeFaceDistance(i.opposite)>-this.tolerance&&(s=!1):this.oppositeFaceDistance(i.opposite)>-this.tolerance?c=!0:this.oppositeFaceDistance(i)>-this.tolerance&&(s=!1),c){const t=e.mergeAdjacentFaces(i,[]);for(let i=0;i<t.length;i+=1)this.deleteFaceVertices(t[i],e);return!0}i=i.next,o+=1}while(i!==e.edge);return s||(e.mark=NON_CONVEX),!1}addVertexToHull(e){const t=[];this.unclaimed.clear(),this.removeVertexFromFace(e,e.face),this.computeHorizon(e.point,null,e.face,t),this.addNewFaces(e,t);for(let e=0;e<this.newFaces.length;e+=1){const t=this.newFaces[e];if(t.mark===VISIBLE)for(;this.doAdjacentMerge(t,MERGE_NON_CONVEX_WRT_LARGER_FACE););}for(let e=0;e<this.newFaces.length;e+=1){const t=this.newFaces[e];if(t.mark===NON_CONVEX)for(t.mark=VISIBLE;this.doAdjacentMerge(t,MERGE_NON_CONVEX););}this.resolveUnclaimedPoints(this.newFaces)}build(){let e;for(this.createInitialSimplex();e=this.nextVertexToAdd();)this.addVertexToHull(e);this.reindexFaceAndVertices()}}module.exports=QuickHull;

},{"../../../maths/vec3/dot":209,"./Face":320,"./Vertex":323,"./VertexList":324,"./get-plane-normal":325,"./point-line-distance":327}],323:[function(require,module,exports){
class Vertex{constructor(t,e){this.point=t,this.index=e,this.next=null,this.prev=null,this.face=null}}module.exports=Vertex;

},{}],324:[function(require,module,exports){
class VertexList{constructor(){this.head=null,this.tail=null}clear(){this.head=this.tail=null}insertBefore(e,t){t.prev=e.prev,t.next=e,t.prev?t.prev.next=t:this.head=t,e.prev=t}insertAfter(e,t){t.prev=e,t.next=e.next,t.next?t.next.prev=t:this.tail=t,e.next=t}add(e){this.head?this.tail.next=e:this.head=e,e.prev=this.tail,e.next=null,this.tail=e}addAll(e){for(this.head?this.tail.next=e:this.head=e,e.prev=this.tail;e.next;)e=e.next;this.tail=e}remove(e){e.prev?e.prev.next=e.next:this.head=e.next,e.next?e.next.prev=e.prev:this.tail=e.prev}removeChain(e,t){e.prev?e.prev.next=t.next:this.head=t.next,t.next?t.next.prev=e.prev:this.tail=e.prev}first(){return this.head}isEmpty(){return!this.head}}module.exports=VertexList;

},{}],325:[function(require,module,exports){
const cross=require("../../../maths/vec3/cross"),normalize=require("../../../maths/vec3/normalize"),subtract=require("../../../maths/vec3/subtract"),planeNormal=(r,e,s,t)=>{const a=[0,0,0];return subtract(r,e,s),subtract(a,s,t),cross(r,r,a),normalize(r,r)};module.exports=planeNormal;

},{"../../../maths/vec3/cross":206,"../../../maths/vec3/normalize":221,"../../../maths/vec3/subtract":230}],326:[function(require,module,exports){
const QuickHull=require("./QuickHull"),runner=(u,l={})=>{const e=new QuickHull(u);return e.build(),e.collectFaces(l.skipTriangulation)};module.exports=runner;

},{"./QuickHull":322}],327:[function(require,module,exports){
const cross=require("../../../maths/vec3/cross"),subtract=require("../../../maths/vec3/subtract"),squaredLength=require("../../../maths/vec3/squaredLength"),distanceSquared=(e,t,r)=>{const s=[],a=[];subtract(s,r,t),subtract(a,e,t);const n=squaredLength(cross([],a,s)),c=squaredLength(s);if(0===c)throw Error("a and b are the same point");return n/c},pointLineDistance=(e,t,r)=>Math.sqrt(distanceSquared(e,t,r));module.exports=pointLineDistance;

},{"../../../maths/vec3/cross":206,"../../../maths/vec3/squaredLength":229,"../../../maths/vec3/subtract":230}],328:[function(require,module,exports){
const vec3=require("../../maths/vec3"),line3=require("../../maths/line3"),poly3=require("../../geometries/poly3"),addEdge=(e,o,s)=>{const n=e.findIndex(e=>{if(e){if(vec3.equals(e[0],o[0])&&vec3.equals(e[1],o[1]))return!0;if(vec3.equals(e[0],o[1])&&vec3.equals(e[1],o[0]))return!0}return!1});n>=0?(o=e[n]).polygons.push(s):(o.polygons=[s],e.push(o))},removeEdge=(e,o)=>{const s=e.findIndex(e=>{if(e){if(vec3.equals(e[0],o[0])&&vec3.equals(e[1],o[1]))return!0;if(vec3.equals(e[0],o[1])&&vec3.equals(e[1],o[0]))return!0}return!1});s>=0&&(e[s].polygons=[],e[s]=null)},addPolygon=(e,o)=>{const s=o.vertices,n=s.length;let l=[s[n-1],s[0]];addEdge(e,l,o);for(let t=0;t<n-1;t++)l=[s[t],s[t+1]],addEdge(e,l,o)},removePolygons=(e,o)=>{o.polygons.forEach(o=>{const s=o.vertices,n=s.length;let l=[s[n-1],s[0]];removeEdge(e,l);for(let o=0;o<n-1;o++)l=[s[o],s[o+1]],removeEdge(e,l)})},splitPolygon=(e,o,s)=>{const n=o.vertices,l=n.findIndex(o=>almostEquals(s,o,e[0])),t=poly3.fromPoints([n[(l+0)%3],n[(l+1)%3],e[1]]),r=poly3.fromPoints([e[1],n[(l+1)%3],n[(l+2)%3]]);return o.color&&(t.color=o.color,r.color=o.color),[t,r]},almostEquals=(e,o,s)=>Math.abs(o[0]-s[0])<=e&&Math.abs(o[1]-s[1])<=e&&Math.abs(o[2]-s[2])<=e,enclosedEdge=(e,o,s)=>{if(e.distance<o.distance&&vec3.equals(e[0],o[1])){const n=vec3.squaredDistance(e[0],o[0]),l=vec3.squaredDistance(e[1],o[0]),t=vec3.squaredDistance(e[0],o[1]),r=vec3.squaredDistance(e[1],o[1]);if(n<=o.distance&&l<o.distance&&t<o.distance&&r<o.distance){const n=line3.fromPoints(o[0],o[1]),l=vec3.snap(vec3.create(),s,line3.closestPoint(e[0],n)),t=vec3.snap(vec3.create(),s,line3.closestPoint(e[1],n));if(almostEquals(s,l,e[0])&&almostEquals(s,t,e[1]))return!0}}return!1},splitEdge=(e,o,s)=>{for(let n=0;n<e.length;n++){const l=e[n];if(l&&enclosedEdge(l,o,s)){const e=o.polygons[0];return splitPolygon(l,e,s)}}return null},cullOpenEdges=e=>{const o=[];return e.forEach((e,s)=>{1===e.polygons.length&&(e.distance=vec3.squaredDistance(e[0],e[1]),o.push(e))}),o},edgesToPolygons=e=>{const o=[];return e.forEach(e=>{e&&e.polygons&&e.polygons.forEach(e=>{e.visited||(e.visited=!0,o.push(e))})}),o},polygonsToEdges=e=>{const o=[];return e.forEach(e=>{addPolygon(o,e)}),o};module.exports={polygonsToEdges:polygonsToEdges,edgesToPolygons:edgesToPolygons,cullOpenEdges:cullOpenEdges,splitEdge:splitEdge,removePolygons:removePolygons,addPolygon:addPolygon};

},{"../../geometries/poly3":73,"../../maths/line3":115,"../../maths/vec3":214}],329:[function(require,module,exports){
const flatten=require("../../utils/flatten"),measureEpsilon=require("../../measurements/measureEpsilon"),geom2=require("../../geometries/geom2"),geom3=require("../../geometries/geom3"),path2=require("../../geometries/path2"),snapPolygons=require("./snapPolygons"),mergePolygons=require("./mergePolygons"),insertTjunctions=require("./insertTjunctions"),triangulatePolygons=require("./triangulatePolygons"),repairTjunctions=require("./repairTjunctions"),generalizePath2=(e,r)=>r,generalizeGeom2=(e,r)=>r,generalizeGeom3=(e,r)=>{const{snap:n,simplify:i,triangulate:o,repair:t}=Object.assign({},{snap:!1,simplify:!1,triangulate:!1,repair:!1},e),s=measureEpsilon(r);let a=geom3.toPolygons(r);n&&(a=snapPolygons(s,a)),i&&(a=mergePolygons(s,a)),o&&(a=insertTjunctions(a),a=triangulatePolygons(s,a)),t&&(a=repairTjunctions(s,a));const g=Object.assign({},r);return g.polygons=a,g},generalize=(e,...r)=>{if(0===(r=flatten(r)).length)throw new Error("wrong number of arguments");const n=r.map((r,n)=>{if(path2.isA(r))return generalizePath2(0,r);if(geom2.isA(r))return generalizeGeom2(0,r);if(geom3.isA(r))return generalizeGeom3(e,r);throw new Error("invalid geometry")});return 1===n.length?n[0]:n};module.exports=generalize;

},{"../../geometries/geom2":22,"../../geometries/geom3":36,"../../geometries/path2":57,"../../measurements/measureEpsilon":251,"../../utils/flatten":374,"./insertTjunctions":331,"./mergePolygons":332,"./repairTjunctions":333,"./snapPolygons":335,"./triangulatePolygons":336}],330:[function(require,module,exports){
module.exports={generalize:require("./generalize"),snap:require("./snap")};

},{"./generalize":329,"./snap":334}],331:[function(require,module,exports){
const constants=require("../../maths/constants"),vec3=require("../../maths/vec3"),poly3=require("../../geometries/poly3"),assert=!1,getTag=e=>`${e}`,addSide=(e,t,n,s,r,c)=>{const o=getTag(s),l=getTag(r);const i=`${o}/${l}`,g=`${l}/${o}`;if(e.has(g))return deleteSide(e,t,n,r,s,null),null;const a={vertex0:s,vertex1:r,polygonindex:c};return e.has(i)?e.get(i).push(a):e.set(i,[a]),o in t?t[o].push(i):t[o]=[i],l in n?n[l].push(i):n[l]=[i],i},deleteSide=(e,t,n,s,r,c)=>{const o=getTag(s),l=getTag(r),i=`${o}/${l}`;let g=-1;const a=e.get(i);for(let e=0;e<a.length;e++){const t=a[e];let n=getTag(t.vertex0);if(n===o&&((n=getTag(t.vertex1))===l&&(null===c||t.polygonindex===c))){g=e;break}}a.splice(g,1),0===a.length&&e.delete(i),g=t[o].indexOf(i),t[o].splice(g,1),0===t[o].length&&delete t[o],g=n[l].indexOf(i),n[l].splice(g,1),0===n[l].length&&delete n[l]},insertTjunctions=e=>{const t=new Map;for(let n=0;n<e.length;n++){const s=e[n],r=s.vertices.length;if(r>=3){let e=s.vertices[0],c=getTag(e);for(let o=0;o<r;o++){let l=o+1;l===r&&(l=0);const i=s.vertices[l],g=getTag(i),a=`${c}/${g}`,v=`${g}/${c}`;if(t.has(v)){const e=t.get(v);e.splice(-1,1),0===e.length&&t.delete(v)}else{const s={vertex0:e,vertex1:i,polygonindex:n};t.has(a)?t.get(a).push(s):t.set(a,[s])}e=i,c=g}}else console.warn("warning: invalid polygon found during insertTjunctions")}if(t.size>0){const n={},s={},r={};for(const[e,c]of t)r[e]=!0,c.forEach(t=>{const r=getTag(t.vertex0),c=getTag(t.vertex1);r in n?n[r].push(e):n[r]=[e],c in s?s[c].push(e):s[c]=[e]});const c=e.slice(0);for(;0!==t.size;){for(const e of t.keys())r[e]=!0;let e=!1;for(;;){const o=Object.keys(r);if(0===o.length)break;const l=o[0];let i=!0;if(t.has(l)){const o=t.get(l);0;const g=o[0];for(let o=0;o<2;o++){const l=0===o?g.vertex0:g.vertex1,a=0===o?g.vertex1:g.vertex0,v=getTag(l),d=getTag(a);let f=[];0===o?v in s&&(f=s[v]):v in n&&(f=n[v]);for(let g=0;g<f.length;g++){const v=f[g],u=t.get(v)[0],x=0===o?u.vertex0:u.vertex1,h=0===o?u.vertex1:u.vertex0,p=getTag(x);getTag(h);if(p===d){deleteSide(t,n,s,l,a,null),deleteSide(t,n,s,a,l,null),i=!1,o=2,e=!0;break}{const g=l,v=a,d=x,f=vec3.subtract(vec3.create(),d,g),h=vec3.dot(vec3.subtract(vec3.create(),v,g),f)/vec3.dot(f,f);if(h>0&&h<1){const l=vec3.scale(vec3.create(),f,h);if(vec3.add(l,l,g),vec3.squaredDistance(l,v)<constants.EPS*constants.EPS){const l=u.polygonindex,g=c[l],v=getTag(u.vertex1);let d=-1;for(let e=0;e<g.vertices.length;e++)if(getTag(g.vertices[e])===v){d=e;break}0;const f=g.vertices.slice(0);f.splice(d,0,a);const x=poly3.fromPoints(f);c[l]=x,deleteSide(t,n,s,u.vertex0,u.vertex1,l);const h=addSide(t,n,s,u.vertex0,a,l),p=addSide(t,n,s,a,u.vertex1,l);null!==h&&(r[h]=!0),null!==p&&(r[p]=!0),i=!1,o=2,e=!0;break}}}}}}i&&delete r[l]}if(!e)break}e=c}return t.clear(),e};module.exports=insertTjunctions;

},{"../../geometries/poly3":73,"../../maths/constants":87,"../../maths/vec3":214}],332:[function(require,module,exports){
const vec3=require("../../maths/vec3"),poly3=require("../../geometries/poly3"),createEdges=e=>{const n=poly3.toPoints(e),t=[];for(let e=0;e<n.length;e++){const l=(e+1)%n.length,r={v1:n[e],v2:n[l]};t.push(r)}for(let e=0;e<t.length;e++){const l=(e+1)%n.length;t[e].next=t[l],t[l].prev=t[e]}return t},insertEdge=(e,n)=>{const t=`${n.v1}:${n.v2}`;e.set(t,n)},deleteEdge=(e,n)=>{const t=`${n.v1}:${n.v2}`;e.delete(t)},findOppositeEdge=(e,n)=>{const t=`${n.v2}:${n.v1}`;return e.get(t)},calculateAnglesBetween=(e,n,t)=>{let l=e.prev.v1,r=e.prev.v2,o=n.next.v2;const s=calculateAngle(l,r,o,t);return l=n.prev.v1,r=n.prev.v2,o=e.next.v2,[s,calculateAngle(l,r,o,t)]},calculateAngle=(e,n,t,l)=>{const r=vec3.subtract(vec3.create(),n,e),o=vec3.subtract(vec3.create(),t,n);return vec3.cross(r,r,o),vec3.dot(r,l)},createPolygonAnd=e=>{let n;const t=[];for(;e.next;){const n=e.next;t.push(e.v1),e.v1=null,e.v2=null,e.next=null,e.prev=null,e=n}return t.length>0&&(n=poly3.fromPoints(t)),n},mergeCoplanarPolygons=(e,n)=>{if(n.length<2)return n;const t=n[0].plane,l=n.slice(),r=new Map;for(;l.length>0;){const e=l.shift(),n=createEdges(e);for(let e=0;e<n.length;e++){const l=n[e],o=findOppositeEdge(r,l);if(o){const e=calculateAnglesBetween(l,o,t);if(e[0]>=0&&e[1]>=0){const n=o.next,t=l.next;l.prev.next=o.next,l.next.prev=o.prev,o.prev.next=l.next,o.next.prev=l.prev,l.v1=null,l.v2=null,l.next=null,l.prev=null,deleteEdge(r,o),o.v1=null,o.v2=null,o.next=null,o.prev=null;const s=(e,n,t)=>{const l={v1:t.v1,v2:n.v2,next:n.next,prev:t.prev};t.prev.next=l,n.next.prev=l,deleteEdge(e,n),n.v1=null,n.v2=null,n.next=null,n.prev=null,deleteEdge(e,t),t.v1=null,t.v2=null,t.next=null,t.prev=null};0===e[0]&&s(r,n,n.prev),0===e[1]&&s(r,t,t.prev)}}else l.next&&insertEdge(r,l)}}const o=[];return r.forEach(e=>{const n=createPolygonAnd(e);n&&o.push(n)}),o},NEPS=1e-13,aboutEqualNormals=(e,n)=>Math.abs(e[0]-n[0])<=NEPS&&Math.abs(e[1]-n[1])<=NEPS&&Math.abs(e[2]-n[2])<=NEPS,coplanar=(e,n)=>Math.abs(e[3]-n[3])<1.5e-7&&aboutEqualNormals(e,n),mergePolygons=(e,n)=>{const t=[];n.forEach(e=>{const n=t.find(n=>coplanar(n[0],poly3.plane(e)));if(n){n[1].push(e)}else t.push([poly3.plane(e),[e]])});let l=[];return t.forEach(e=>{const n=e[1],t=mergeCoplanarPolygons(0,n);l=l.concat(t)}),l};module.exports=mergePolygons;

},{"../../geometries/poly3":73,"../../maths/vec3":214}],333:[function(require,module,exports){
const{polygonsToEdges:polygonsToEdges,edgesToPolygons:edgesToPolygons,cullOpenEdges:cullOpenEdges,splitEdge:splitEdge,removePolygons:removePolygons,addPolygon:addPolygon}=require("./edges"),repairTjunctions=(o,e)=>{const l=polygonsToEdges(e);let n=cullOpenEdges(l);if(0===n.length)return e;let g=!0;for(;g;){let e=0;for(let g=0;g<n.length;g++){const s=n[g];if(s&&s.polygons&&1===s.polygons.length){const d=splitEdge(n,s,o);if(d){n[g]=null,addPolygon(n,d[0]),addPolygon(n,d[1]),removePolygons(l,s),addPolygon(l,d[0]),addPolygon(l,d[1]),e++;break}}}g=e>0}return(n=n.filter(o=>o&&o.polygons&&1===o.polygons.length)).length>0&&console.warn("Repair of all T-junctions failed:",n.length),e=edgesToPolygons(l)};module.exports=repairTjunctions;

},{"./edges":328}],334:[function(require,module,exports){
const flatten=require("../../utils/flatten"),vec2=require("../../maths/vec2"),geom2=require("../../geometries/geom2"),geom3=require("../../geometries/geom3"),path2=require("../../geometries/path2"),measureEpsilon=require("../../measurements/measureEpsilon"),snapPolygons=require("./snapPolygons"),snapPath2=e=>{const s=measureEpsilon(e),r=path2.toPoints(e).map(e=>vec2.snap(vec2.create(),e,s));return path2.create(r)},snapGeom2=e=>{const s=measureEpsilon(e);let r=geom2.toSides(e).map(e=>[vec2.snap(vec2.create(),e[0],s),vec2.snap(vec2.create(),e[1],s)]);return r=r.filter(e=>!vec2.equals(e[0],e[1])),geom2.create(r)},snapGeom3=e=>{const s=measureEpsilon(e),r=geom3.toPolygons(e),o=snapPolygons(s,r);return geom3.create(o)},snap=(...e)=>{if(0===(e=flatten(e)).length)throw new Error("wrong number of arguments");const s=e.map(e=>path2.isA(e)?snapPath2(e):geom2.isA(e)?snapGeom2(e):geom3.isA(e)?snapGeom3(e):e);return 1===s.length?s[0]:s};module.exports=snap;

},{"../../geometries/geom2":22,"../../geometries/geom3":36,"../../geometries/path2":57,"../../maths/vec2":183,"../../measurements/measureEpsilon":251,"../../utils/flatten":374,"./snapPolygons":335}],335:[function(require,module,exports){
const vec3=require("../../maths/vec3"),poly3=require("../../geometries/poly3"),isValidPoly3=(e,o)=>{const r=poly3.measureArea(o);return Number.isFinite(r)&&r>e},snapPolygons=(e,o)=>{let r=o.map(o=>{const r=o.vertices.map(o=>vec3.snap(vec3.create(),o,e)),t=[];for(let e=0;e<r.length;e++){const o=(e+1)%r.length;vec3.equals(r[e],r[o])||t.push(r[e])}const s=poly3.create(t);return o.color&&(s.color=o.color),s});const t=e*e*Math.sqrt(3)/4;return r=r.filter(e=>isValidPoly3(t,e))};module.exports=snapPolygons;

},{"../../geometries/poly3":73,"../../maths/vec3":214}],336:[function(require,module,exports){
const vec3=require("../../maths/vec3"),poly3=require("../../geometries/poly3"),triangulatePolygon=(o,e,r)=>{const t=e.vertices.length;if(t>3){if(t>4){const c=[0,0,0];e.vertices.forEach(o=>vec3.add(c,c,o)),vec3.snap(c,vec3.divide(c,c,[t,t,t]),o);for(let o=0;o<t;o++){const s=poly3.fromPoints([c,e.vertices[o],e.vertices[(o+1)%t]]);e.color&&(s.color=e.color),r.push(s)}return}const c=poly3.fromPoints([e.vertices[0],e.vertices[1],e.vertices[2]]),s=poly3.fromPoints([e.vertices[0],e.vertices[2],e.vertices[3]]);return e.color&&(c.color=e.color,s.color=e.color),void r.push(c,s)}r.push(e)},triangulatePolygons=(o,e)=>{const r=[];return e.forEach(e=>{triangulatePolygon(o,e,r)}),r};module.exports=triangulatePolygons;

},{"../../geometries/poly3":73,"../../maths/vec3":214}],337:[function(require,module,exports){
const flatten=require("../../utils/flatten"),padArrayToLength=require("../../utils/padArrayToLength"),measureAggregateBoundingBox=require("../../measurements/measureAggregateBoundingBox"),{translate:translate}=require("./translate"),validateOptions=e=>{if(!Array.isArray(e.modes)||e.modes.length>3)throw new Error("align(): modes must be an array of length <= 3");if(e.modes=padArrayToLength(e.modes,"none",3),3!==e.modes.filter(e=>["center","max","min","none"].includes(e)).length)throw new Error('align(): all modes must be one of "center", "max" or "min"');if(!Array.isArray(e.relativeTo)||e.relativeTo.length>3)throw new Error("align(): relativeTo must be an array of length <= 3");if(e.relativeTo=padArrayToLength(e.relativeTo,0,3),3!==e.relativeTo.filter(e=>Number.isFinite(e)||null==e).length)throw new Error("align(): all relativeTo values must be a number, or null.");if("boolean"!=typeof e.grouped)throw new Error("align(): grouped must be a boolean value.");return e},populateRelativeToFromBounds=(e,r,t)=>{for(let n=0;n<3;n++)null==e[n]&&("center"===r[n]?e[n]=(t[0][n]+t[1][n])/2:"max"===r[n]?e[n]=t[1][n]:"min"===r[n]&&(e[n]=t[0][n]));return e},alignGeometries=(e,r,t)=>{const n=measureAggregateBoundingBox(e),o=[0,0,0];for(let e=0;e<3;e++)"center"===r[e]?o[e]=t[e]-(n[0][e]+n[1][e])/2:"max"===r[e]?o[e]=t[e]-n[1][e]:"min"===r[e]&&(o[e]=t[e]-n[0][e]);return translate(o,e)},align=(e,...r)=>{e=Object.assign({},{modes:["center","center","min"],relativeTo:[0,0,0],grouped:!1},e),e=validateOptions(e);let{modes:t,relativeTo:n,grouped:o}=e;if(0===(r=flatten(r)).length)throw new Error("align(): No geometries were provided to act upon");if(n.filter(e=>null==e).length){const e=measureAggregateBoundingBox(r);n=populateRelativeToFromBounds(n,t,e)}return 1===(r=o?alignGeometries(r,t,n):r.map(e=>alignGeometries(e,t,n))).length?r[0]:r};module.exports=align;

},{"../../measurements/measureAggregateBoundingBox":246,"../../utils/flatten":374,"../../utils/padArrayToLength":378,"./translate":344}],338:[function(require,module,exports){
const flatten=require("../../utils/flatten"),geom2=require("../../geometries/geom2"),geom3=require("../../geometries/geom3"),path2=require("../../geometries/path2"),measureBoundingBox=require("../../measurements/measureBoundingBox"),{translate:translate}=require("./translate"),centerGeometry=(e,r)=>{const{axes:t,relativeTo:n}=Object.assign({},{axes:[!0,!0,!0],relativeTo:[0,0,0]},e),a=measureBoundingBox(r),o=[0,0,0];return t[0]&&(o[0]=n[0]-(a[0][0]+(a[1][0]-a[0][0])/2)),t[1]&&(o[1]=n[1]-(a[0][1]+(a[1][1]-a[0][1])/2)),t[2]&&(o[2]=n[2]-(a[0][2]+(a[1][2]-a[0][2])/2)),translate(o,r)},center=(e,...r)=>{const{axes:t,relativeTo:n}=Object.assign({},{axes:[!0,!0,!0],relativeTo:[0,0,0]},e);if(0===(r=flatten(r)).length)throw new Error("wrong number of arguments");if(3!==n.length)throw new Error("relativeTo must be an array of length 3");e={axes:t,relativeTo:n};const a=r.map(r=>path2.isA(r)?centerGeometry(e,r):geom2.isA(r)?centerGeometry(e,r):geom3.isA(r)?centerGeometry(e,r):r);return 1===a.length?a[0]:a},centerX=(...e)=>center({axes:[!0,!1,!1]},e),centerY=(...e)=>center({axes:[!1,!0,!1]},e),centerZ=(...e)=>center({axes:[!1,!1,!0]},e);module.exports={center:center,centerX:centerX,centerY:centerY,centerZ:centerZ};

},{"../../geometries/geom2":22,"../../geometries/geom3":36,"../../geometries/path2":57,"../../measurements/measureBoundingBox":250,"../../utils/flatten":374,"./translate":344}],339:[function(require,module,exports){
module.exports={align:require("./align"),center:require("./center").center,centerX:require("./center").centerX,centerY:require("./center").centerY,centerZ:require("./center").centerZ,mirror:require("./mirror").mirror,mirrorX:require("./mirror").mirrorX,mirrorY:require("./mirror").mirrorY,mirrorZ:require("./mirror").mirrorZ,rotate:require("./rotate").rotate,rotateX:require("./rotate").rotateX,rotateY:require("./rotate").rotateY,rotateZ:require("./rotate").rotateZ,scale:require("./scale").scale,scaleX:require("./scale").scaleX,scaleY:require("./scale").scaleY,scaleZ:require("./scale").scaleZ,transform:require("./transform"),translate:require("./translate").translate,translateX:require("./translate").translateX,translateY:require("./translate").translateY,translateZ:require("./translate").translateZ};

},{"./align":337,"./center":338,"./mirror":340,"./rotate":341,"./scale":342,"./transform":343,"./translate":344}],340:[function(require,module,exports){
const flatten=require("../../utils/flatten"),mat4=require("../../maths/mat4"),plane=require("../../maths/plane"),geom2=require("../../geometries/geom2"),geom3=require("../../geometries/geom3"),path2=require("../../geometries/path2"),mirror=(r,...e)=>{const{origin:o,normal:m}=Object.assign({},{origin:[0,0,0],normal:[0,0,1]},r);if(0===(e=flatten(e)).length)throw new Error("wrong number of arguments");const i=plane.fromNormalAndPoint(plane.create(),m,o);if(Number.isNaN(i[0]))throw new Error("the given origin and normal do not define a proper plane");const n=mat4.mirrorByPlane(mat4.create(),i),t=e.map(r=>path2.isA(r)?path2.transform(n,r):geom2.isA(r)?geom2.transform(n,r):geom3.isA(r)?geom3.transform(n,r):r);return 1===t.length?t[0]:t},mirrorX=(...r)=>mirror({normal:[1,0,0]},r),mirrorY=(...r)=>mirror({normal:[0,1,0]},r),mirrorZ=(...r)=>mirror({normal:[0,0,1]},r);module.exports={mirror:mirror,mirrorX:mirrorX,mirrorY:mirrorY,mirrorZ:mirrorZ};

},{"../../geometries/geom2":22,"../../geometries/geom3":36,"../../geometries/path2":57,"../../maths/mat4":137,"../../maths/plane":155,"../../utils/flatten":374}],341:[function(require,module,exports){
const flatten=require("../../utils/flatten"),mat4=require("../../maths/mat4"),geom2=require("../../geometries/geom2"),geom3=require("../../geometries/geom3"),path2=require("../../geometries/path2"),rotate=(t,...e)=>{if(!Array.isArray(t))throw new Error("angles must be an array");if(0===(e=flatten(e)).length)throw new Error("wrong number of arguments");for(t=t.slice();t.length<3;)t.push(0);const r=t[2],o=t[1],a=t[0],m=mat4.fromTaitBryanRotation(mat4.create(),r,o,a),n=e.map(t=>path2.isA(t)?path2.transform(m,t):geom2.isA(t)?geom2.transform(m,t):geom3.isA(t)?geom3.transform(m,t):t);return 1===n.length?n[0]:n},rotateX=(t,...e)=>rotate([t,0,0],e),rotateY=(t,...e)=>rotate([0,t,0],e),rotateZ=(t,...e)=>rotate([0,0,t],e);module.exports={rotate:rotate,rotateX:rotateX,rotateY:rotateY,rotateZ:rotateZ};

},{"../../geometries/geom2":22,"../../geometries/geom3":36,"../../geometries/path2":57,"../../maths/mat4":137,"../../utils/flatten":374}],342:[function(require,module,exports){
const flatten=require("../../utils/flatten"),mat4=require("../../maths/mat4"),geom2=require("../../geometries/geom2"),geom3=require("../../geometries/geom3"),path2=require("../../geometries/path2"),scale=(e,...r)=>{if(!Array.isArray(e))throw new Error("factors must be an array");if(0===(r=flatten(r)).length)throw new Error("wrong number of arguments");for(e=e.slice();e.length<3;)e.push(1);if(e[0]<=0||e[1]<=0||e[2]<=0)throw new Error("factors must be positive");const a=mat4.fromScaling(mat4.create(),e),t=r.map(e=>path2.isA(e)?path2.transform(a,e):geom2.isA(e)?geom2.transform(a,e):geom3.isA(e)?geom3.transform(a,e):e);return 1===t.length?t[0]:t},scaleX=(e,...r)=>scale([e,1,1],r),scaleY=(e,...r)=>scale([1,e,1],r),scaleZ=(e,...r)=>scale([1,1,e],r);module.exports={scale:scale,scaleX:scaleX,scaleY:scaleY,scaleZ:scaleZ};

},{"../../geometries/geom2":22,"../../geometries/geom3":36,"../../geometries/path2":57,"../../maths/mat4":137,"../../utils/flatten":374}],343:[function(require,module,exports){
const flatten=require("../../utils/flatten"),geom2=require("../../geometries/geom2"),geom3=require("../../geometries/geom3"),path2=require("../../geometries/path2"),transform=(e,...r)=>{if(0===(r=flatten(r)).length)throw new Error("wrong number of arguments");const t=r.map(r=>path2.isA(r)?path2.transform(e,r):geom2.isA(r)?geom2.transform(e,r):geom3.isA(r)?geom3.transform(e,r):r);return 1===t.length?t[0]:t};module.exports=transform;

},{"../../geometries/geom2":22,"../../geometries/geom3":36,"../../geometries/path2":57,"../../utils/flatten":374}],344:[function(require,module,exports){
const flatten=require("../../utils/flatten"),mat4=require("../../maths/mat4"),geom2=require("../../geometries/geom2"),geom3=require("../../geometries/geom3"),path2=require("../../geometries/path2"),translate=(t,...e)=>{if(!Array.isArray(t))throw new Error("offset must be an array");if(0===(e=flatten(e)).length)throw new Error("wrong number of arguments");for(t=t.slice();t.length<3;)t.push(0);const r=mat4.fromTranslation(mat4.create(),t),a=e.map(t=>path2.isA(t)?path2.transform(r,t):geom2.isA(t)?geom2.transform(r,t):geom3.isA(t)?geom3.transform(r,t):t);return 1===a.length?a[0]:a},translateX=(t,...e)=>translate([t,0,0],e),translateY=(t,...e)=>translate([0,t,0],e),translateZ=(t,...e)=>translate([0,0,t],e);module.exports={translate:translate,translateX:translateX,translateY:translateY,translateZ:translateZ};

},{"../../geometries/geom2":22,"../../geometries/geom3":36,"../../geometries/path2":57,"../../maths/mat4":137,"../../utils/flatten":374}],345:[function(require,module,exports){
const{EPS:EPS}=require("../maths/constants"),vec2=require("../maths/vec2"),path2=require("../geometries/path2"),{isGT:isGT,isGTE:isGTE,isNumberArray:isNumberArray}=require("./commonChecks"),arc=e=>{const r={center:[0,0],radius:1,startAngle:0,endAngle:2*Math.PI,makeTangent:!1,segments:32};let{center:t,radius:s,startAngle:a,endAngle:n,makeTangent:o,segments:c}=Object.assign({},r,e);if(!isNumberArray(t,2))throw new Error("center must be an array of X and Y values");if(!isGT(s,0))throw new Error("radius must be greater than zero");if(!isGTE(a,0))throw new Error("startAngle must be positive");if(!isGTE(n,0))throw new Error("endAngle must be positive");if(!isGTE(c,4))throw new Error("segments must be four or more");a%=2*Math.PI,n%=2*Math.PI;let i=2*Math.PI;a<n&&(i=n-a),a>n&&(i=n+(2*Math.PI-a));const m=Math.acos((s*s+s*s-EPS*EPS)/(2*s*s)),h=vec2.clone(t);let l;const u=[];if(i<m)l=vec2.fromAngleRadians(vec2.create(),a),vec2.scale(l,l,s),vec2.add(l,l,h),u.push(l);else{const e=Math.max(1,Math.floor(c*(i/(2*Math.PI))))+1;let r=.5*e/i;r>.25&&(r=.25);const t=o?e+2:e;for(let n=0;n<=t;n++){let t=n;o&&((t=(n-1)*(e-2*r)/e+r)<0&&(t=0),t>e&&(t=e));const c=a+t*(i/e);l=vec2.fromAngleRadians(vec2.create(),c),vec2.scale(l,l,s),vec2.add(l,l,h),u.push(l)}}return path2.fromPoints({close:!1},u)};module.exports=arc;

},{"../geometries/path2":57,"../maths/constants":87,"../maths/vec2":183,"./commonChecks":347}],346:[function(require,module,exports){
const ellipse=require("./ellipse"),{isGT:isGT}=require("./commonChecks"),circle=e=>{const r={center:[0,0],radius:1,startAngle:0,endAngle:2*Math.PI,segments:32};let{center:s,radius:t,startAngle:n,endAngle:i,segments:l}=Object.assign({},r,e);if(!isGT(t,0))throw new Error("radius must be greater than zero");return ellipse({center:s,radius:t=[t,t],startAngle:n,endAngle:i,segments:l})};module.exports=circle;

},{"./commonChecks":347,"./ellipse":352}],347:[function(require,module,exports){
const isNumberArray=(i,r)=>!!(Array.isArray(i)&&i.length>=r)&&i.every(i=>Number.isFinite(i)),isGT=(i,r)=>Number.isFinite(i)&&i>r,isGTE=(i,r)=>Number.isFinite(i)&&i>=r;module.exports={isNumberArray:isNumberArray,isGT:isGT,isGTE:isGTE};

},{}],348:[function(require,module,exports){
const cuboid=require("./cuboid"),{isGT:isGT}=require("./commonChecks"),cube=e=>{let{center:r,size:i}=Object.assign({},{center:[0,0,0],size:2},e);if(!isGT(i,0))throw new Error("size must be greater than zero");return cuboid({center:r,size:i=[i,i,i]})};module.exports=cube;

},{"./commonChecks":347,"./cuboid":349}],349:[function(require,module,exports){
const geom3=require("../geometries/geom3"),poly3=require("../geometries/poly3"),{isNumberArray:isNumberArray}=require("./commonChecks"),cuboid=e=>{const{center:r,size:o}=Object.assign({},{center:[0,0,0],size:[2,2,2]},e);if(!isNumberArray(r,3))throw new Error("center must be an array of X, Y and Z values");if(!isNumberArray(o,3))throw new Error("size must be an array of width, depth and height values");if(!o.every(e=>e>0))throw new Error("size values must be greater than zero");return geom3.create([[[0,4,6,2],[-1,0,0]],[[1,3,7,5],[1,0,0]],[[0,1,5,4],[0,-1,0]],[[2,6,7,3],[0,1,0]],[[0,2,3,1],[0,0,-1]],[[4,5,7,6],[0,0,1]]].map(e=>{const t=e[0].map(e=>{return[r[0]+o[0]/2*(2*!!(1&e)-1),r[1]+o[1]/2*(2*!!(2&e)-1),r[2]+o[2]/2*(2*!!(4&e)-1)]});return poly3.fromPoints(t)}))};module.exports=cuboid;

},{"../geometries/geom3":36,"../geometries/poly3":73,"./commonChecks":347}],350:[function(require,module,exports){
const cylinderElliptic=require("./cylinderElliptic"),{isGT:isGT}=require("./commonChecks"),cylinder=e=>{const{center:i,height:r,radius:t,segments:s}=Object.assign({},{center:[0,0,0],height:2,radius:1,segments:32},e);if(!isGT(t,0))throw new Error("radius must be greater than zero");return cylinderElliptic({center:i,height:r,startRadius:[t,t],endRadius:[t,t],segments:s})};module.exports=cylinder;

},{"./commonChecks":347,"./cylinderElliptic":351}],351:[function(require,module,exports){
const{EPS:EPS}=require("../maths/constants"),vec3=require("../maths/vec3"),geom3=require("../geometries/geom3"),poly3=require("../geometries/poly3"),{isGT:isGT,isGTE:isGTE,isNumberArray:isNumberArray}=require("./commonChecks"),cylinderElliptic=e=>{const r={center:[0,0,0],height:2,startRadius:[1,1],startAngle:0,endRadius:[1,1],endAngle:2*Math.PI,segments:32};let{center:t,height:s,startRadius:a,startAngle:n,endRadius:o,endAngle:i,segments:u}=Object.assign({},r,e);if(!isNumberArray(t,3))throw new Error("center must be an array of X, Y and Z values");if(!isGT(s,0))throw new Error("height must be greater then zero");if(!isNumberArray(a,2))throw new Error("startRadius must be an array of X and Y values");if(!a.every(e=>e>0))throw new Error("startRadius values must be greater than zero");if(!isNumberArray(o,2))throw new Error("endRadius must be an array of X and Y values");if(!o.every(e=>e>0))throw new Error("endRadius values must be greater than zero");if(!isGTE(n,0))throw new Error("startAngle must be positive");if(!isGTE(i,0))throw new Error("endAngle must be positive");if(!isGTE(u,4))throw new Error("segments must be four or more");n%=2*Math.PI,i%=2*Math.PI;let c=2*Math.PI;n<i&&(c=i-n),n>i&&(c=i+(2*Math.PI-n));const h=Math.min(a[0],a[1],o[0],o[1]),m=Math.acos((h*h+h*h-EPS*EPS)/(2*h*h));if(c<m)throw new Error("startAngle and endAngle do not define a significant rotation");const l=Math.floor(u*(c/(2*Math.PI))),d=vec3.fromValues(0,0,-s/2),v=vec3.fromValues(0,0,s/2),g=vec3.subtract(vec3.create(),v,d),f=vec3.fromValues(1,0,0),E=vec3.fromValues(0,1,0),p=vec3.create(),w=vec3.create(),b=vec3.create(),y=(e,r,t)=>{const s=r*c+n;return vec3.scale(p,f,t[0]*Math.cos(s)),vec3.scale(w,E,t[1]*Math.sin(s)),vec3.add(p,p,w),vec3.scale(b,g,e),vec3.add(b,b,d),vec3.add(vec3.create(),p,b)},A=(...e)=>{const r=e.map(e=>vec3.add(vec3.create(),e,t));return poly3.fromPoints(r)},M=[];for(let e=0;e<l;e++){const r=e/l,t=(e+1)/l;o[0]===a[0]&&o[1]===a[1]?(M.push(A(d,y(0,t,o),y(0,r,o))),M.push(A(y(0,t,o),y(1,t,o),y(1,r,o),y(0,r,o))),M.push(A(v,y(1,r,o),y(1,t,o)))):(a[0]>0&&(M.push(A(d,y(0,t,a),y(0,r,a))),M.push(A(y(0,r,a),y(0,t,a),y(1,r,o)))),o[0]>0&&(M.push(A(v,y(1,r,o),y(1,t,o))),M.push(A(y(1,r,o),y(0,t,a),y(1,t,o)))))}return c<2*Math.PI&&(M.push(A(d,y(0,0,a),v)),M.push(A(y(0,0,a),y(1,0,o),v)),M.push(A(d,v,y(0,1,a))),M.push(A(y(0,1,a),v,y(1,1,o)))),geom3.create(M)};module.exports=cylinderElliptic;

},{"../geometries/geom3":36,"../geometries/poly3":73,"../maths/constants":87,"../maths/vec3":214,"./commonChecks":347}],352:[function(require,module,exports){
const{EPS:EPS}=require("../maths/constants"),vec2=require("../maths/vec2"),geom2=require("../geometries/geom2"),{isGTE:isGTE,isNumberArray:isNumberArray}=require("./commonChecks"),ellipse=e=>{const r={center:[0,0],radius:[1,1],startAngle:0,endAngle:2*Math.PI,segments:32};let{center:t,radius:s,startAngle:n,endAngle:a,segments:o}=Object.assign({},r,e);if(!isNumberArray(t,2))throw new Error("center must be an array of X and Y values");if(!isNumberArray(s,2))throw new Error("radius must be an array of X and Y values");if(!s.every(e=>e>0))throw new Error("radius values must be greater than zero");if(!isGTE(n,0))throw new Error("startAngle must be positive");if(!isGTE(a,0))throw new Error("endAngle must be positive");if(!isGTE(o,3))throw new Error("segments must be three or more");n%=2*Math.PI,a%=2*Math.PI;let i=2*Math.PI;n<a&&(i=a-n),n>a&&(i=a+(2*Math.PI-n));const h=Math.min(s[0],s[1]);if(i<Math.acos((h*h+h*h-EPS*EPS)/(2*h*h)))throw new Error("startAngle and endAngle do not define a significant rotation");o=Math.floor(o*(i/(2*Math.PI)));const m=vec2.clone(t),u=i/o,l=[];o=i<2*Math.PI?o+1:o;for(let e=0;e<o;e++){const r=u*e+n,t=vec2.fromValues(s[0]*Math.cos(r),s[1]*Math.sin(r));vec2.add(t,m,t),l.push(t)}return i<2*Math.PI&&l.push(m),geom2.fromPoints(l)};module.exports=ellipse;

},{"../geometries/geom2":22,"../maths/constants":87,"../maths/vec2":183,"./commonChecks":347}],353:[function(require,module,exports){
const vec3=require("../maths/vec3"),geom3=require("../geometries/geom3"),poly3=require("../geometries/poly3"),{isGTE:isGTE,isNumberArray:isNumberArray}=require("./commonChecks"),ellipsoid=e=>{const{center:c,radius:a,segments:r,axes:s}=Object.assign({},{center:[0,0,0],radius:[1,1,1],segments:32,axes:[[1,0,0],[0,-1,0],[0,0,1]]},e);if(!isNumberArray(c,3))throw new Error("center must be an array of X, Y and Z values");if(!isNumberArray(a,3))throw new Error("radius must be an array of X, Y and Z values");if(!a.every(e=>e>0))throw new Error("radius values must be greater than zero");if(!isGTE(r,4))throw new Error("segments must be four or more");const t=vec3.scale(vec3.create(),vec3.normalize(vec3.create(),s[0]),a[0]),v=vec3.scale(vec3.create(),vec3.normalize(vec3.create(),s[1]),a[1]),o=vec3.scale(vec3.create(),vec3.normalize(vec3.create(),s[2]),a[2]),l=Math.round(r/4);let u;const d=[],i=vec3.create(),n=vec3.create();for(let e=0;e<=r;e++){const a=2*Math.PI*e/r,s=vec3.add(vec3.create(),vec3.scale(i,t,Math.cos(a)),vec3.scale(n,v,Math.sin(a)));if(e>0){let e,a;for(let r=0;r<=l;r++){const t=.5*Math.PI*r/l,v=Math.cos(t),m=Math.sin(t);if(r>0){let t,h=[];t=vec3.subtract(vec3.create(),vec3.scale(i,u,e),vec3.scale(n,o,a)),h.push(vec3.add(t,t,c)),t=vec3.subtract(vec3.create(),vec3.scale(i,s,e),vec3.scale(n,o,a)),h.push(vec3.add(t,t,c)),r<l&&(t=vec3.subtract(vec3.create(),vec3.scale(i,s,v),vec3.scale(n,o,m)),h.push(vec3.add(t,t,c))),t=vec3.subtract(vec3.create(),vec3.scale(i,u,v),vec3.scale(n,o,m)),h.push(vec3.add(t,t,c)),d.push(poly3.fromPoints(h)),h=[],t=vec3.add(vec3.create(),vec3.scale(i,u,e),vec3.scale(n,o,a)),h.push(vec3.add(vec3.create(),c,t)),t=vec3.add(t,vec3.scale(i,s,e),vec3.scale(n,o,a)),h.push(vec3.add(vec3.create(),c,t)),r<l&&(t=vec3.add(t,vec3.scale(i,s,v),vec3.scale(n,o,m)),h.push(vec3.add(vec3.create(),c,t))),t=vec3.add(t,vec3.scale(i,u,v),vec3.scale(n,o,m)),h.push(vec3.add(vec3.create(),c,t)),h.reverse(),d.push(poly3.fromPoints(h))}e=v,a=m}}u=s}return geom3.create(d)};module.exports=ellipsoid;

},{"../geometries/geom3":36,"../geometries/poly3":73,"../maths/vec3":214,"./commonChecks":347}],354:[function(require,module,exports){
const mat4=require("../maths/mat4"),geom3=require("../geometries/geom3"),polyhedron=require("./polyhedron"),{isGT:isGT,isGTE:isGTE}=require("./commonChecks"),geodesicSphere=e=>{let{radius:r,frequency:t}=Object.assign({},{radius:1,frequency:6},e);if(!isGT(r,0))throw new Error("radius must be greater than zero");if(!isGTE(t,6))throw new Error("frequency must be six or more");t=Math.floor(t/6);const o=[[.850651,0,-.525731],[.850651,-0,.525731],[-.850651,-0,.525731],[-.850651,0,-.525731],[0,-.525731,.850651],[0,.525731,.850651],[0,.525731,-.850651],[0,-.525731,-.850651],[-.525731,-.850651,-0],[.525731,-.850651,-0],[.525731,.850651,0],[-.525731,.850651,0]],s=[[0,9,1],[1,10,0],[6,7,0],[10,6,0],[7,9,0],[5,1,4],[4,1,9],[5,10,1],[2,8,3],[3,11,2],[2,5,4],[4,8,2],[2,11,5],[3,7,6],[6,11,3],[8,7,3],[9,8,4],[11,10,5],[10,11,6],[8,9,7]],n=(e,r,t)=>{const o=e[0],s=e[1],n=e[2];let c=t;const a=[],f=[];for(let e=0;e<r;e++)for(let t=0;t<r-e;t++){const l=e/r,u=(e+1)/r,h=t/(r-e),m=(t+1)/(r-e),p=r-e-1?t/(r-e-1):1,g=[];g[0]=i(i(o,s,h),n,l),g[1]=i(i(o,s,m),n,l),g[2]=i(i(o,s,p),n,u);for(let e=0;e<3;e++){const r=Math.sqrt(g[e][0]*g[e][0]+g[e][1]*g[e][1]+g[e][2]*g[e][2]);for(let t=0;t<3;t++)g[e][t]/=r}if(a.push(g[0],g[1],g[2]),f.push([c,c+1,c+2]),c+=3,t<r-e-1){const h=r-e-1?(t+1)/(r-e-1):1;g[0]=i(i(o,s,m),n,l),g[1]=i(i(o,s,h),n,u),g[2]=i(i(o,s,p),n,u);for(let e=0;e<3;e++){const r=Math.sqrt(g[e][0]*g[e][0]+g[e][1]*g[e][1]+g[e][2]*g[e][2]);for(let t=0;t<3;t++)g[e][t]/=r}a.push(g[0],g[1],g[2]),f.push([c,c+1,c+2]),c+=3}}return{points:a,triangles:f,offset:c}},i=(e,r,t)=>{const o=1-t,s=[];for(let n=0;n<3;n++)s[n]=e[n]*o+r[n]*t;return s};let c=[],a=[],f=0;for(let e=0;e<s.length;e++){const r=n([o[s[e][0]],o[s[e][1]],o[s[e][2]]],t,f);c=c.concat(r.points),a=a.concat(r.triangles),f=r.offset}let l=polyhedron({points:c,faces:a,orientation:"inward"});return 1!==r&&(l=geom3.transform(mat4.fromScaling(mat4.create(),[r,r,r]),l)),l};module.exports=geodesicSphere;

},{"../geometries/geom3":36,"../maths/mat4":137,"./commonChecks":347,"./polyhedron":358}],355:[function(require,module,exports){
module.exports={arc:require("./arc"),circle:require("./circle"),cube:require("./cube"),cuboid:require("./cuboid"),cylinder:require("./cylinder"),cylinderElliptic:require("./cylinderElliptic"),ellipse:require("./ellipse"),ellipsoid:require("./ellipsoid"),geodesicSphere:require("./geodesicSphere"),line:require("./line"),polygon:require("./polygon"),polyhedron:require("./polyhedron"),rectangle:require("./rectangle"),roundedCuboid:require("./roundedCuboid"),roundedCylinder:require("./roundedCylinder"),roundedRectangle:require("./roundedRectangle"),sphere:require("./sphere"),square:require("./square"),star:require("./star"),torus:require("./torus")};

},{"./arc":345,"./circle":346,"./cube":348,"./cuboid":349,"./cylinder":350,"./cylinderElliptic":351,"./ellipse":352,"./ellipsoid":353,"./geodesicSphere":354,"./line":356,"./polygon":357,"./polyhedron":358,"./rectangle":359,"./roundedCuboid":360,"./roundedCylinder":361,"./roundedRectangle":362,"./sphere":363,"./square":364,"./star":365,"./torus":366}],356:[function(require,module,exports){
const path2=require("../geometries/path2"),line=r=>{if(!Array.isArray(r))throw new Error("points must be an array");return path2.fromPoints({},r)};module.exports=line;

},{"../geometries/path2":57}],357:[function(require,module,exports){
const geom2=require("../geometries/geom2"),polygon=r=>{const{points:o,paths:t}=Object.assign({},{points:[],paths:[]},r);if(!Array.isArray(o)||!Array.isArray(t))throw new Error("points and paths must be arrays");let a=o;Array.isArray(o[0])&&(Array.isArray(o[0][0])||(a=[o])),a.forEach((r,o)=>{if(!Array.isArray(r))throw new Error("list of points "+o+" must be an array");if(r.length<3)throw new Error("list of points "+o+" must contain three or more points");r.forEach((r,t)=>{if(!Array.isArray(r))throw new Error("list of points "+o+", point "+t+" must be an array");if(r.length<2)throw new Error("list of points "+o+", point "+t+" must contain by X and Y values")})});let s=t;if(0===t.length){let r=0;s=a.map(o=>o.map(o=>r++))}const e=[];a.forEach(r=>r.forEach(r=>e.push(r)));let n=[];return s.forEach(r=>{const o=r.map(r=>e[r]),t=geom2.fromPoints(o);n=n.concat(geom2.toSides(t))}),geom2.create(n)};module.exports=polygon;

},{"../geometries/geom2":22}],358:[function(require,module,exports){
const geom3=require("../geometries/geom3"),poly3=require("../geometries/poly3"),{isNumberArray:isNumberArray}=require("./commonChecks"),polyhedron=r=>{const e={points:[],faces:[],colors:void 0,orientation:"outward"},{points:o,faces:a,colors:t,orientation:n}=Object.assign({},e,r);if(!Array.isArray(o)||!Array.isArray(a))throw new Error("points and faces must be arrays");if(o.length<3)throw new Error("three or more points are required");if(a.length<1)throw new Error("one or more faces are required");if(t){if(!Array.isArray(t))throw new Error("colors must be an array");if(t.length!==a.length)throw new Error("faces and colors must have the same length")}o.forEach((r,e)=>{if(!isNumberArray(r,3))throw new Error(`point ${e} must be an array of X, Y, Z values`)}),a.forEach((r,e)=>{if(r.length<3)throw new Error(`face ${e} must contain 3 or more indexes`);if(!isNumberArray(r,r.length))throw new Error(`face ${e} must be an array of numbers`)}),"outward"!==n&&a.forEach(r=>r.reverse());const s=a.map((r,e)=>{const a=poly3.fromPoints(r.map(r=>o[r]));return t&&t[e]&&(a.color=t[e]),a});return geom3.create(s)};module.exports=polyhedron;

},{"../geometries/geom3":36,"../geometries/poly3":73,"./commonChecks":347}],359:[function(require,module,exports){
const vec2=require("../maths/vec2"),geom2=require("../geometries/geom2"),{isNumberArray:isNumberArray}=require("./commonChecks"),rectangle=e=>{const{center:r,size:t}=Object.assign({},{center:[0,0],size:[2,2]},e);if(!isNumberArray(r,2))throw new Error("center must be an array of X and Y values");if(!isNumberArray(t,2))throw new Error("size must be an array of X and Y values");if(!t.every(e=>e>0))throw new Error("size values must be greater than zero");const a=[t[0]/2,t[1]/2],c=[a[0],-a[1]],s=[vec2.subtract(vec2.create(),r,a),vec2.add(vec2.create(),r,c),vec2.add(vec2.create(),r,a),vec2.subtract(vec2.create(),r,c)];return geom2.fromPoints(s)};module.exports=rectangle;

},{"../geometries/geom2":22,"../maths/vec2":183,"./commonChecks":347}],360:[function(require,module,exports){
const{EPS:EPS}=require("../maths/constants"),vec2=require("../maths/vec2"),vec3=require("../maths/vec3"),geom3=require("../geometries/geom3"),poly3=require("../geometries/poly3"),{isGT:isGT,isGTE:isGTE,isNumberArray:isNumberArray}=require("./commonChecks"),createCorners=(e,r,t,s,o,c)=>{const a=Math.PI/2*o/s,n=Math.cos(a),i=Math.sin(a),h=s-o;let u=t*n,l=r[2]-(t-t*i);c||(l=t-t*i-r[2]),u=u>EPS?u:0;const m=vec3.add(vec3.create(),e,[r[0]-t,r[1]-t,l]),d=vec3.add(vec3.create(),e,[t-r[0],r[1]-t,l]),v=vec3.add(vec3.create(),e,[t-r[0],t-r[1],l]),f=vec3.add(vec3.create(),e,[r[0]-t,t-r[1],l]),p=[],g=[],E=[],P=[];for(let e=0;e<=h;e++){const r=h>0?Math.PI/2*e/h:0,t=vec2.fromAngleRadians(vec2.create(),r);vec2.scale(t,t,u);const s=vec3.fromVec2(vec3.create(),t);p.push(vec3.add(vec3.create(),m,s)),vec3.rotateZ(s,s,[0,0,0],Math.PI/2),g.push(vec3.add(vec3.create(),d,s)),vec3.rotateZ(s,s,[0,0,0],Math.PI/2),E.push(vec3.add(vec3.create(),v,s)),vec3.rotateZ(s,s,[0,0,0],Math.PI/2),P.push(vec3.add(vec3.create(),f,s))}return c?[p,g,E,P]:(p.reverse(),g.reverse(),E.reverse(),P.reverse(),[P,E,g,p])},stitchCorners=(e,r)=>{const t=[];for(let s=0;s<e.length;s++){const o=e[s],c=r[s];for(let e=0;e<o.length-1;e++)t.push(poly3.fromPoints([o[e],o[e+1],c[e]])),e<c.length-1&&t.push(poly3.fromPoints([c[e],o[e+1],c[e+1]]))}return t},stitchWalls=(e,r)=>{const t=[];for(let s=0;s<e.length;s++){let o=e[s],c=r[s];const a=o[o.length-1],n=c[c.length-1],i=(s+1)%e.length;o=e[i],c=r[i];const h=o[0],u=c[0];t.push(poly3.fromPoints([a,h,u,n]))}return t},stitchSides=(e,r)=>{e=(e=[e[3],e[2],e[1],e[0]]).map(e=>e.slice().reverse());const t=[];e.forEach(e=>{e.forEach(e=>t.push(e))});const s=[];r.forEach(e=>{e.forEach(e=>s.push(e))});const o=[];for(let e=0;e<s.length;e++){const r=(e+1)%s.length;o.push(poly3.fromPoints([t[e],t[r],s[r],s[e]]))}return o},roundedCuboid=e=>{let{center:r,size:t,roundRadius:s,segments:o}=Object.assign({},{center:[0,0,0],size:[2,2,2],roundRadius:.2,segments:32},e);if(!isNumberArray(r,3))throw new Error("center must be an array of X, Y and Z values");if(!isNumberArray(t,3))throw new Error("size must be an array of X, Y and Z values");if(!t.every(e=>e>0))throw new Error("size values must be greater than zero");if(!isGT(s,0))throw new Error("roundRadius must be greater than zero");if(!isGTE(o,4))throw new Error("segments must be four or more");if(s>(t=t.map(e=>e/2))[0]-EPS||s>t[1]-EPS||s>t[2]-EPS)throw new Error("roundRadius must be smaller then the radius of all dimensions");o=Math.floor(o/4);let c=null,a=null,n=[];for(let e=0;e<=o;e++){const i=createCorners(r,t,s,o,e,!0),h=createCorners(r,t,s,o,e,!1);if(0===e&&(n=n.concat(stitchSides(h,i))),c&&(n=n.concat(stitchCorners(c,i),stitchWalls(c,i))),a&&(n=n.concat(stitchCorners(a,h),stitchWalls(a,h))),e===o){let e=i.map(e=>e[0]);n.push(poly3.fromPoints(e)),e=h.map(e=>e[0]),n.push(poly3.fromPoints(e))}c=i,a=h}return geom3.create(n)};module.exports=roundedCuboid;

},{"../geometries/geom3":36,"../geometries/poly3":73,"../maths/constants":87,"../maths/vec2":183,"../maths/vec3":214,"./commonChecks":347}],361:[function(require,module,exports){
const{EPS:EPS}=require("../maths/constants"),vec3=require("../maths/vec3"),geom3=require("../geometries/geom3"),poly3=require("../geometries/poly3"),{isGT:isGT,isGTE:isGTE,isNumberArray:isNumberArray}=require("./commonChecks"),roundedCylinder=e=>{const{center:c,height:r,radius:a,roundRadius:s,segments:t}=Object.assign({},{center:[0,0,0],height:2,radius:1,roundRadius:.2,segments:32},e);if(!isNumberArray(c,3))throw new Error("center must be an array of X, Y and Z values");if(!isGT(r,0))throw new Error("height must be greater then zero");if(!isGT(a,0))throw new Error("radius must be greater then zero");if(!isGT(s,0))throw new Error("roundRadius must be greater then zero");if(s>a-EPS)throw new Error("roundRadius must be smaller then the radius");if(!isGTE(t,4))throw new Error("segments must be four or more");const v=[0,0,-r/2],o=[0,0,r/2],d=vec3.subtract(vec3.create(),o,v);if(2*s>vec3.length(d)-EPS)throw new Error("height must be larger than twice roundRadius");let u;u=Math.abs(d[0])>Math.abs(d[1])?vec3.fromValues(0,1,0):vec3.fromValues(1,0,0);const i=vec3.scale(vec3.create(),vec3.normalize(vec3.create(),d),s),n=vec3.scale(vec3.create(),vec3.normalize(vec3.create(),vec3.cross(vec3.create(),i,u)),a),h=vec3.scale(vec3.create(),vec3.normalize(vec3.create(),vec3.cross(vec3.create(),n,i)),a);vec3.add(v,v,i),vec3.subtract(o,o,i);const l=Math.floor(.25*t),m=e=>{const r=e.map(e=>vec3.add(e,e,c));return poly3.fromPoints(r)},p=[],b=vec3.create(),g=vec3.create();let f;for(let e=0;e<=t;e++){const c=2*Math.PI*e/t,r=vec3.add(vec3.create(),vec3.scale(b,n,Math.cos(c)),vec3.scale(g,h,Math.sin(c)));if(e>0){let e,c,a=[];a.push(vec3.add(vec3.create(),v,r)),a.push(vec3.add(vec3.create(),v,f)),a.push(vec3.add(vec3.create(),o,f)),a.push(vec3.add(vec3.create(),o,r)),p.push(m(a));for(let s=0;s<=l;s++){const t=.5*Math.PI*s/l,d=Math.cos(t),u=Math.sin(t);if(s>0){let t;a=[],t=vec3.add(vec3.create(),v,vec3.subtract(b,vec3.scale(b,f,e),vec3.scale(g,i,c))),a.push(t),t=vec3.add(vec3.create(),v,vec3.subtract(b,vec3.scale(b,r,e),vec3.scale(g,i,c))),a.push(t),s<l&&(t=vec3.add(vec3.create(),v,vec3.subtract(b,vec3.scale(b,r,d),vec3.scale(g,i,u))),a.push(t)),t=vec3.add(vec3.create(),v,vec3.subtract(b,vec3.scale(b,f,d),vec3.scale(g,i,u))),a.push(t),p.push(m(a)),a=[],t=vec3.add(vec3.create(),vec3.scale(b,f,e),vec3.scale(g,i,c)),vec3.add(t,t,o),a.push(t),t=vec3.add(vec3.create(),vec3.scale(b,r,e),vec3.scale(g,i,c)),vec3.add(t,t,o),a.push(t),s<l&&(t=vec3.add(vec3.create(),vec3.scale(b,r,d),vec3.scale(g,i,u)),vec3.add(t,t,o),a.push(t)),t=vec3.add(vec3.create(),vec3.scale(b,f,d),vec3.scale(g,i,u)),vec3.add(t,t,o),a.push(t),a.reverse(),p.push(m(a))}e=d,c=u}}f=r}return geom3.create(p)};module.exports=roundedCylinder;

},{"../geometries/geom3":36,"../geometries/poly3":73,"../maths/constants":87,"../maths/vec3":214,"./commonChecks":347}],362:[function(require,module,exports){
const{EPS:EPS}=require("../maths/constants"),vec2=require("../maths/vec2"),geom2=require("../geometries/geom2"),{isGT:isGT,isGTE:isGTE,isNumberArray:isNumberArray}=require("./commonChecks"),roundedRectangle=e=>{let{center:r,size:a,roundRadius:t,segments:s}=Object.assign({},{center:[0,0],size:[2,2],roundRadius:.2,segments:32},e);if(!isNumberArray(r,2))throw new Error("center must be an array of X and Y values");if(!isNumberArray(a,2))throw new Error("size must be an array of X and Y values");if(!a.every(e=>e>0))throw new Error("size values must be greater than zero");if(!isGT(t,0))throw new Error("roundRadius must be greater than zero");if(!isGTE(s,4))throw new Error("segments must be four or more");if(t>(a=a.map(e=>e/2))[0]-EPS||t>a[1]-EPS)throw new Error("roundRadius must be smaller then the radius of all dimensions");const c=Math.floor(s/4),o=vec2.add(vec2.create(),r,[a[0]-t,a[1]-t]),n=vec2.add(vec2.create(),r,[t-a[0],a[1]-t]),i=vec2.add(vec2.create(),r,[t-a[0],t-a[1]]),u=vec2.add(vec2.create(),r,[a[0]-t,t-a[1]]),d=[],v=[],m=[],h=[];for(let e=0;e<=c;e++){const r=Math.PI/2*e/c,a=vec2.fromAngleRadians(vec2.create(),r);vec2.scale(a,a,t),d.push(vec2.add(vec2.create(),o,a)),vec2.rotate(a,a,vec2.create(),Math.PI/2),v.push(vec2.add(vec2.create(),n,a)),vec2.rotate(a,a,vec2.create(),Math.PI/2),m.push(vec2.add(vec2.create(),i,a)),vec2.rotate(a,a,vec2.create(),Math.PI/2),h.push(vec2.add(vec2.create(),u,a))}return geom2.fromPoints(d.concat(v,m,h))};module.exports=roundedRectangle;

},{"../geometries/geom2":22,"../maths/constants":87,"../maths/vec2":183,"./commonChecks":347}],363:[function(require,module,exports){
const ellipsoid=require("./ellipsoid"),{isGT:isGT}=require("./commonChecks"),sphere=e=>{let{center:s,radius:r,segments:i,axes:t}=Object.assign({},{center:[0,0,0],radius:1,segments:32,axes:[[1,0,0],[0,-1,0],[0,0,1]]},e);if(!isGT(r,0))throw new Error("radius must be greater than zero");return ellipsoid({center:s,radius:r=[r,r,r],segments:i,axes:t})};module.exports=sphere;

},{"./commonChecks":347,"./ellipsoid":353}],364:[function(require,module,exports){
const rectangle=require("./rectangle"),{isGT:isGT}=require("./commonChecks"),square=e=>{let{center:r,size:s}=Object.assign({},{center:[0,0],size:2},e);if(!isGT(s,0))throw new Error("size must be greater than zero");return rectangle({center:r,size:s=[s,s]})};module.exports=square;

},{"./commonChecks":347,"./rectangle":359}],365:[function(require,module,exports){
const vec2=require("../maths/vec2"),geom2=require("../geometries/geom2"),{isGT:isGT,isGTE:isGTE,isNumberArray:isNumberArray}=require("./commonChecks"),getRadiusRatio=(e,r)=>e>0&&r>1&&r<e/2?Math.cos(Math.PI*r/e)/Math.cos(Math.PI*(r-1)/e):0,getPoints=(e,r,t,s)=>{const o=2*Math.PI/e,i=[];for(let a=0;a<e;a++){const e=vec2.fromAngleRadians(vec2.create(),o*a+t);vec2.scale(e,e,r),vec2.add(e,s,e),i.push(e)}return i},star=e=>{let{center:r,vertices:t,outerRadius:s,innerRadius:o,density:i,startAngle:a}=Object.assign({},{center:[0,0],vertices:5,outerRadius:1,innerRadius:0,density:2,startAngle:0},e);if(!isNumberArray(r,2))throw new Error("center must be an array of X and Y values");if(!isGTE(t,2))throw new Error("vertices must be two or more");if(!isGT(s,0))throw new Error("outerRadius must be greater than zero");if(!isGTE(o,0))throw new Error("innerRadius must be greater than zero");if(!isGTE(a,0))throw new Error("startAngle must be greater than zero");if(t=Math.floor(t),i=Math.floor(i),a%=2*Math.PI,0===o){if(!isGTE(i,2))throw new Error("density must be two or more");o=s*getRadiusRatio(t,i)}const n=vec2.clone(r),u=getPoints(t,s,a,n),c=getPoints(t,o,a+Math.PI/t,n),h=[];for(let e=0;e<t;e++)h.push(u[e]),h.push(c[e]);return geom2.fromPoints(h)};module.exports=star;

},{"../geometries/geom2":22,"../maths/vec2":183,"./commonChecks":347}],366:[function(require,module,exports){
const extrudeRotate=require("../operations/extrusions/extrudeRotate"),{rotate:rotate}=require("../operations/transforms/rotate"),{translate:translate}=require("../operations/transforms/translate"),circle=require("./circle"),{isGT:isGT,isGTE:isGTE}=require("./commonChecks"),torus=e=>{const r={innerRadius:1,innerSegments:32,outerRadius:4,outerSegments:32,innerRotation:0,startAngle:0,outerRotation:2*Math.PI},{innerRadius:t,innerSegments:o,outerRadius:n,outerSegments:s,innerRotation:i,startAngle:a,outerRotation:u}=Object.assign({},r,e);if(!isGT(t,0))throw new Error("innerRadius must be greater than zero");if(!isGTE(o,3))throw new Error("innerSegments must be three or more");if(!isGT(n,0))throw new Error("outerRadius must be greater than zero");if(!isGTE(s,3))throw new Error("outerSegments must be three or more");if(!isGTE(a,0))throw new Error("startAngle must be positive");if(!isGT(u,0))throw new Error("outerRotation must be greater than zero");if(t>=n)throw new Error("inner circle is two large to rotate about the outer circle");let m=circle({radius:t,segments:o});return 0!==i&&(m=rotate([0,0,i],m)),m=translate([n,0],m),extrudeRotate({startAngle:a,angle:u,segments:s},m)};module.exports=torus;

},{"../operations/extrusions/extrudeRotate":296,"../operations/transforms/rotate":341,"../operations/transforms/translate":344,"./circle":346,"./commonChecks":347}],367:[function(require,module,exports){
module.exports={height:14,32:[16],33:[10,5,21,5,7,void 0,5,2,4,1,5,0,6,1,5,2],34:[16,4,21,4,14,void 0,12,21,12,14],35:[21,11,25,4,-7,void 0,17,25,10,-7,void 0,4,12,18,12,void 0,3,6,17,6],36:[20,8,25,8,-4,void 0,12,25,12,-4,void 0,17,18,15,20,12,21,8,21,5,20,3,18,3,16,4,14,5,13,7,12,13,10,15,9,16,8,17,6,17,3,15,1,12,0,8,0,5,1,3,3],37:[24,21,21,3,0,void 0,8,21,10,19,10,17,9,15,7,14,5,14,3,16,3,18,4,20,6,21,8,21,10,20,13,19,16,19,19,20,21,21,void 0,17,7,15,6,14,4,14,2,16,0,18,0,20,1,21,3,21,5,19,7,17,7],38:[26,23,12,23,13,22,14,21,14,20,13,19,11,17,6,15,3,13,1,11,0,7,0,5,1,4,2,3,4,3,6,4,8,5,9,12,13,13,14,14,16,14,18,13,20,11,21,9,20,8,18,8,16,9,13,11,10,16,3,18,1,20,0,22,0,23,1,23,2],39:[10,5,19,4,20,5,21,6,20,6,18,5,16,4,15],40:[14,11,25,9,23,7,20,5,16,4,11,4,7,5,2,7,-2,9,-5,11,-7],41:[14,3,25,5,23,7,20,9,16,10,11,10,7,9,2,7,-2,5,-5,3,-7],42:[16,8,21,8,9,void 0,3,18,13,12,void 0,13,18,3,12],43:[26,13,18,13,0,void 0,4,9,22,9],44:[10,6,1,5,0,4,1,5,2,6,1,6,-1,5,-3,4,-4],45:[26,4,9,22,9],46:[10,5,2,4,1,5,0,6,1,5,2],47:[22,20,25,2,-7],48:[20,9,21,6,20,4,17,3,12,3,9,4,4,6,1,9,0,11,0,14,1,16,4,17,9,17,12,16,17,14,20,11,21,9,21],49:[20,6,17,8,18,11,21,11,0],50:[20,4,16,4,17,5,19,6,20,8,21,12,21,14,20,15,19,16,17,16,15,15,13,13,10,3,0,17,0],51:[20,5,21,16,21,10,13,13,13,15,12,16,11,17,8,17,6,16,3,14,1,11,0,8,0,5,1,4,2,3,4],52:[20,13,21,3,7,18,7,void 0,13,21,13,0],53:[20,15,21,5,21,4,12,5,13,8,14,11,14,14,13,16,11,17,8,17,6,16,3,14,1,11,0,8,0,5,1,4,2,3,4],54:[20,16,18,15,20,12,21,10,21,7,20,5,17,4,12,4,7,5,3,7,1,10,0,11,0,14,1,16,3,17,6,17,7,16,10,14,12,11,13,10,13,7,12,5,10,4,7],55:[20,17,21,7,0,void 0,3,21,17,21],56:[20,8,21,5,20,4,18,4,16,5,14,7,13,11,12,14,11,16,9,17,7,17,4,16,2,15,1,12,0,8,0,5,1,4,2,3,4,3,7,4,9,6,11,9,12,13,13,15,14,16,16,16,18,15,20,12,21,8,21],57:[20,16,14,15,11,13,9,10,8,9,8,6,9,4,11,3,14,3,15,4,18,6,20,9,21,10,21,13,20,15,18,16,14,16,9,15,4,13,1,10,0,8,0,5,1,4,3],58:[10,5,14,4,13,5,12,6,13,5,14,void 0,5,2,4,1,5,0,6,1,5,2],59:[10,5,14,4,13,5,12,6,13,5,14,void 0,6,1,5,0,4,1,5,2,6,1,6,-1,5,-3,4,-4],60:[24,20,18,4,9,20,0],61:[26,4,12,22,12,void 0,4,6,22,6],62:[24,4,18,20,9,4,0],63:[18,3,16,3,17,4,19,5,20,7,21,11,21,13,20,14,19,15,17,15,15,14,13,13,12,9,10,9,7,void 0,9,2,8,1,9,0,10,1,9,2],64:[27,18,13,17,15,15,16,12,16,10,15,9,14,8,11,8,8,9,6,11,5,14,5,16,6,17,8,void 0,12,16,10,14,9,11,9,8,10,6,11,5,void 0,18,16,17,8,17,6,19,5,21,5,23,7,24,10,24,12,23,15,22,17,20,19,18,20,15,21,12,21,9,20,7,19,5,17,4,15,3,12,3,9,4,6,5,4,7,2,9,1,12,0,15,0,18,1,20,2,21,3,void 0,19,16,18,8,18,6,19,5],65:[18,9,21,1,0,void 0,9,21,17,0,void 0,4,7,14,7],66:[21,4,21,4,0,void 0,4,21,13,21,16,20,17,19,18,17,18,15,17,13,16,12,13,11,void 0,4,11,13,11,16,10,17,9,18,7,18,4,17,2,16,1,13,0,4,0],67:[21,18,16,17,18,15,20,13,21,9,21,7,20,5,18,4,16,3,13,3,8,4,5,5,3,7,1,9,0,13,0,15,1,17,3,18,5],68:[21,4,21,4,0,void 0,4,21,11,21,14,20,16,18,17,16,18,13,18,8,17,5,16,3,14,1,11,0,4,0],69:[19,4,21,4,0,void 0,4,21,17,21,void 0,4,11,12,11,void 0,4,0,17,0],70:[18,4,21,4,0,void 0,4,21,17,21,void 0,4,11,12,11],71:[21,18,16,17,18,15,20,13,21,9,21,7,20,5,18,4,16,3,13,3,8,4,5,5,3,7,1,9,0,13,0,15,1,17,3,18,5,18,8,void 0,13,8,18,8],72:[22,4,21,4,0,void 0,18,21,18,0,void 0,4,11,18,11],73:[8,4,21,4,0],74:[16,12,21,12,5,11,2,10,1,8,0,6,0,4,1,3,2,2,5,2,7],75:[21,4,21,4,0,void 0,18,21,4,7,void 0,9,12,18,0],76:[17,4,21,4,0,void 0,4,0,16,0],77:[24,4,21,4,0,void 0,4,21,12,0,void 0,20,21,12,0,void 0,20,21,20,0],78:[22,4,21,4,0,void 0,4,21,18,0,void 0,18,21,18,0],79:[22,9,21,7,20,5,18,4,16,3,13,3,8,4,5,5,3,7,1,9,0,13,0,15,1,17,3,18,5,19,8,19,13,18,16,17,18,15,20,13,21,9,21],80:[21,4,21,4,0,void 0,4,21,13,21,16,20,17,19,18,17,18,14,17,12,16,11,13,10,4,10],81:[22,9,21,7,20,5,18,4,16,3,13,3,8,4,5,5,3,7,1,9,0,13,0,15,1,17,3,18,5,19,8,19,13,18,16,17,18,15,20,13,21,9,21,void 0,12,4,18,-2],82:[21,4,21,4,0,void 0,4,21,13,21,16,20,17,19,18,17,18,15,17,13,16,12,13,11,4,11,void 0,11,11,18,0],83:[20,17,18,15,20,12,21,8,21,5,20,3,18,3,16,4,14,5,13,7,12,13,10,15,9,16,8,17,6,17,3,15,1,12,0,8,0,5,1,3,3],84:[16,8,21,8,0,void 0,1,21,15,21],85:[22,4,21,4,6,5,3,7,1,10,0,12,0,15,1,17,3,18,6,18,21],86:[18,1,21,9,0,void 0,17,21,9,0],87:[24,2,21,7,0,void 0,12,21,7,0,void 0,12,21,17,0,void 0,22,21,17,0],88:[20,3,21,17,0,void 0,17,21,3,0],89:[18,1,21,9,11,9,0,void 0,17,21,9,11],90:[20,17,21,3,0,void 0,3,21,17,21,void 0,3,0,17,0],91:[14,4,25,4,-7,void 0,5,25,5,-7,void 0,4,25,11,25,void 0,4,-7,11,-7],92:[14,0,21,14,-3],93:[14,9,25,9,-7,void 0,10,25,10,-7,void 0,3,25,10,25,void 0,3,-7,10,-7],94:[16,6,15,8,18,10,15,void 0,3,12,8,17,13,12,void 0,8,17,8,0],95:[16,0,-2,16,-2],96:[10,6,21,5,20,4,18,4,16,5,15,6,16,5,17],97:[19,15,14,15,0,void 0,15,11,13,13,11,14,8,14,6,13,4,11,3,8,3,6,4,3,6,1,8,0,11,0,13,1,15,3],98:[19,4,21,4,0,void 0,4,11,6,13,8,14,11,14,13,13,15,11,16,8,16,6,15,3,13,1,11,0,8,0,6,1,4,3],99:[18,15,11,13,13,11,14,8,14,6,13,4,11,3,8,3,6,4,3,6,1,8,0,11,0,13,1,15,3],100:[19,15,21,15,0,void 0,15,11,13,13,11,14,8,14,6,13,4,11,3,8,3,6,4,3,6,1,8,0,11,0,13,1,15,3],101:[18,3,8,15,8,15,10,14,12,13,13,11,14,8,14,6,13,4,11,3,8,3,6,4,3,6,1,8,0,11,0,13,1,15,3],102:[12,10,21,8,21,6,20,5,17,5,0,void 0,2,14,9,14],103:[19,15,14,15,-2,14,-5,13,-6,11,-7,8,-7,6,-6,void 0,15,11,13,13,11,14,8,14,6,13,4,11,3,8,3,6,4,3,6,1,8,0,11,0,13,1,15,3],104:[19,4,21,4,0,void 0,4,10,7,13,9,14,12,14,14,13,15,10,15,0],105:[8,3,21,4,20,5,21,4,22,3,21,void 0,4,14,4,0],106:[10,5,21,6,20,7,21,6,22,5,21,void 0,6,14,6,-3,5,-6,3,-7,1,-7],107:[17,4,21,4,0,void 0,14,14,4,4,void 0,8,8,15,0],108:[8,4,21,4,0],109:[30,4,14,4,0,void 0,4,10,7,13,9,14,12,14,14,13,15,10,15,0,void 0,15,10,18,13,20,14,23,14,25,13,26,10,26,0],110:[19,4,14,4,0,void 0,4,10,7,13,9,14,12,14,14,13,15,10,15,0],111:[19,8,14,6,13,4,11,3,8,3,6,4,3,6,1,8,0,11,0,13,1,15,3,16,6,16,8,15,11,13,13,11,14,8,14],112:[19,4,14,4,-7,void 0,4,11,6,13,8,14,11,14,13,13,15,11,16,8,16,6,15,3,13,1,11,0,8,0,6,1,4,3],113:[19,15,14,15,-7,void 0,15,11,13,13,11,14,8,14,6,13,4,11,3,8,3,6,4,3,6,1,8,0,11,0,13,1,15,3],114:[13,4,14,4,0,void 0,4,8,5,11,7,13,9,14,12,14],115:[17,14,11,13,13,10,14,7,14,4,13,3,11,4,9,6,8,11,7,13,6,14,4,14,3,13,1,10,0,7,0,4,1,3,3],116:[12,5,21,5,4,6,1,8,0,10,0,void 0,2,14,9,14],117:[19,4,14,4,4,5,1,7,0,10,0,12,1,15,4,void 0,15,14,15,0],118:[16,2,14,8,0,void 0,14,14,8,0],119:[22,3,14,7,0,void 0,11,14,7,0,void 0,11,14,15,0,void 0,19,14,15,0],120:[17,3,14,14,0,void 0,14,14,3,0],121:[16,2,14,8,0,void 0,14,14,8,0,6,-4,4,-6,2,-7,1,-7],122:[17,14,14,3,0,void 0,3,14,14,14,void 0,3,0,14,0],123:[14,9,25,7,24,6,23,5,21,5,19,6,17,7,16,8,14,8,12,6,10,void 0,7,24,6,22,6,20,7,18,8,17,9,15,9,13,8,11,4,9,8,7,9,5,9,3,8,1,7,0,6,-2,6,-4,7,-6,void 0,6,8,8,6,8,4,7,2,6,1,5,-1,5,-3,6,-5,7,-6,9,-7],124:[8,4,25,4,-7],125:[14,5,25,7,24,8,23,9,21,9,19,8,17,7,16,6,14,6,12,8,10,void 0,7,24,8,22,8,20,7,18,6,17,5,15,5,13,6,11,10,9,6,7,5,5,5,3,6,1,7,0,8,-2,8,-4,7,-6,void 0,8,8,6,6,6,4,7,2,8,1,9,-1,9,-3,8,-5,7,-6,5,-7],126:[24,3,6,3,8,4,11,6,12,8,12,10,11,14,8,16,7,18,7,20,8,21,10,void 0,3,8,4,10,6,11,8,11,10,10,14,7,16,6,18,6,20,7,21,10,21,12]};

},{}],368:[function(require,module,exports){
module.exports={vectorChar:require("./vectorChar"),vectorText:require("./vectorText")};

},{"./vectorChar":369,"./vectorText":371}],369:[function(require,module,exports){
const vectorParams=require("./vectorParams"),vectorChar=(t,e)=>{const{xOffset:r,yOffset:s,input:h,font:o,height:c,extrudeOffset:n}=vectorParams(t,e);let a=h.charCodeAt(0);a&&o[a]||(a=63);const f=[].concat(o[a]),i=(c-n)/o.height,u=n/2,g=f.shift()*i,l=[];let v=[];for(let t=0,e=f.length;t<e;t+=2){const e=i*f[t]+r,h=i*f[t+1]+s+u;void 0===f[t]?(l.push(v),v=[],t--):v.push([e,h])}return v.length&&l.push(v),{width:g,height:c,segments:l}};module.exports=vectorChar;

},{"./vectorParams":370}],370:[function(require,module,exports){
const defaultFont=require("./fonts/single-line/hershey/simplex.js"),defaultsVectorParams={xOffset:0,yOffset:0,input:"?",align:"left",font:defaultFont,height:14,lineSpacing:2.142857142857143,letterSpacing:1,extrudeOffset:0},vectorParams=(t,e)=>{e||"string"!=typeof t||(t={input:t}),t=t||{};const s=Object.assign({},defaultsVectorParams,t);return s.input=e||s.input,s};module.exports=vectorParams;

},{"./fonts/single-line/hershey/simplex.js":367}],371:[function(require,module,exports){
const vectorChar=require("./vectorChar"),vectorParams=require("./vectorParams"),translateLine=(t,e)=>{const{x:n,y:s}=Object.assign({x:0,y:0},t||{}),r=e.segments;let h=null,a=null;for(let t=0,e=r.length;t<e;t++)for(let e=0,o=(h=r[t]).length;e<o;e++)a=h[e],h[e]=[a[0]+n,a[1]+s];return e},vectorText=(t,e)=>{const{xOffset:n,yOffset:s,input:r,font:h,height:a,align:o,extrudeOffset:i,lineSpacing:c,letterSpacing:g}=vectorParams(t,e);let[l,f]=[n,s],[m,x,u,d,v,w]=[],O={width:0,segments:[]};const p=[];let y=[],C=0;const L=l,P=()=>{p.push(O),C=Math.max(C,O.width),O={width:0,segments:[]}};for(m=0,x=r.length;m<x;m++)u=r[m],d=vectorChar({xOffset:l,yOffset:f,font:h,height:a,extrudeOffset:i},u),"\n"!==u?(v=d.width*g,O.width+=v,l+=v," "!==u&&(O.segments=O.segments.concat(d.segments))):(l=L,f-=d.height*c,P());for(O.segments.length&&P(),m=0,x=p.length;m<x;m++)O=p[m],C>O.width&&(w=C-O.width,"right"===o?O=translateLine({x:w},O):"center"===o&&(O=translateLine({x:w/2},O))),y=y.concat(O.segments);return y};module.exports=vectorText;

},{"./vectorChar":369,"./vectorParams":370}],372:[function(require,module,exports){
const geom2=require("../geometries/geom2"),geom3=require("../geometries/geom3"),path2=require("../geometries/path2"),areAllShapesTheSameType=e=>{let r;return e.forEach(e=>{let o=0;if(geom2.isA(e)&&(o=1),geom3.isA(e)&&(o=2),path2.isA(e)&&(o=3),r&&o!==r)return!1;r=o}),!0};module.exports=areAllShapesTheSameType;

},{"../geometries/geom2":22,"../geometries/geom3":36,"../geometries/path2":57}],373:[function(require,module,exports){
const degToRad=d=>.017453292519943295*d;module.exports=degToRad;

},{}],374:[function(require,module,exports){
const flatten=t=>t.reduce((t,a)=>Array.isArray(a)?t.concat(flatten(a)):t.concat(a),[]);module.exports=flatten;

},{}],375:[function(require,module,exports){
const fnNumberSort=(o,r)=>o-r;module.exports=fnNumberSort;

},{}],376:[function(require,module,exports){
module.exports={areAllShapesTheSameType:require("./areAllShapesTheSameType"),degToRad:require("./degToRad"),flatten:require("./flatten"),fnNumberSort:require("./fnNumberSort"),insertSorted:require("./insertSorted"),radiusToSegments:require("./radiusToSegments"),radToDeg:require("./radToDeg")};

},{"./areAllShapesTheSameType":372,"./degToRad":373,"./flatten":374,"./fnNumberSort":375,"./insertSorted":377,"./radToDeg":379,"./radiusToSegments":380}],377:[function(require,module,exports){
const insertSorted=(t,e,o)=>{let r=0,s=t.length;for(;s>r;){const l=Math.floor((r+s)/2);o(e,t[l])>0?r=l+1:s=l}t.splice(r,0,e)};module.exports=insertSorted;

},{}],378:[function(require,module,exports){
const padArrayToLength=(r,e,o)=>{for(r=r.slice();r.length<o;)r.push(e);return r};module.exports=padArrayToLength;

},{}],379:[function(require,module,exports){
const radToDeg=o=>57.29577951308232*o;module.exports=radToDeg;

},{}],380:[function(require,module,exports){
const radiusToSegments=(t,e,a)=>{const s=e>0?2*t*Math.PI/e:0,o=a>0?2*Math.PI/a:0;return Math.ceil(Math.max(s,o,4))};module.exports=radiusToSegments;

},{}]},{},[85])(85)
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,
